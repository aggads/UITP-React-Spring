{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\aggad.samy\\\\Workspace\\\\uitp-service\\\\Front-end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"C:\\\\Users\\\\aggad.samy\\\\Workspace\\\\uitp-service\\\\Front-end\\\\src\\\\components\\\\FormPage\\\\Mainform\\\\MainForm.js\";\nimport Frequency from './Frequency/Radio';\nimport Comments from './Comment/Comment'; // import Legend from './Legend/Legend';\n\nimport Motivation from './Motivation/Motivation';\nimport Categories from './Categories/Categories';\nimport URLStorage from '../../../constants';\nimport { Link } from 'react-router-dom';\nimport uniqueid from 'uniqid'; // import  ConfirmModal  from '../Modal';\n\nimport '../../../App.css';\nimport axios from 'axios';\nimport React from 'react';\nimport { Container, Row, Col, Button, Form, FormGroup } from 'reactstrap';\nimport './MainForm.css';\nimport DropdownExampleCompact from './Motivation/Motivation';\nimport { ButtonGroup, Dropdown } from 'semantic-ui-react';\nimport DropdownMotivation from './Motivation/Motivation';\nexport default class MainForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      // --------- TESTING : UNCOMMENT WHEN SERVER DOWN ----------------\n      categories: [],\n      motivations: [],\n      regularity: [],\n      question: [],\n      questionId: [],\n      id: 2,\n      name: [],\n      incident: [],\n      // ----------------------------------------------------------------\n      answers: [],\n      value: [],\n      selectedCat: 1,\n      selectedMode: 0\n    };\n\n    this.handleSelection = idx => e => {\n      this.setState({\n        selectedMode: idx\n      });\n    };\n\n    this.next = () => {\n      this.setState(prevState => ({\n        selectedCat: prevState.selectedCat + 1\n      }));\n    };\n\n    this.prev = () => {\n      this.setState(prevState => ({\n        selectedCat: prevState.selectedCat - 1\n      }));\n    };\n\n    this.anyChange = id => e => {\n      const inputName = e.target.name;\n      const inputValue = e.target.value;\n      let entries = Object.assign({}, this.state);\n      const answers = entries.answers;\n      answers.map(answer => answer.questionID === id ? answer[inputName] = inputValue : undefined);\n      this.setState(entries);\n      localStorage.setItem(this.props.id, JSON.stringify(this.state.answers)); // ------------ SWITCH BOOLEAN TO COMPLETED FOR CURRENT MODE ---------------\n\n      if (this.state.answers.filter(answer => answer.frequency === null).length === 0) {\n        let completeMode = JSON.parse(localStorage.getItem(\"completedModes\"));\n        completeMode[this.props.index] = true;\n\n        if (this.props.group) {\n          var dummieArray = [];\n          completeMode.map(item => dummieArray.push(true));\n          localStorage.setItem(\"completedModes\", JSON.stringify(dummieArray));\n        } else {\n          localStorage.setItem(\"completedModes\", JSON.stringify(completeMode));\n        }\n      }\n    };\n\n    this.selectCat = e => {\n      this.setState({\n        selectedCat: e.target.value\n      });\n      localStorage.setItem(this.props.id, JSON.stringify(this.state.answers));\n    };\n  }\n\n  componentDidMount() {\n    const transportId = this.props.id;\n    this.setState({\n      modeID: transportId\n    }); // ------------ TESTING : UNCOMMENT WHEN SERVER DOWN -------\n    // const localanswers = localStorage.getItem(this.props.id);\n    // console.log(localanswers);\n    // this.setState({ answers: JSON.parse(localanswers)});\n    // console.log(\"localstorageanswers\", this.state.answers);\n    //-----------------------------------------------------------\n    // ------------ TESTING : COMMENT WHEN SERVER DOWN -------\n    // axios.get(`${URLStorage.API_URL}/getallresult`)\n    //     .then(res => {\n    //         if (res) {\n    //             const answers = res.data.map(function (item) {\n    //                 return {\n    //                     // question: item.question,\n    //                     // categoryId: item.id[0],\n    //                     // questionID: item.id[1],\n    //                     // motivationID: 6,\n    //                     // frequency: null,\n    //                     // modeID: transportId,\n    //                     idUser: item.idUser,\n    //                     frequency: item.idFrequency,\n    //                     motivation: item.idMotivation,\n    //                     question: item.idQuestion,\n    //                     comment: \"\",\n    //                     // periode: JSON.parse(localStorage.getItem(\"periods\")).currentPeriod,\n    //                     // previousPeriod: JSON.parse(localStorage.getItem(\"periods\")).previousPeriod,\n    //                 }\n    //             });\n    //             this.setState({ answers });\n    //             localStorage.setItem(this.props.id, JSON.stringify(answers));\n    //             if (!localStorage.getItem(this.props.id)) {\n    //                 this.setState({ answers });\n    //                 localStorage.setItem(this.props.id, JSON.stringify(this.state.answers));\n    //             } else {\n    //                 let ans1;\n    //                 ans1 = localStorage.getItem(this.props.id);\n    //                 this.setState({ answers: JSON.parse(ans1) });\n    //             }\n    //         }\n    //     })\n    //     .then(() => {\n    //         const localquestions = JSON.parse(localStorage.getItem(\"questions\"));\n    //         this.setState({ questions: localquestions });\n    //         let ans2;\n    //         ans2 = localStorage.getItem(this.props.id);\n    //         this.setState({ answers: JSON.parse(ans2) });\n    //     })\n    // axios.get(`${URLStorage.API_URL}/getallmotivations`)\n    //     .then(res => {\n    //         this.setState({ motivations: res.data });\n    //         localStorage.setItem(\"motivation\", JSON.stringify(res.data));\n    //     })\n    // ------------------ Retreiving PREVIOUS PERIOD RESULTS ----------------------\n\n    if (JSON.parse(localStorage.getItem(\"periods\"))) {\n      axios.post(\"\".concat(URLStorage.API_URL, \"/resultPeriode\"), {\n        ptoID: parseInt(localStorage.getItem(\"ptoid\")),\n        periodeID: JSON.parse(localStorage.getItem(\"periods\")).previousPeriod\n      }).then(res => {\n        const previousResult = res.data.filter(item => item.mode_id === transportId).sort((a, b) => a.questionID - b.questionID).map(item => {\n          return {\n            prevFreq: item.frequency\n          };\n        });\n        const newStateAnswers = this.state.answers.map((answer, idx) => {\n          return _objectSpread({}, answer, previousResult[idx]);\n        }); // // ------------------ ADDING PREVIOUS PERIOD RESULTS TO THE STATE.ANSWERS ----------------------\n\n        this.setState({\n          answers: newStateAnswers\n        });\n        localStorage.setItem(\"prevResult\", JSON.stringify(previousResult));\n      });\n    }\n\n    ; // // -----------------------------------------------------------------\n\n    axios.get(\"\".concat(URLStorage.API_URL, \"/getallincident\")).then(res => {\n      const data = res.data;\n      this.setState({\n        categories: data,\n        isLoaded: true\n      });\n    });\n    axios.get(\"\".concat(URLStorage.API_URL, \"/getallfrequency\")).then(res => {\n      const data = res.data;\n      this.setState({\n        regularity: data,\n        isLoaded: true\n      });\n    });\n    axios.get(\"\".concat(URLStorage.API_URL, \"/getAllQuestions/\").concat(this.state.id)).then(res => {\n      const data = res.data;\n      this.setState({\n        question: data,\n        isLoaded: true\n      });\n    });\n    axios.get(\"\".concat(URLStorage.API_URL, \"/getallmotivations\")).then(res => {\n      this.setState({\n        motivations: res.data\n      });\n      localStorage.setItem(\"motivation\", JSON.stringify(res.data));\n    }); // axios.get(`${URLStorage.API_URL}/getallquestions`)\n    // .then(res => {\n    //     const data = res.data\n    //     this.setState({\n    //         questions: data,\n    //         id:[],\n    //         isLoaded: true,\n    //     })\n    // })\n  }\n\n  render() {\n    // NEXT / SUBMIT BUTTON SWITCH\n    const nextSubmit = this.state.selectedCat === 5 ? // || (parseInt((localStorage.getItem(\"group\")) === 1)\n    JSON.parse(localStorage.getItem(\"completedModes\")).filter(item => item === false).length === 0 ? React.createElement(Link, {\n      to: {\n        pathname: \"/confirmation\",\n        state: {\n          answers: this.state.answers\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.submit,\n      className: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, \"Submit\")) : React.createElement(React.Fragment, null, React.createElement(Button, {\n      className: \"submit\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }, \"Submit\")) : React.createElement(Button, {\n      onClick: this.next,\n      className: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }, \"Next\"); // async function getAnswers(){\n    //     const { answers } = await this.state;\n    // }\n    // getAnswers();\n\n    const answers = this.state.answers; // console.log(this.state.categories);\n    // console.log(this.state.regularity);\n    //console.log(this.state.motivations);\n\n    console.log(this.state.question[1]); // console.log(this.state.answers);\n    // console.log(this.state);\n\n    const _this$props = this.props,\n          categories = _this$props.categories,\n          active = _this$props.active;\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    }, React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"flex-end\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271\n      },\n      __self: this\n    }, this.state.selectedCat !== 1 && React.createElement(Button, {\n      style: {\n        marginRight: \"10px\"\n      },\n      onClick: this.prev,\n      className: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    }, \"Previous\"), nextSubmit), this.state.categories.map((categorie, i) => {\n      return React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        key: i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287\n        },\n        __self: this\n      }, categorie.name));\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300\n      },\n      __self: this\n    }, this.state.question.map(item => React.createElement(\"li\", {\n      key: uniqueid(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301\n      },\n      __self: this\n    }, item.question[0]))), React.createElement(DropdownMotivation, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304\n      },\n      __self: this\n    }), this.state.regularity.map(frequency => {\n      return React.createElement(ButtonGroup, {\n        className: \"squareRadio\",\n        name: \"frequency\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 313\n        },\n        __self: this\n      }, React.createElement(Button, {\n        name: \"frequency\",\n        key: uniqueid(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 314\n        },\n        __self: this\n      }, frequency.regularity));\n    })));\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\aggad.samy\\Workspace\\uitp-service\\Front-end\\src\\components\\FormPage\\Mainform\\MainForm.js"],"names":["Frequency","Comments","Motivation","Categories","URLStorage","Link","uniqueid","axios","React","Container","Row","Col","Button","Form","FormGroup","DropdownExampleCompact","ButtonGroup","Dropdown","DropdownMotivation","MainForm","Component","state","categories","motivations","regularity","question","questionId","id","name","incident","answers","value","selectedCat","selectedMode","handleSelection","idx","e","setState","next","prevState","prev","anyChange","inputName","target","inputValue","entries","Object","assign","map","answer","questionID","undefined","localStorage","setItem","props","JSON","stringify","filter","frequency","length","completeMode","parse","getItem","index","group","dummieArray","item","push","selectCat","componentDidMount","transportId","modeID","post","API_URL","ptoID","parseInt","periodeID","previousPeriod","then","res","previousResult","data","mode_id","sort","a","b","prevFreq","newStateAnswers","get","isLoaded","render","nextSubmit","pathname","submit","console","log","active","display","justifyContent","marginRight","categorie","i"],"mappings":"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","sourcesContent":["import Frequency from './Frequency/Radio';\nimport Comments from './Comment/Comment';\n// import Legend from './Legend/Legend';\nimport Motivation from './Motivation/Motivation'\nimport Categories from './Categories/Categories'\nimport URLStorage from '../../../constants';\nimport { Link } from 'react-router-dom';\nimport uniqueid from 'uniqid';\n// import  ConfirmModal  from '../Modal';\n\nimport '../../../App.css';\n\nimport axios from 'axios';\nimport React from 'react';\nimport { Container, Row, Col, Button, Form, FormGroup } from 'reactstrap';\n\nimport './MainForm.css'\nimport DropdownExampleCompact from './Motivation/Motivation';\nimport { ButtonGroup, Dropdown } from 'semantic-ui-react';\nimport DropdownMotivation from './Motivation/Motivation';\n\nexport default class MainForm extends React.Component {\n\n    state = {\n\n        // --------- TESTING : UNCOMMENT WHEN SERVER DOWN ----------------\n        categories: [],\n        motivations: [],\n        regularity:[],\n        question: [],\n        questionId: [],\n        id: 2,\n        name: [],\n        incident: [],\n        // ----------------------------------------------------------------\n\n        answers: [],\n        value: [],\n        selectedCat: 1,\n        selectedMode: 0,\n\n    };\n\n    handleSelection = (idx) => (e) => {\n        this.setState({ selectedMode: idx });\n    };\n\n    next = () => {\n        this.setState(prevState => ({ selectedCat: prevState.selectedCat + 1 }));\n    }\n\n    prev = () => {\n        this.setState(prevState => ({ selectedCat: prevState.selectedCat - 1 }));\n    }\n\n    anyChange = (id) => (e) => {\n        const inputName = e.target.name;\n        const inputValue = e.target.value;\n        let entries = Object.assign({}, this.state);\n        const { answers } = entries;\n        answers.map(answer => answer.questionID === id ? answer[inputName] = inputValue : undefined);\n        this.setState(entries);\n        localStorage.setItem(this.props.id, JSON.stringify(this.state.answers));\n\n        // ------------ SWITCH BOOLEAN TO COMPLETED FOR CURRENT MODE ---------------\n      \n        if (this.state.answers.filter(answer => answer.frequency === null).length === 0) {\n            \n            let completeMode = JSON.parse(localStorage.getItem(\"completedModes\"));\n            completeMode[this.props.index] = true;\n            \n            if (this.props.group) {          \n                var dummieArray = [];          \n                    completeMode.map(item => dummieArray.push(true));  \n                    localStorage.setItem(\"completedModes\", JSON.stringify(dummieArray));                      \n                                \n            } else {\n                localStorage.setItem(\"completedModes\", JSON.stringify(completeMode));\n            }            \n        } \n    }\n\n    selectCat = (e) => {\n        this.setState({ selectedCat: e.target.value })\n        localStorage.setItem(this.props.id, JSON.stringify(this.state.answers));\n    }\n\n    componentDidMount() {\n\n        const transportId = this.props.id;\n        this.setState({ modeID: transportId })\n\n\n        // ------------ TESTING : UNCOMMENT WHEN SERVER DOWN -------\n        // const localanswers = localStorage.getItem(this.props.id);\n        // console.log(localanswers);\n        // this.setState({ answers: JSON.parse(localanswers)});\n        // console.log(\"localstorageanswers\", this.state.answers);\n        //-----------------------------------------------------------\n\n\n        // ------------ TESTING : COMMENT WHEN SERVER DOWN -------\n        \n\n        // axios.get(`${URLStorage.API_URL}/getallresult`)\n        //     .then(res => {\n        //         if (res) {\n\n        //             const answers = res.data.map(function (item) {\n        //                 return {\n        //                     // question: item.question,\n        //                     // categoryId: item.id[0],\n        //                     // questionID: item.id[1],\n        //                     // motivationID: 6,\n        //                     // frequency: null,\n        //                     // modeID: transportId,\n        //                     idUser: item.idUser,\n        //                     frequency: item.idFrequency,\n        //                     motivation: item.idMotivation,\n        //                     question: item.idQuestion,\n        //                     comment: \"\",\n        //                     // periode: JSON.parse(localStorage.getItem(\"periods\")).currentPeriod,\n        //                     // previousPeriod: JSON.parse(localStorage.getItem(\"periods\")).previousPeriod,\n        //                 }\n        //             });\n        //             this.setState({ answers });\n        //             localStorage.setItem(this.props.id, JSON.stringify(answers));\n\n        //             if (!localStorage.getItem(this.props.id)) {\n        //                 this.setState({ answers });\n        //                 localStorage.setItem(this.props.id, JSON.stringify(this.state.answers));\n\n        //             } else {\n        //                 let ans1;\n        //                 ans1 = localStorage.getItem(this.props.id);\n        //                 this.setState({ answers: JSON.parse(ans1) });\n        //             }\n        //         }\n        //     })\n        //     .then(() => {\n        //         const localquestions = JSON.parse(localStorage.getItem(\"questions\"));\n        //         this.setState({ questions: localquestions });\n        //         let ans2;\n\n        //         ans2 = localStorage.getItem(this.props.id);\n        //         this.setState({ answers: JSON.parse(ans2) });\n        //     })\n\n        // axios.get(`${URLStorage.API_URL}/getallmotivations`)\n        //     .then(res => {\n        //         this.setState({ motivations: res.data });\n        //         localStorage.setItem(\"motivation\", JSON.stringify(res.data));\n        //     })\n\n        \n\n        \n\n\n        // ------------------ Retreiving PREVIOUS PERIOD RESULTS ----------------------\n\n        if (JSON.parse(localStorage.getItem(\"periods\"))) {\n\n            axios.post(`${URLStorage.API_URL}/resultPeriode`, {\n                ptoID: parseInt(localStorage.getItem(\"ptoid\")),\n                periodeID: JSON.parse(localStorage.getItem(\"periods\")).previousPeriod,\n            })          \n            .then(res => {\n                const previousResult = res.data.filter(item => item.mode_id === transportId).sort((a, b) => a.questionID - b.questionID).map(item => {\n                    \n                    return { prevFreq: item.frequency, };\n                })\n                const newStateAnswers = this.state.answers.map((answer, idx) => {\n                    return { ...answer, ...previousResult[idx] }\n                })\n        // // ------------------ ADDING PREVIOUS PERIOD RESULTS TO THE STATE.ANSWERS ----------------------\n                this.setState({ answers: newStateAnswers });\n                localStorage.setItem(\"prevResult\", JSON.stringify(previousResult))\n            })\n        };\n        // // -----------------------------------------------------------------\n\n\n        axios.get(`${URLStorage.API_URL}/getallincident`)\n            .then(res => {\n                const data = res.data\n                this.setState({\n                    categories: data,\n                    isLoaded: true,\n                })\n            })\n\n        axios.get(`${URLStorage.API_URL}/getallfrequency`)\n            .then(res => {\n                const data = res.data\n                this.setState({\n                    regularity: data,\n                    isLoaded: true,\n                })\n            })\n\n        \n        axios.get(`${URLStorage.API_URL}/getAllQuestions/${this.state.id}`)\n        .then(res => {\n            const data = res.data\n            this.setState({\n                question: data,\n                isLoaded: true,\n            })\n        })\n\n        axios.get(`${URLStorage.API_URL}/getallmotivations`)\n        .then(res => {\n            this.setState({ motivations: res.data });\n            localStorage.setItem(\"motivation\", JSON.stringify(res.data));\n        })\n\n       \n        // axios.get(`${URLStorage.API_URL}/getallquestions`)\n        // .then(res => {\n        //     const data = res.data\n        //     this.setState({\n        //         questions: data,\n        //         id:[],\n        //         isLoaded: true,\n        //     })\n        // })\n\n        \n\n    };\n\n\n    render() {\n        // NEXT / SUBMIT BUTTON SWITCH\n        const nextSubmit = this.state.selectedCat === 5 ?\n            // || (parseInt((localStorage.getItem(\"group\")) === 1)\n            (JSON.parse(localStorage.getItem(\"completedModes\")).filter(item => item === false).length === 0)  ?\n                <Link to={{ pathname: \"/confirmation\", state: { answers: this.state.answers } }}>\n                    <Button onClick={this.submit} className=\"submit\">Submit</Button>\n                </Link>\n                : <>\n                    <Button className=\"submit\" disabled>Submit</Button>\n                </>\n            :\n            <Button onClick={this.next} className=\"submit\">Next</Button>;\n\n            \n        // async function getAnswers(){\n        //     const { answers } = await this.state;\n        // }\n\n        // getAnswers();\n        const { answers } = this.state;\n\n        \n\n        // console.log(this.state.categories);\n        // console.log(this.state.regularity);\n        //console.log(this.state.motivations);\n        console.log(this.state.question[1]);\n        // console.log(this.state.answers);\n        // console.log(this.state);\n\n        const { categories, active } = this.props;\n\n        return (\n            <React.Fragment>\n                <Container>\n\n                    <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n                        {this.state.selectedCat !== 1 && <Button style={{ marginRight: \"10px\" }} onClick={this.prev} className=\"submit\" >Previous</Button>}\n                        {nextSubmit}\n                    </div>\n                    \n\n                \n\n                    {/* <ul style={{display: \"flex\", justifyContent: \"space-around\"}}>\n                    { this.state.categories.map(categories => <li style={{fontSize: \"15px\", padding: \"5px\", textAlign:\"center\"}} key={uniqueid()} onClick={this.props.parentCallback}>{categories.name}</li>)}\n                    </ul> */}\n                   \n\n                    {this.state.categories.map((categorie, i) => {\n                        return (\n                                <ul>\n                                <li key={i} >\n                                {categorie.name}\n                                </li>\n                            </ul>\n                        );\n                        })}\n                    <br />\n                    {/* <ul>\n                    { this.state.motivations.map(item => <li key={uniqueid()}>{item.motivation}</li>)}\n                    </ul>                     */}\n                     <br />\n                     \n\n                     <ul>\n                    { this.state.question.map(item => <li key={uniqueid()}>{item.question[0]}</li>)}\n                    </ul>  \n\n                     <DropdownMotivation />\n                    {/* <Motivation /> */}\n                    {/* < DropdownExampleCompact /> */}\n                    {/* <Frequency /> */}\n\n                   \n\n                    {this.state.regularity.map(frequency => {\n                        return (\n                                    <ButtonGroup className='squareRadio' name=\"frequency\">\n                                        <Button name=\"frequency\" key={uniqueid()} >{frequency.regularity}</Button>\n                                    </ButtonGroup>\n                        );\n                    })}\n                    \n                </Container>\n            </React.Fragment>\n        )\n    }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}