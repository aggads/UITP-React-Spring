{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aggad.samy\\\\Workspace\\\\UITP-React-Spring\\\\Front-end\\\\src\\\\components\\\\FormPage\\\\Mainform\\\\MainForm.js\";\nimport Frequency from './Frequency/Radio';\nimport Comments from './Comment/Comment'; // import Legend from './Legend/Legend';\n\nimport Motivation from './Motivation/Motivation';\nimport Categories from './Categories/Categories';\nimport URLStorage from '../../../constants';\nimport { Link } from 'react-router-dom';\nimport uniqueid from 'uniqid'; // import  ConfirmModal  from '../Modal';\n\nimport '../../../App.css';\nimport axios from 'axios';\nimport React from 'react';\nimport { Container, Row, Col, Button, Form, FormGroup } from 'reactstrap';\nimport './MainForm.css';\nimport DropdownExampleCompact from './Motivation/Motivation';\nimport { ButtonGroup, Dropdown } from 'semantic-ui-react';\nimport DropdownMotivation from './Motivation/Motivation';\nexport default class MainForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      // --------- TESTING : UNCOMMENT WHEN SERVER DOWN ----------------\n      categories: [],\n      motivations: [],\n      regularity: [],\n      question: [],\n      questions: [],\n      id: 1,\n      name: [],\n      incident: [],\n      test: null,\n      results: [],\n      regularityFromChild: 0,\n      // ----------------------------------------------------------------\n      allData: [],\n      answers: [],\n      value: [],\n      selectedCat: 1,\n      selectedMode: 0\n    };\n\n    this.handleSelection = idx => e => {\n      this.setState({\n        selectedMode: idx\n      });\n    };\n\n    this.next = () => {\n      let id = this.state.id + 1;\n      this.fetchQuestions(id);\n      this.setState(prevState => ({\n        selectedCat: prevState.selectedCat + 1,\n        id: prevState.id + 1\n      }));\n    };\n\n    this.prev = () => {\n      let id = this.state.id - 1;\n      this.fetchQuestions(id);\n      this.setState(prevState => ({\n        selectedCat: prevState.selectedCat - 1,\n        id: prevState.id - 1\n      }));\n    };\n\n    this.fetchQuestions = id => {\n      axios.get(\"\".concat(URLStorage.API_URL, \"/getAllQuestions/\").concat(id)).then(res => {\n        const data = res.data;\n        this.setState({\n          question: data,\n          isLoaded: true\n        });\n      });\n    };\n\n    this.test = question => {\n      var test = this.state.allData; //console.log(\"test value \", test)\n\n      if (test === null) {\n        return this.setState({\n          allData: [\"Hello\"]\n        });\n      } else {\n        for (let i = 0; i < test.length; i++) {\n          //console.log(\"RUN SECONDE TIME BABY\", test[i].motivation)\n          //, test[i].motivation, test[i].comment, test[i].frequency\n          if (test[i].question === question) {\n            //console.log(\"HELLLOOO \", test[i].frequency)\n            //return test[i].frequency \n            if (test[i].frequency) {\n              console.log(\"frequency\", test[i].frequency);\n              return test[i].frequency;\n            } else if (test[i].motivation) {\n              console.log(\"motivation\", test[i].motivation);\n              return test[i].motivation;\n            } else if (test[i].comment) {\n              console.log(\"comment\", test[i].comment);\n              return test[i].comment;\n            } else {\n              console.log(\"Nothing\");\n            }\n          }\n        }\n      }\n    };\n\n    this.selectCat = e => {\n      this.setState({\n        selectedCat: e.target.value\n      });\n      localStorage.setItem(this.props.id, JSON.stringify(this.state.answers));\n    };\n\n    this.frequencyCallback = regularityCall => {\n      this.setState({\n        regularityFromChild: regularityCall\n      });\n    };\n  }\n\n  componentDidMount() {\n    localStorage.getItem(\"frequency\", \"motivations\", \"comments\", \"questions\", \"question\");\n    this.fetchQuestions(1);\n    const transportId = this.props.id;\n    var bigItem = JSON.parse(localStorage.getItem(\"bigItem\"));\n    this.setState({\n      modeID: transportId,\n      allData: bigItem\n    });\n\n    if (this.state.allData.filter(answer => answer.frequency === null).length === 0) {\n      let completeMode = JSON.parse(localStorage.getItem(\"completedModes\"));\n      completeMode[this.props.index] = true;\n\n      if (this.props.group) {\n        var dummieArray = [];\n        completeMode.map(item => dummieArray.push(true));\n        localStorage.setItem(\"completedModes\", JSON.stringify(dummieArray));\n      } else {\n        localStorage.setItem(\"completedModes\", JSON.stringify(completeMode));\n      }\n    }\n  }\n\n  render() {\n    // NEXT / SUBMIT BUTTON SWITCH\n    console.log(this.state.allData);\n    const nextSubmit = this.state.selectedCat === 5 ? // || (parseInt((localStorage.getItem(\"group\")) === 1)\n    JSON.parse(localStorage.getItem(\"completedModes\")).filter(item => item === false).length === 0 ? React.createElement(Link, {\n      to: {\n        pathname: \"/confirmation\",\n        state: {\n          answers: this.state.answers\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.submit,\n      className: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, \"Submit\")) : React.createElement(React.Fragment, null, React.createElement(Button, {\n      className: \"submit\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, \"Submit\")) : React.createElement(Button, {\n      onClick: this.next,\n      className: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, \"Next\");\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"flex-end\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, this.state.selectedCat !== 1 && React.createElement(Button, {\n      style: {\n        marginRight: \"10px\"\n      },\n      onClick: this.prev,\n      className: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, \"Previous\"), nextSubmit), React.createElement(Categories, {\n      idPage: this.state.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }), this.state.question.map((question, index) => {\n      let questionParent = question;\n      let incidentName = questionParent.incident.name;\n      questionParent.incident = incidentName;\n      return React.createElement(\"ul\", {\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        value: question.question,\n        key: index,\n        style: {\n          fontSize: \"20px\"\n        },\n        onClick: a => {\n          localStorage.setItem(\"question\", question.question);\n          var questionStorage = localStorage.getItem(\"question\");\n          localStorage.setItem(\"\".concat(questionStorage), JSON.stringify(questionParent)); //let answer = this.state.allData;\n\n          var getData = JSON.parse(localStorage.getItem(\"\".concat(questionStorage)));\n          var bigItem = JSON.parse(localStorage.getItem(\"bigItem\"));\n\n          if (!bigItem) {\n            bigItem = [];\n          }\n\n          var selectedMode = JSON.parse(localStorage.getItem(\"selectedModes\")); // console.log(\"Before ===>\", selectedMode)\n\n          var selectedModeName = [];\n\n          for (var i in selectedMode) {\n            selectedModeName.push(selectedMode[i].name); //selectedModeName =  selectedMode[i].name\n            // console.log(\"in loop ===>\", selectedModeName) //key's value\n          }\n\n          bigItem.selectedMode = selectedModeName; // console.log(\"big item \", getData)\n          // this.setState({\n          //     allData: []\n          // })\n\n          var allData = this.state.allData;\n          var copiedState = this.state; // allData = []\n          // copiedState = []\n          //var allData = [...this.state.allData]\n          //copiedState = Object.values(copiedState)\n\n          copiedState = Object.values(allData);\n          console.log(\"iterable\", copiedState);\n          var modified = false; //console.log(\"state data \", this.state.allData)\n\n          var verif = copiedState.find(function (data, id) {\n            if (data.id === getData.id) {\n              for (var key in data) {\n                if (data[key] === getData[key]) {\n                  if (data[key] === undefined) {\n                    continue;\n                  } else {\n                    data[key] = getData[key];\n                    modified = true; // for (var i = 0; allData.length; i++){\n                    //     console.log(\"in loop\", allData[i].question)\n                    // }\n                    // allData.forEach(function(item){\n                    //     //console.log(\"this ...\", item.motivation)\n                    //     var allDataId = allData[id]\n                    //     //console.log(\"all data in for each \", allDataId)\n                    //     allData.splice(id, 1)\n                    //     //console.log(\"item \", item)\n                    // })\n\n                    var allSplicedData = copiedState.splice(id, 1); // var allSplicedData\n                    // var newData = copiedState.splice(id, 1)\n                    // allSplicedData.push(newData)\n                    // var newData = []\n                    // newData.push(Object.values(allSplicedData))\n                    //allSplicedData.push(copiedState)\n\n                    console.log(\"all spliced data\", allSplicedData);\n                    console.log(\"copied state \", copiedState); // console.log(\"New data \", newData)\n                    // allData = allSplicedData\n                    // console.log(\"this state all data \", allData)\n                    //console.log(\"get data \", getData)\n                  }\n                }\n              }\n\n              return true;\n            } else {\n              return false;\n            }\n          });\n          console.log(\"all data \", allData); // console.log(\"second copied state \", copiedState)\n\n          console.log(\"get data \", getData);\n\n          if (!verif || modified) {\n            copiedState.push(getData);\n            localStorage.setItem(\"bigItem\", JSON.stringify(copiedState)); // this.setState({\n            //     copiedState : allData\n            // })\n\n            console.log(\"second copied state \", copiedState);\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }, question.question, React.createElement(DropdownMotivation, {\n        key: index,\n        listNameFromParent: questionParent,\n        value: this.test(question.question),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 333\n        },\n        __self: this\n      }), React.createElement(Frequency, {\n        callBackFromParent: this.frequencyCallback,\n        listNameFromParent: questionParent,\n        value: this.test(question.question),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 338\n        },\n        __self: this\n      }), React.createElement(Comments, {\n        listNameFromParent: questionParent,\n        getComment: this.getBackComment,\n        value: this.test(question.question),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 343\n        },\n        __self: this\n      })));\n    })));\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\aggad.samy\\Workspace\\UITP-React-Spring\\Front-end\\src\\components\\FormPage\\Mainform\\MainForm.js"],"names":["Frequency","Comments","Motivation","Categories","URLStorage","Link","uniqueid","axios","React","Container","Row","Col","Button","Form","FormGroup","DropdownExampleCompact","ButtonGroup","Dropdown","DropdownMotivation","MainForm","Component","state","categories","motivations","regularity","question","questions","id","name","incident","test","results","regularityFromChild","allData","answers","value","selectedCat","selectedMode","handleSelection","idx","e","setState","next","fetchQuestions","prevState","prev","get","API_URL","then","res","data","isLoaded","i","length","frequency","console","log","motivation","comment","selectCat","target","localStorage","setItem","props","JSON","stringify","frequencyCallback","regularityCall","componentDidMount","getItem","transportId","bigItem","parse","modeID","filter","answer","completeMode","index","group","dummieArray","map","item","push","render","nextSubmit","pathname","submit","display","justifyContent","marginRight","questionParent","incidentName","fontSize","a","questionStorage","getData","selectedModeName","copiedState","Object","values","modified","verif","find","key","undefined","allSplicedData","splice","getBackComment"],"mappings":"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","sourcesContent":["import Frequency from './Frequency/Radio';\nimport Comments from './Comment/Comment';\n// import Legend from './Legend/Legend';\nimport Motivation from './Motivation/Motivation'\nimport Categories from './Categories/Categories'\nimport URLStorage from '../../../constants';\nimport { Link } from 'react-router-dom';\nimport uniqueid from 'uniqid';\n// import  ConfirmModal  from '../Modal';\n\nimport '../../../App.css';\n\nimport axios from 'axios';\nimport React from 'react';\nimport { Container, Row, Col, Button, Form, FormGroup } from 'reactstrap';\n\nimport './MainForm.css'\nimport DropdownExampleCompact from './Motivation/Motivation';\nimport { ButtonGroup, Dropdown } from 'semantic-ui-react';\nimport DropdownMotivation from './Motivation/Motivation';\n\nexport default class MainForm extends React.Component {\n\n    state = {\n\n        // --------- TESTING : UNCOMMENT WHEN SERVER DOWN ----------------\n        categories: [],\n        motivations: [],\n        regularity: [],\n        question: [],\n        questions: [],\n        id: 1,\n        name: [],\n        incident: [],\n        test: null,\n        results: [],\n        regularityFromChild: 0,\n        // ----------------------------------------------------------------\n\n        allData: [],\n        answers: [],\n        value: [],\n        selectedCat: 1,\n        selectedMode: 0,\n\n    };\n    handleSelection = (idx) => (e) => {\n        this.setState({ selectedMode: idx });\n    };\n\n    next = () => {\n        let id = this.state.id + 1;\n        this.fetchQuestions(id);\n        this.setState(prevState => ({\n            selectedCat: prevState.selectedCat + 1,\n            id: prevState.id + 1,\n\n        }));\n\n\n    }\n    prev = () => {\n        let id = this.state.id - 1;\n        this.fetchQuestions(id);\n        this.setState(prevState => ({\n            selectedCat: prevState.selectedCat - 1,\n            id: prevState.id - 1,\n        }));\n\n    }\n\n\n    fetchQuestions = (id) => {\n        axios.get(`${URLStorage.API_URL}/getAllQuestions/${id}`)\n            .then(res => {\n                const data = res.data\n                this.setState({\n                    question: data,\n                    isLoaded: true,\n                })\n            })\n    }\n\n    test = (question) => {\n        var test = this.state.allData\n        //console.log(\"test value \", test)\n        if (test === null){\n            return this.setState({\n                allData: [\"Hello\"]\n            })\n        }else{\n            \n            for (let i = 0; i < test.length; i++) {\n\n                //console.log(\"RUN SECONDE TIME BABY\", test[i].motivation)\n                //, test[i].motivation, test[i].comment, test[i].frequency\n                if (test[i].question === question) {\n                    //console.log(\"HELLLOOO \", test[i].frequency)\n                    //return test[i].frequency \n                    if (test[i].frequency) {\n                        console.log(\"frequency\", test[i].frequency)\n                        return test[i].frequency\n                    } else if (test[i].motivation) {\n                        console.log(\"motivation\", test[i].motivation)\n                        return test[i].motivation\n                    } else if (test[i].comment) {\n                        console.log(\"comment\", test[i].comment)\n                        return test[i].comment\n                    } else {\n                        console.log(\"Nothing\")\n                    }\n    \n    \n                }\n    \n            }\n        }\n        \n\n    }\n\n\n\n    // anyChange = (id) => (e) => {\n    //     const inputName = e.target.name;\n    //     const inputValue = e.target.value;\n    //     let entries = Object.assign({}, this.state);\n    //     const { answers } = entries;\n    //     answers.map(answer => answer.questionID === id ? answer[inputName] = inputValue : undefined);\n    //     this.setState(entries);\n    //     localStorage.setItem(this.props.id, JSON.stringify(this.state.answers));\n\n    //     // ------------ SWITCH BOOLEAN TO COMPLETED FOR CURRENT MODE ---------------\n\n    //     console.log(this.state.allData)\n\n    //     if (this.state.allData.filter(answer => answer.frequency === null).length === 0) {\n\n    //         let completeMode = JSON.parse(localStorage.getItem(\"completedModes\"));\n    //         completeMode[this.props.index] = true;\n\n    //         if (this.props.group) {\n    //             var dummieArray = [];\n    //             completeMode.map(item => dummieArray.push(true));\n    //             localStorage.setItem(\"completedModes\", JSON.stringify(dummieArray));\n\n    //         } else {\n    //             localStorage.setItem(\"completedModes\", JSON.stringify(completeMode));\n    //         }\n    //     }\n    // }\n\n    selectCat = (e) => {\n        this.setState({ selectedCat: e.target.value })\n        localStorage.setItem(this.props.id, JSON.stringify(this.state.answers));\n    }\n    frequencyCallback = (regularityCall) => {\n        this.setState({\n            regularityFromChild: regularityCall\n        })\n    }\n    componentDidMount() {\n        localStorage.getItem(\"frequency\", \"motivations\", \"comments\", \"questions\", \"question\")\n\n        this.fetchQuestions(1);\n\n        const transportId = this.props.id;\n\n\n        var bigItem = JSON.parse(localStorage.getItem(\"bigItem\"))\n        this.setState({ modeID: transportId, allData: bigItem })\n\n        if (this.state.allData.filter(answer => answer.frequency === null).length === 0) {\n\n            let completeMode = JSON.parse(localStorage.getItem(\"completedModes\"));\n            completeMode[this.props.index] = true;\n\n            if (this.props.group) {\n                var dummieArray = [];\n                completeMode.map(item => dummieArray.push(true));\n                localStorage.setItem(\"completedModes\", JSON.stringify(dummieArray));\n\n            } else {\n                localStorage.setItem(\"completedModes\", JSON.stringify(completeMode));\n            }\n        }\n    };\n\n\n    render() {\n        // NEXT / SUBMIT BUTTON SWITCH\n        console.log(this.state.allData)\n        const nextSubmit = this.state.selectedCat === 5 ?\n            // || (parseInt((localStorage.getItem(\"group\")) === 1)\n            (JSON.parse(localStorage.getItem(\"completedModes\")).filter(item => item === false).length === 0) ?\n                <Link to={{ pathname: \"/confirmation\", state: { answers: this.state.answers } }}>\n                    <Button onClick={this.submit} className=\"submit\" >Submit</Button>\n                </Link>\n                : <>\n                    <Button className=\"submit\" disabled>Submit</Button>\n                </>\n            :\n            <Button onClick={this.next} className=\"submit\">Next</Button>;\n        return (\n            <React.Fragment>\n                <Container>\n                    <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n                        {this.state.selectedCat !== 1 && <Button style={{ marginRight: \"10px\" }} onClick={this.prev} className=\"submit\" >Previous</Button>}\n                        {nextSubmit}\n                    </div>\n                    <Categories idPage={this.state.id} />\n                    <br />\n                    <br />\n                    {this.state.question.map((question, index) => {\n                        let questionParent = question\n                        let incidentName = questionParent.incident.name\n                        questionParent.incident = incidentName\n                        return (\n                            <ul\n                                key={index}\n                            >\n                                <li\n                                    value={question.question}\n                                    key={index}\n                                    style={{ fontSize: \"20px\" }}\n                                    onClick={(a) => {\n                                        localStorage.setItem(\"question\", question.question)\n                                        var questionStorage = localStorage.getItem(\"question\");\n                                        localStorage.setItem(`${questionStorage}`, JSON.stringify(questionParent))\n                                        //let answer = this.state.allData;\n\n                                        var getData = JSON.parse(localStorage.getItem(`${questionStorage}`))\n\n                                        var bigItem = JSON.parse(localStorage.getItem(\"bigItem\"))\n\n                                        if (!bigItem) {\n                                            bigItem = []\n                                        }\n                                        var selectedMode = JSON.parse(localStorage.getItem(\"selectedModes\"))\n                                        // console.log(\"Before ===>\", selectedMode)\n\n                                        var selectedModeName = [];\n                                        for (var i in selectedMode) {\n                                            selectedModeName.push(selectedMode[i].name)\n                                            //selectedModeName =  selectedMode[i].name\n                                            // console.log(\"in loop ===>\", selectedModeName) //key's value\n                                        }\n\n                                        bigItem.selectedMode = selectedModeName\n\n                                        // console.log(\"big item \", getData)\n                                        // this.setState({\n                                        //     allData: []\n                                        // })\n                                        var allData = this.state.allData\n                                        var copiedState = this.state\n                                        // allData = []\n                                        // copiedState = []\n                                        //var allData = [...this.state.allData]\n                                        //copiedState = Object.values(copiedState)\n                                        copiedState = Object.values(allData)\n                                        console.log(\"iterable\", copiedState)\n\n                                        \n                                        var modified = false\n                                        //console.log(\"state data \", this.state.allData)\n                                        \n                                        var verif = copiedState.find(function (data, id) {\n                                            if (data.id === getData.id) {\n                                                for (var key in data) {\n                                                    if (data[key] === getData[key]) {\n                                                        if (data[key] === undefined) {\n                                                            continue\n                                                        }\n                                                        else {\n                                                            data[key] = getData[key]\n                                                            modified = true\n                                                            \n                                                            // for (var i = 0; allData.length; i++){\n                                                            //     console.log(\"in loop\", allData[i].question)\n                                                            // }\n                                                            // allData.forEach(function(item){\n                                                            //     //console.log(\"this ...\", item.motivation)\n                                                            //     var allDataId = allData[id]\n                                                            //     //console.log(\"all data in for each \", allDataId)\n                                                            //     allData.splice(id, 1)\n                                                            //     //console.log(\"item \", item)\n                                                                \n                                                            // })\n                                                            \n                                                            var allSplicedData = copiedState.splice(id, 1)\n                                                            // var allSplicedData\n                                                            // var newData = copiedState.splice(id, 1)\n                                                            // allSplicedData.push(newData)\n                                                            // var newData = []\n                                                            // newData.push(Object.values(allSplicedData))\n                                                            //allSplicedData.push(copiedState)\n                                                            console.log(\"all spliced data\", allSplicedData)\n                                                            console.log(\"copied state \", copiedState)\n                                                            // console.log(\"New data \", newData)\n\n                                                            // allData = allSplicedData\n                                                            // console.log(\"this state all data \", allData)\n                                                            //console.log(\"get data \", getData)\n                                                        }\n                                                    }\n\n                                                }\n                                                return true\n                                            } else {\n                                                return false\n                                            }\n                                        })\n                                        console.log(\"all data \", allData)\n                                        // console.log(\"second copied state \", copiedState)\n                                        console.log(\"get data \", getData)\n                                        if (!verif || modified) {\n                                            copiedState.push(getData)\n                                            localStorage.setItem(\"bigItem\", JSON.stringify(copiedState))\n                                            // this.setState({\n                                            //     copiedState : allData\n                                            // })\n\n                                            console.log(\"second copied state \", copiedState)\n                                        }\n                                    }\n                                    }\n\n                                >\n                                    {\n                                        question.question\n                                    }\n                                    <DropdownMotivation\n                                        key={index}\n                                        listNameFromParent={questionParent}\n                                        value={this.test(question.question)}\n                                    />\n                                    <Frequency\n                                        callBackFromParent={this.frequencyCallback}\n                                        listNameFromParent={questionParent}\n                                        value={this.test(question.question)}\n                                    />\n                                    <Comments\n                                        listNameFromParent={questionParent}\n                                        getComment={this.getBackComment}\n                                        value={this.test(question.question)}\n                                    />\n                                </li>\n                            </ul>\n                        );\n                    })}\n                </Container>\n            </React.Fragment>\n        )\n    }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}