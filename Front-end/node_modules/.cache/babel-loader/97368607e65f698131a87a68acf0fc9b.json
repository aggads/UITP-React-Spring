{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aggad.samy\\\\Workspace\\\\UITP-React-Spring\\\\Front-end\\\\src\\\\components\\\\FormPage\\\\Mainform\\\\MainForm.js\";\nimport Frequency from './Frequency/Radio';\nimport Comments from './Comment/Comment'; // import Legend from './Legend/Legend';\n\nimport Motivation from './Motivation/Motivation';\nimport Categories from './Categories/Categories';\nimport URLStorage from '../../../constants';\nimport { Link } from 'react-router-dom';\nimport uniqueid from 'uniqid'; // import  ConfirmModal  from '../Modal';\n\nimport '../../../App.css';\nimport axios from 'axios';\nimport React from 'react';\nimport { Container, Row, Col, Button, Form, FormGroup } from 'reactstrap';\nimport './MainForm.css';\nimport DropdownExampleCompact from './Motivation/Motivation';\nimport { ButtonGroup, Dropdown } from 'semantic-ui-react';\nimport DropdownMotivation from './Motivation/Motivation';\nexport default class MainForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSelection = idx => e => {\n      this.setState({\n        selectedMode: idx\n      });\n    };\n\n    this.next = () => {\n      let id = this.state.id + 1;\n      this.fetchQuestions(id);\n      this.setState(prevState => ({\n        selectedCat: prevState.selectedCat + 1,\n        id: prevState.id + 1\n      }));\n    };\n\n    this.prev = () => {\n      let id = this.state.id - 1;\n      this.fetchQuestions(id);\n      this.setState(prevState => ({\n        selectedCat: prevState.selectedCat - 1,\n        id: prevState.id - 1\n      }));\n    };\n\n    this.fetchQuestions = id => {\n      axios.get(\"\".concat(URLStorage.API_URL, \"/getAllQuestions/\").concat(id)).then(res => {\n        const data = res.data;\n        this.setState({\n          question: data,\n          isLoaded: true\n        });\n      });\n    };\n\n    this.test = question => {\n      var test = this.state.allData; //console.log(\"test value \", test)\n\n      if (test === null) {\n        return this.setState({\n          allData: []\n        });\n      } else {\n        for (let i = 0; i < test.length; i++) {\n          //console.log(\"RUN SECONDE TIME BABY\", test[i].motivation)\n          //, test[i].motivation, test[i].comment, test[i].frequency\n          if (test[i].question === question) {//console.log(\"HELLLOOO \", test[i].frequency)\n            //return test[i].frequency \n            // if (test[i].frequency) {\n            //     console.log(\"frequency\", test[i].frequency)\n            //     return test[i].frequency\n            // } else if (test[i].motivation) {\n            //     console.log(\"motivation\", test[i].motivation)\n            //     return test[i].motivation\n            // } else if (test[i].comment) {\n            //     console.log(\"comment\", test[i].comment)\n            //     return test[i].comment\n            // } else {\n            //     console.log(\"Nothing\")\n            // }\n          }\n        }\n      }\n    };\n\n    this.selectCat = e => {\n      this.setState({\n        selectedCat: e.target.value\n      });\n      localStorage.setItem(this.props.id, JSON.stringify(this.state.answers));\n    };\n\n    this.frequencyCallback = regularityCall => {\n      this.setState({\n        regularityFromChild: regularityCall\n      });\n    };\n\n    this.state = {\n      // --------- TESTING : UNCOMMENT WHEN SERVER DOWN ----------------\n      categories: [],\n      motivations: [],\n      question: [],\n      id: 1,\n      test: null,\n      results: [],\n      regularityFromChild: 0,\n      // ----------------------------------------------------------------\n      allData: [],\n      answers: [],\n      value: [],\n      selectedCat: 1,\n      selectedMode: 0,\n      dataGet: [],\n      incidentName: \"\" // this.handleClick = this.handleClick.bind(this)\n\n    };\n  }\n\n  handleClick(question) {\n    // IF => deux possibilités:\n    // 1. Dans le state, l'élément choisi par le User n'existe pas\n    // 2. Dans le state, l'élément choisi par le User existe\n    // Si (1): 1.1 update le state en ajouter l'élément dans l'array du state et 1.2 update le local storage de la même manière\n    // Si (2): 2.1 update le state avec splice (chercher, séléctionner, supprimer, insérer) et le local storage de la même manière\n    // console.log(allData)\n    // console.log(getData)\n    if (this.state.allData.length) {\n      console.log('allData is not null');\n      this.state.allData.find(function (data, id) {\n        console.log('exist has been called');\n\n        if (data.id === question.id) {\n          console.log('has found matching IDs'); // var indexOf = allData.indexOf(data);\n          // for (var key in data) {\n          //     if (data[key] === getData[key] || data[key] === undefined) {\n          //         data[key] = getData[key]\n          //         modified = true\n          //         copiedState.splice(indexOf, 1)\n          //         console.log(\"copied state after existing question  \", copiedState)\n          //     }\n          // }\n\n          return true;\n        } else {\n          console.log(\"has not found matching IDs\");\n          return false;\n        }\n      });\n    } else {\n      console.log('allData is null');\n      this.setState({\n        allData: [question]\n      });\n      console.log('Updating state... :');\n      console.log(this.state.allData);\n    } //e.preventDefault();\n    // console.log(\"HandleClick is running\")\n    // var bigItem = this.state.allData\n    // var getData = this.state.dataGet\n    // var allData = this.state.allData\n    // var copiedState = this.state\n    // copiedState = Array.from(Object.create(allData))\n    // //console.log(\"COPIED STATE\", copiedState)\n    // var modified = false\n    // var id = 0\n    // if (!this.state.allData){\n    //     this.state.allData = []\n    // }else{\n    //     var verif = allData.find(function (data, id) {\n    //         if (data.id === getData.id) {\n    //             var indexOf = allData.indexOf(data);\n    //             console.log(\"get data in verif \", getData)\n    //             console.log(\"INDEX OF \", indexOf)\n    //             console.log(\"get data id \", getData.id)\n    //             for (var key in data) {\n    //                 if (data[key] === getData[key] || data[key] === undefined) {\n    //                     data[key] = getData[key]\n    //                     modified = true\n    //                     copiedState.splice(indexOf, 1)\n    //                     console.log(\"copied state after existing question  \", copiedState)\n    //                 }\n    //             }\n    //             return true\n    //         } else {\n    //             // console.log(\"HELLO\")\n    //             return false\n    //         }\n    //     })\n    //     if (!verif || modified) {\n    //         copiedState.push(getData)\n    //         this.setState({ allData : copiedState})\n    //         localStorage.setItem(\"bigItem\", JSON.stringify(copiedState))\n    //         console.log(\"Console log state after modifs\", this.state.allData)\n    //     }\n    // }\n\n  }\n\n  componentDidMount() {\n    this.fetchQuestions(1);\n    const transportId = this.props.id; // var questionStorage = localStorage.getItem(\"question\");\n    // var getData = JSON.parse(localStorage.getItem(`${questionStorage}`))\n    // this.state.dataGet = getData\n    // this.setState({\n    //     dataGet : getData\n    // })\n    //console.log(\"Inside get data\", getData)\n    //console.log(\"Inside data get\", this.state.dataGet)\n\n    this.setState({\n      modeID: transportId\n    });\n\n    if (this.state.allData.filter(answer => answer.frequency === null).length === 0) {\n      let completeMode = JSON.parse(localStorage.getItem(\"completedModes\"));\n      completeMode[this.props.index] = true;\n\n      if (this.props.group) {\n        var dummieArray = [];\n        completeMode.map(item => dummieArray.push(true));\n        localStorage.setItem(\"completedModes\", JSON.stringify(dummieArray));\n      } else {\n        localStorage.setItem(\"completedModes\", JSON.stringify(completeMode));\n      }\n    }\n  }\n\n  componentWillMount() {\n    var bigItem = JSON.parse(localStorage.getItem(\"bigItem\"));\n    var questionStorage = localStorage.getItem(\"question\");\n    var getData = JSON.parse(localStorage.getItem(\"\".concat(questionStorage)));\n    var selectedMode = JSON.parse(localStorage.getItem(\"selectedModes\"));\n    var selectedModeName = [];\n\n    for (var i in selectedMode) {\n      selectedModeName.push(selectedMode[i].name);\n    }\n\n    if (bigItem) {\n      bigItem.selectedMode = selectedModeName;\n    } else {\n      bigItem = [];\n    }\n\n    this.setState({\n      allData: bigItem,\n      dataGet: getData\n    }); //console.log(\"Inside get data in will mount\", getData)\n  }\n\n  render() {\n    // NEXT / SUBMIT BUTTON SWITCH\n    console.log(\"THE STATE \", this.state.allData); //console.log(\"Copied after render \", copiedState)\n\n    const nextSubmit = this.state.selectedCat === 5 ? // || (parseInt((localStorage.getItem(\"group\")) === 1)\n    JSON.parse(localStorage.getItem(\"completedModes\")).filter(item => item === false).length === 0 ? React.createElement(Link, {\n      to: {\n        pathname: \"/confirmation\",\n        state: {\n          answers: this.state.answers\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.submit,\n      className: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    }, \"Submit\")) : React.createElement(React.Fragment, null, React.createElement(Button, {\n      className: \"submit\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319\n      },\n      __self: this\n    }, \"Submit\")) : React.createElement(Button, {\n      onClick: this.next,\n      className: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322\n      },\n      __self: this\n    }, \"Next\");\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324\n      },\n      __self: this\n    }, React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"flex-end\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }, this.state.selectedCat !== 1 && React.createElement(Button, {\n      style: {\n        marginRight: \"10px\"\n      },\n      onClick: this.prev,\n      className: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327\n      },\n      __self: this\n    }, \"Previous\"), nextSubmit), React.createElement(Categories, {\n      idPage: this.state.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332\n      },\n      __self: this\n    }), this.state.question.map((question, index) => {\n      var questionParent = question;\n      this.state.incidentName = questionParent.incident.name;\n      localStorage.setItem(\"question\", question.question);\n      var questionStorage = localStorage.getItem(\"question\");\n      localStorage.setItem(\"\".concat(questionStorage), JSON.stringify(questionParent));\n      console.log(\"Question parent \", questionParent); //console.log(\"this state in map \", this.state.allData)\n\n      return React.createElement(\"ul\", {\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 342\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        value: question.question,\n        key: index,\n        style: {\n          fontSize: \"20px\"\n        } //onClick={ this.handleClick(getData).bind(this)}\n        //onClick={ this.props.handleClic}\n        ,\n        onClick: this.handleClick.bind(this, question),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 345\n        },\n        __self: this\n      }, question.question, React.createElement(DropdownMotivation, {\n        key: index,\n        listNameFromParent: questionParent,\n        value: this.test(question.question),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 356\n        },\n        __self: this\n      }), React.createElement(Frequency, {\n        callBackFromParent: this.frequencyCallback,\n        listNameFromParent: questionParent,\n        value: this.test(question.question),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 361\n        },\n        __self: this\n      }), React.createElement(Comments, {\n        listNameFromParent: questionParent,\n        getComment: this.getBackComment,\n        value: this.test(question.question),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 366\n        },\n        __self: this\n      })));\n    })));\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\aggad.samy\\Workspace\\UITP-React-Spring\\Front-end\\src\\components\\FormPage\\Mainform\\MainForm.js"],"names":["Frequency","Comments","Motivation","Categories","URLStorage","Link","uniqueid","axios","React","Container","Row","Col","Button","Form","FormGroup","DropdownExampleCompact","ButtonGroup","Dropdown","DropdownMotivation","MainForm","Component","constructor","props","handleSelection","idx","e","setState","selectedMode","next","id","state","fetchQuestions","prevState","selectedCat","prev","get","API_URL","then","res","data","question","isLoaded","test","allData","i","length","selectCat","target","value","localStorage","setItem","JSON","stringify","answers","frequencyCallback","regularityCall","regularityFromChild","categories","motivations","results","dataGet","incidentName","handleClick","console","log","find","componentDidMount","transportId","modeID","filter","answer","frequency","completeMode","parse","getItem","index","group","dummieArray","map","item","push","componentWillMount","bigItem","questionStorage","getData","selectedModeName","name","render","nextSubmit","pathname","submit","display","justifyContent","marginRight","questionParent","incident","fontSize","bind","getBackComment"],"mappings":";AAAA,OAAOA,SAAP,MAAsB,mBAAtB;AACA,OAAOC,QAAP,MAAqB,mBAArB,C,CACA;;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,UAAP,MAAuB,oBAAvB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,QAAP,MAAqB,QAArB,C,CACA;;AAEA,OAAO,kBAAP;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,GAApB,EAAyBC,GAAzB,EAA8BC,MAA9B,EAAsCC,IAAtC,EAA4CC,SAA5C,QAA6D,YAA7D;AAEA,OAAO,gBAAP;AACA,OAAOC,sBAAP,MAAmC,yBAAnC;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,mBAAtC;AACA,OAAOC,kBAAP,MAA+B,yBAA/B;AAEA,eAAe,MAAMC,QAAN,SAAuBX,KAAK,CAACY,SAA7B,CAAuC;AACtDC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAOA,KAAP;;AADc,SAkHdC,eAlHc,GAkHKC,GAAD,IAAUC,CAAD,IAAO;AAC9B,WAAKC,QAAL,CAAc;AAAEC,QAAAA,YAAY,EAAEH;AAAhB,OAAd;AACH,KApHa;;AAAA,SAsHdI,IAtHc,GAsHP,MAAM;AACT,UAAIC,EAAE,GAAG,KAAKC,KAAL,CAAWD,EAAX,GAAgB,CAAzB;AACA,WAAKE,cAAL,CAAoBF,EAApB;AACA,WAAKH,QAAL,CAAcM,SAAS,KAAK;AACxBC,QAAAA,WAAW,EAAED,SAAS,CAACC,WAAV,GAAwB,CADb;AAExBJ,QAAAA,EAAE,EAAEG,SAAS,CAACH,EAAV,GAAe;AAFK,OAAL,CAAvB;AAOH,KAhIa;;AAAA,SAiIdK,IAjIc,GAiIP,MAAM;AACT,UAAIL,EAAE,GAAG,KAAKC,KAAL,CAAWD,EAAX,GAAgB,CAAzB;AACA,WAAKE,cAAL,CAAoBF,EAApB;AACA,WAAKH,QAAL,CAAcM,SAAS,KAAK;AACxBC,QAAAA,WAAW,EAAED,SAAS,CAACC,WAAV,GAAwB,CADb;AAExBJ,QAAAA,EAAE,EAAEG,SAAS,CAACH,EAAV,GAAe;AAFK,OAAL,CAAvB;AAKH,KAzIa;;AAAA,SA4IdE,cA5Ic,GA4IIF,EAAD,IAAQ;AACrBtB,MAAAA,KAAK,CAAC4B,GAAN,WAAa/B,UAAU,CAACgC,OAAxB,8BAAmDP,EAAnD,GACKQ,IADL,CACUC,GAAG,IAAI;AACT,cAAMC,IAAI,GAAGD,GAAG,CAACC,IAAjB;AACA,aAAKb,QAAL,CAAc;AACVc,UAAAA,QAAQ,EAAED,IADA;AAEVE,UAAAA,QAAQ,EAAE;AAFA,SAAd;AAIH,OAPL;AAQH,KArJa;;AAAA,SAuJdC,IAvJc,GAuJNF,QAAD,IAAc;AACjB,UAAIE,IAAI,GAAG,KAAKZ,KAAL,CAAWa,OAAtB,CADiB,CAEjB;;AACA,UAAID,IAAI,KAAK,IAAb,EAAmB;AACf,eAAO,KAAKhB,QAAL,CAAc;AACjBiB,UAAAA,OAAO,EAAE;AADQ,SAAd,CAAP;AAGH,OAJD,MAIO;AAEH,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAAI,CAACG,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AAElC;AACA;AACA,cAAIF,IAAI,CAACE,CAAD,CAAJ,CAAQJ,QAAR,KAAqBA,QAAzB,EAAmC,CAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGH;AAEJ;AACJ;AAGJ,KA3La;;AAAA,SA4NdM,SA5Nc,GA4NDrB,CAAD,IAAO;AACf,WAAKC,QAAL,CAAc;AAAEO,QAAAA,WAAW,EAAER,CAAC,CAACsB,MAAF,CAASC;AAAxB,OAAd;AACAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,KAAK5B,KAAL,CAAWO,EAAhC,EAAoCsB,IAAI,CAACC,SAAL,CAAe,KAAKtB,KAAL,CAAWuB,OAA1B,CAApC;AACH,KA/Na;;AAAA,SAgOdC,iBAhOc,GAgOOC,cAAD,IAAoB;AACpC,WAAK7B,QAAL,CAAc;AACV8B,QAAAA,mBAAmB,EAAED;AADX,OAAd;AAGH,KApOa;;AAEd,SAAKzB,KAAL,GAAa;AAET;AACA2B,MAAAA,UAAU,EAAE,EAHH;AAITC,MAAAA,WAAW,EAAE,EAJJ;AAKTlB,MAAAA,QAAQ,EAAE,EALD;AAMTX,MAAAA,EAAE,EAAE,CANK;AAOTa,MAAAA,IAAI,EAAE,IAPG;AAQTiB,MAAAA,OAAO,EAAE,EARA;AASTH,MAAAA,mBAAmB,EAAE,CATZ;AAUT;AAEAb,MAAAA,OAAO,EAAE,EAZA;AAaTU,MAAAA,OAAO,EAAE,EAbA;AAcTL,MAAAA,KAAK,EAAE,EAdE;AAeTf,MAAAA,WAAW,EAAE,CAfJ;AAgBTN,MAAAA,YAAY,EAAE,CAhBL;AAmBTiC,MAAAA,OAAO,EAAG,EAnBD;AAoBTC,MAAAA,YAAY,EAAE,EApBL,CAuBb;;AAvBa,KAAb;AAwBH;;AAEGC,EAAAA,WAAW,CAACtB,QAAD,EAAU;AACjB;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA,QAAI,KAAKV,KAAL,CAAWa,OAAX,CAAmBE,MAAvB,EAA+B;AAC3BkB,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACA,WAAKlC,KAAL,CAAWa,OAAX,CAAmBsB,IAAnB,CAAwB,UAAU1B,IAAV,EAAgBV,EAAhB,EAAoB;AACpCkC,QAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;;AACA,YAAIzB,IAAI,CAACV,EAAL,KAAYW,QAAQ,CAACX,EAAzB,EAA6B;AACzBkC,UAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EADyB,CAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,iBAAO,IAAP;AACH,SAZD,MAYO;AACHD,UAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACA,iBAAO,KAAP;AACH;AACJ,OAlBL;AAmBH,KArBD,MAqBO;AACHD,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACA,WAAKtC,QAAL,CAAc;AAACiB,QAAAA,OAAO,EAAE,CAACH,QAAD;AAAV,OAAd;AACAuB,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKlC,KAAL,CAAWa,OAAvB;AACH,KApCgB,CAyCjB;AACI;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEP;;AAqHDuB,EAAAA,iBAAiB,GAAG;AAEhB,SAAKnC,cAAL,CAAoB,CAApB;AAEA,UAAMoC,WAAW,GAAG,KAAK7C,KAAL,CAAWO,EAA/B,CAJgB,CAMhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAAKH,QAAL,CAAc;AAAE0C,MAAAA,MAAM,EAAED;AAAV,KAAd;;AAEA,QAAI,KAAKrC,KAAL,CAAWa,OAAX,CAAmB0B,MAAnB,CAA0BC,MAAM,IAAIA,MAAM,CAACC,SAAP,KAAqB,IAAzD,EAA+D1B,MAA/D,KAA0E,CAA9E,EAAiF;AAE7E,UAAI2B,YAAY,GAAGrB,IAAI,CAACsB,KAAL,CAAWxB,YAAY,CAACyB,OAAb,CAAqB,gBAArB,CAAX,CAAnB;AACAF,MAAAA,YAAY,CAAC,KAAKlD,KAAL,CAAWqD,KAAZ,CAAZ,GAAiC,IAAjC;;AAEA,UAAI,KAAKrD,KAAL,CAAWsD,KAAf,EAAsB;AAClB,YAAIC,WAAW,GAAG,EAAlB;AACAL,QAAAA,YAAY,CAACM,GAAb,CAAiBC,IAAI,IAAIF,WAAW,CAACG,IAAZ,CAAiB,IAAjB,CAAzB;AACA/B,QAAAA,YAAY,CAACC,OAAb,CAAqB,gBAArB,EAAuCC,IAAI,CAACC,SAAL,CAAeyB,WAAf,CAAvC;AAEH,OALD,MAKO;AACH5B,QAAAA,YAAY,CAACC,OAAb,CAAqB,gBAArB,EAAuCC,IAAI,CAACC,SAAL,CAAeoB,YAAf,CAAvC;AACH;AACJ;AACJ;;AAEDS,EAAAA,kBAAkB,GAAE;AAChB,QAAIC,OAAO,GAAG/B,IAAI,CAACsB,KAAL,CAAWxB,YAAY,CAACyB,OAAb,CAAqB,SAArB,CAAX,CAAd;AACA,QAAIS,eAAe,GAAGlC,YAAY,CAACyB,OAAb,CAAqB,UAArB,CAAtB;AACA,QAAIU,OAAO,GAAGjC,IAAI,CAACsB,KAAL,CAAWxB,YAAY,CAACyB,OAAb,WAAwBS,eAAxB,EAAX,CAAd;AAEA,QAAIxD,YAAY,GAAGwB,IAAI,CAACsB,KAAL,CAAWxB,YAAY,CAACyB,OAAb,CAAqB,eAArB,CAAX,CAAnB;AACI,QAAIW,gBAAgB,GAAG,EAAvB;;AACA,SAAK,IAAIzC,CAAT,IAAcjB,YAAd,EAA4B;AACxB0D,MAAAA,gBAAgB,CAACL,IAAjB,CAAsBrD,YAAY,CAACiB,CAAD,CAAZ,CAAgB0C,IAAtC;AACH;;AACD,QAAGJ,OAAH,EAAW;AACPA,MAAAA,OAAO,CAACvD,YAAR,GAAuB0D,gBAAvB;AACH,KAFD,MAEO;AACHH,MAAAA,OAAO,GAAG,EAAV;AACH;;AAEL,SAAKxD,QAAL,CAAc;AAAEiB,MAAAA,OAAO,EAAGuC,OAAZ;AAAqBtB,MAAAA,OAAO,EAAEwB;AAA9B,KAAd,EAhBgB,CAkBhB;AACH;;AAGDG,EAAAA,MAAM,GAAG;AACL;AACAxB,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0B,KAAKlC,KAAL,CAAWa,OAArC,EAFK,CAGL;;AACA,UAAM6C,UAAU,GAAG,KAAK1D,KAAL,CAAWG,WAAX,KAA2B,CAA3B,GACf;AACCkB,IAAAA,IAAI,CAACsB,KAAL,CAAWxB,YAAY,CAACyB,OAAb,CAAqB,gBAArB,CAAX,EAAmDL,MAAnD,CAA0DU,IAAI,IAAIA,IAAI,KAAK,KAA3E,EAAkFlC,MAAlF,KAA6F,CAA9F,GACI,oBAAC,IAAD;AAAM,MAAA,EAAE,EAAE;AAAE4C,QAAAA,QAAQ,EAAE,eAAZ;AAA6B3D,QAAAA,KAAK,EAAE;AAAEuB,UAAAA,OAAO,EAAE,KAAKvB,KAAL,CAAWuB;AAAtB;AAApC,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAE,KAAKqC,MAAtB;AAA8B,MAAA,SAAS,EAAC,QAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,CADJ,GAIM,0CACE,oBAAC,MAAD;AAAQ,MAAA,SAAS,EAAC,QAAlB;AAA2B,MAAA,QAAQ,MAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,CANS,GAUf,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAE,KAAK9D,IAAtB;AAA4B,MAAA,SAAS,EAAC,QAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVJ;AAWA,WACI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,KAAK,EAAE;AAAE+D,QAAAA,OAAO,EAAE,MAAX;AAAmBC,QAAAA,cAAc,EAAE;AAAnC,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAK9D,KAAL,CAAWG,WAAX,KAA2B,CAA3B,IAAgC,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAE;AAAE4D,QAAAA,WAAW,EAAE;AAAf,OAAf;AAAwC,MAAA,OAAO,EAAE,KAAK3D,IAAtD;AAA4D,MAAA,SAAS,EAAC,QAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADrC,EAEKsD,UAFL,CADJ,EAKI,oBAAC,UAAD;AAAY,MAAA,MAAM,EAAE,KAAK1D,KAAL,CAAWD,EAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALJ,EAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANJ,EAOI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPJ,EAQK,KAAKC,KAAL,CAAWU,QAAX,CAAoBsC,GAApB,CAAwB,CAACtC,QAAD,EAAWmC,KAAX,KAAqB;AAC1C,UAAImB,cAAc,GAAGtD,QAArB;AACA,WAAKV,KAAL,CAAW+B,YAAX,GAA0BiC,cAAc,CAACC,QAAf,CAAwBT,IAAlD;AACArC,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCV,QAAQ,CAACA,QAA1C;AACA,UAAI2C,eAAe,GAAGlC,YAAY,CAACyB,OAAb,CAAqB,UAArB,CAAtB;AACAzB,MAAAA,YAAY,CAACC,OAAb,WAAwBiC,eAAxB,GAA2ChC,IAAI,CAACC,SAAL,CAAe0C,cAAf,CAA3C;AACA/B,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgC8B,cAAhC,EAN0C,CAO1C;;AACA,aACI;AACI,QAAA,GAAG,EAAEnB,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAGI;AACI,QAAA,KAAK,EAAEnC,QAAQ,CAACA,QADpB;AAEI,QAAA,GAAG,EAAEmC,KAFT;AAGI,QAAA,KAAK,EAAE;AAAEqB,UAAAA,QAAQ,EAAE;AAAZ,SAHX,CAII;AACA;AALJ;AAMI,QAAA,OAAO,EAAE,KAAKlC,WAAL,CAAiBmC,IAAjB,CAAsB,IAAtB,EAA4BzD,QAA5B,CANb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SASQA,QAAQ,CAACA,QATjB,EAWI,oBAAC,kBAAD;AACI,QAAA,GAAG,EAAEmC,KADT;AAEI,QAAA,kBAAkB,EAAEmB,cAFxB;AAGI,QAAA,KAAK,EAAE,KAAKpD,IAAL,CAAUF,QAAQ,CAACA,QAAnB,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAXJ,EAgBI,oBAAC,SAAD;AACI,QAAA,kBAAkB,EAAE,KAAKc,iBAD7B;AAEI,QAAA,kBAAkB,EAAEwC,cAFxB;AAGI,QAAA,KAAK,EAAE,KAAKpD,IAAL,CAAUF,QAAQ,CAACA,QAAnB,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAhBJ,EAqBI,oBAAC,QAAD;AACI,QAAA,kBAAkB,EAAEsD,cADxB;AAEI,QAAA,UAAU,EAAE,KAAKI,cAFrB;AAGI,QAAA,KAAK,EAAE,KAAKxD,IAAL,CAAUF,QAAQ,CAACA,QAAnB,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QArBJ,CAHJ,CADJ;AAiCH,KAzCA,CARL,CADJ,CADJ;AAuDH;;AApWiD","sourcesContent":["import Frequency from './Frequency/Radio';\nimport Comments from './Comment/Comment';\n// import Legend from './Legend/Legend';\nimport Motivation from './Motivation/Motivation'\nimport Categories from './Categories/Categories'\nimport URLStorage from '../../../constants';\nimport { Link } from 'react-router-dom';\nimport uniqueid from 'uniqid';\n// import  ConfirmModal  from '../Modal';\n\nimport '../../../App.css';\n\nimport axios from 'axios';\nimport React from 'react';\nimport { Container, Row, Col, Button, Form, FormGroup } from 'reactstrap';\n\nimport './MainForm.css'\nimport DropdownExampleCompact from './Motivation/Motivation';\nimport { ButtonGroup, Dropdown } from 'semantic-ui-react';\nimport DropdownMotivation from './Motivation/Motivation';\n\nexport default class MainForm extends React.Component {\nconstructor(props){\n    super (props)\n    this.state = {\n\n        // --------- TESTING : UNCOMMENT WHEN SERVER DOWN ----------------\n        categories: [],\n        motivations: [],\n        question: [],\n        id: 1,\n        test: null,\n        results: [],\n        regularityFromChild: 0,\n        // ----------------------------------------------------------------\n\n        allData: [],\n        answers: [],\n        value: [],\n        selectedCat: 1,\n        selectedMode: 0,\n\n\n        dataGet : [],\n        incidentName: \"\",\n\n    }\n    // this.handleClick = this.handleClick.bind(this)\n}\n\n    handleClick(question){\n        // IF => deux possibilités:\n        // 1. Dans le state, l'élément choisi par le User n'existe pas\n        // 2. Dans le state, l'élément choisi par le User existe\n\n        // Si (1): 1.1 update le state en ajouter l'élément dans l'array du state et 1.2 update le local storage de la même manière\n        // Si (2): 2.1 update le state avec splice (chercher, séléctionner, supprimer, insérer) et le local storage de la même manière\n\n        // console.log(allData)\n        // console.log(getData)\n        if (this.state.allData.length) {\n            console.log('allData is not null')    \n            this.state.allData.find(function (data, id) {\n                    console.log('exist has been called')\n                    if (data.id === question.id) {\n                        console.log('has found matching IDs')\n                        // var indexOf = allData.indexOf(data);\n                        // for (var key in data) {\n                        //     if (data[key] === getData[key] || data[key] === undefined) {\n                        //         data[key] = getData[key]\n                        //         modified = true\n                        //         copiedState.splice(indexOf, 1)\n                        //         console.log(\"copied state after existing question  \", copiedState)\n                        //     }\n                        // }\n                        return true\n                    } else {\n                        console.log(\"has not found matching IDs\")\n                        return false\n                    }\n                })\n        } else {\n            console.log('allData is null')\n            this.setState({allData: [question]})\n            console.log('Updating state... :')\n            console.log(this.state.allData)\n        }\n        \n        \n        \n\n        //e.preventDefault();\n            // console.log(\"HandleClick is running\")\n            // var bigItem = this.state.allData\n            // var getData = this.state.dataGet\n\n            // var allData = this.state.allData\n            // var copiedState = this.state\n            // copiedState = Array.from(Object.create(allData))\n            // //console.log(\"COPIED STATE\", copiedState)\n            // var modified = false\n            // var id = 0\n            // if (!this.state.allData){\n            //     this.state.allData = []\n            // }else{\n            //     var verif = allData.find(function (data, id) {\n            //         if (data.id === getData.id) {\n            //             var indexOf = allData.indexOf(data);\n            //             console.log(\"get data in verif \", getData)\n            //             console.log(\"INDEX OF \", indexOf)\n            //             console.log(\"get data id \", getData.id)\n            //             for (var key in data) {\n            //                 if (data[key] === getData[key] || data[key] === undefined) {\n            //                     data[key] = getData[key]\n            //                     modified = true\n            //                     copiedState.splice(indexOf, 1)\n            //                     console.log(\"copied state after existing question  \", copiedState)\n            //                 }\n            //             }\n            //             return true\n            //         } else {\n            //             // console.log(\"HELLO\")\n            //             return false\n            //         }\n            //     })\n            //     if (!verif || modified) {\n            //         copiedState.push(getData)\n            //         this.setState({ allData : copiedState})\n            //         localStorage.setItem(\"bigItem\", JSON.stringify(copiedState))\n            //         console.log(\"Console log state after modifs\", this.state.allData)\n            //     }\n    \n            // }\n            \n    }\n\n    handleSelection = (idx) => (e) => {\n        this.setState({ selectedMode: idx });\n    };\n\n    next = () => {\n        let id = this.state.id + 1;\n        this.fetchQuestions(id);\n        this.setState(prevState => ({\n            selectedCat: prevState.selectedCat + 1,\n            id: prevState.id + 1,\n\n        }));\n\n\n    }\n    prev = () => {\n        let id = this.state.id - 1;\n        this.fetchQuestions(id);\n        this.setState(prevState => ({\n            selectedCat: prevState.selectedCat - 1,\n            id: prevState.id - 1,\n        }));\n\n    }\n\n\n    fetchQuestions = (id) => {\n        axios.get(`${URLStorage.API_URL}/getAllQuestions/${id}`)\n            .then(res => {\n                const data = res.data\n                this.setState({\n                    question: data,\n                    isLoaded: true,\n                })\n            })\n    }\n\n    test = (question) => {\n        var test = this.state.allData\n        //console.log(\"test value \", test)\n        if (test === null) {\n            return this.setState({\n                allData: []\n            })\n        } else {\n\n            for (let i = 0; i < test.length; i++) {\n\n                //console.log(\"RUN SECONDE TIME BABY\", test[i].motivation)\n                //, test[i].motivation, test[i].comment, test[i].frequency\n                if (test[i].question === question) {\n                    //console.log(\"HELLLOOO \", test[i].frequency)\n                    //return test[i].frequency \n                    // if (test[i].frequency) {\n                    //     console.log(\"frequency\", test[i].frequency)\n                    //     return test[i].frequency\n                    // } else if (test[i].motivation) {\n                    //     console.log(\"motivation\", test[i].motivation)\n                    //     return test[i].motivation\n                    // } else if (test[i].comment) {\n                    //     console.log(\"comment\", test[i].comment)\n                    //     return test[i].comment\n                    // } else {\n                    //     console.log(\"Nothing\")\n                    // }\n\n\n                }\n\n            }\n        }\n\n\n    }\n\n\n\n    // anyChange = (id) => (e) => {\n    //     const inputName = e.target.name;\n    //     const inputValue = e.target.value;\n    //     let entries = Object.assign({}, this.state);\n    //     const { answers } = entries;\n    //     answers.map(answer => answer.questionID === id ? answer[inputName] = inputValue : undefined);\n    //     this.setState(entries);\n    //     localStorage.setItem(this.props.id, JSON.stringify(this.state.answers));\n\n    //     // ------------ SWITCH BOOLEAN TO COMPLETED FOR CURRENT MODE ---------------\n\n    //     console.log(this.state.allData)\n\n    //     if (this.state.allData.filter(answer => answer.frequency === null).length === 0) {\n\n    //         let completeMode = JSON.parse(localStorage.getItem(\"completedModes\"));\n    //         completeMode[this.props.index] = true;\n\n    //         if (this.props.group) {\n    //             var dummieArray = [];\n    //             completeMode.map(item => dummieArray.push(true));\n    //             localStorage.setItem(\"completedModes\", JSON.stringify(dummieArray));\n\n    //         } else {\n    //             localStorage.setItem(\"completedModes\", JSON.stringify(completeMode));\n    //         }\n    //     }\n    // }\n\n    selectCat = (e) => {\n        this.setState({ selectedCat: e.target.value })\n        localStorage.setItem(this.props.id, JSON.stringify(this.state.answers));\n    }\n    frequencyCallback = (regularityCall) => {\n        this.setState({\n            regularityFromChild: regularityCall\n        })\n    }\n    componentDidMount() {\n\n        this.fetchQuestions(1);\n\n        const transportId = this.props.id;\n\n        // var questionStorage = localStorage.getItem(\"question\");\n        // var getData = JSON.parse(localStorage.getItem(`${questionStorage}`))\n        // this.state.dataGet = getData\n        // this.setState({\n        //     dataGet : getData\n        // })\n        //console.log(\"Inside get data\", getData)\n        //console.log(\"Inside data get\", this.state.dataGet)\n\n        \n        this.setState({ modeID: transportId})\n\n        if (this.state.allData.filter(answer => answer.frequency === null).length === 0) {\n\n            let completeMode = JSON.parse(localStorage.getItem(\"completedModes\"));\n            completeMode[this.props.index] = true;\n\n            if (this.props.group) {\n                var dummieArray = [];\n                completeMode.map(item => dummieArray.push(true));\n                localStorage.setItem(\"completedModes\", JSON.stringify(dummieArray));\n\n            } else {\n                localStorage.setItem(\"completedModes\", JSON.stringify(completeMode));\n            }\n        }\n    };\n\n    componentWillMount(){\n        var bigItem = JSON.parse(localStorage.getItem(\"bigItem\"))\n        var questionStorage = localStorage.getItem(\"question\");\n        var getData = JSON.parse(localStorage.getItem(`${questionStorage}`))\n\n        var selectedMode = JSON.parse(localStorage.getItem(\"selectedModes\"))\n            var selectedModeName = [];\n            for (var i in selectedMode) {\n                selectedModeName.push(selectedMode[i].name)\n            }\n            if(bigItem){\n                bigItem.selectedMode = selectedModeName\n            } else {\n                bigItem = []\n            }\n\n        this.setState({ allData : bigItem, dataGet: getData})\n        \n        //console.log(\"Inside get data in will mount\", getData)\n    }\n\n\n    render() {\n        // NEXT / SUBMIT BUTTON SWITCH\n        console.log(\"THE STATE \", this.state.allData)\n        //console.log(\"Copied after render \", copiedState)\n        const nextSubmit = this.state.selectedCat === 5 ?\n            // || (parseInt((localStorage.getItem(\"group\")) === 1)\n            (JSON.parse(localStorage.getItem(\"completedModes\")).filter(item => item === false).length === 0) ?\n                <Link to={{ pathname: \"/confirmation\", state: { answers: this.state.answers } }}>\n                    <Button onClick={this.submit} className=\"submit\" >Submit</Button>\n                </Link>\n                : <>\n                    <Button className=\"submit\" disabled>Submit</Button>\n                </>\n            :\n            <Button onClick={this.next} className=\"submit\">Next</Button>;\n        return (\n            <React.Fragment>\n                <Container>\n                    <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n                        {this.state.selectedCat !== 1 && <Button style={{ marginRight: \"10px\" }} onClick={this.prev} className=\"submit\" >Previous</Button>}\n                        {nextSubmit}\n                    </div>\n                    <Categories idPage={this.state.id} />\n                    <br />\n                    <br />\n                    {this.state.question.map((question, index) => {\n                        var questionParent = question\n                        this.state.incidentName = questionParent.incident.name\n                        localStorage.setItem(\"question\", question.question)\n                        var questionStorage = localStorage.getItem(\"question\");\n                        localStorage.setItem(`${questionStorage}`, JSON.stringify(questionParent))\n                        console.log(\"Question parent \", questionParent)\n                        //console.log(\"this state in map \", this.state.allData)\n                        return (\n                            <ul\n                                key={index}\n                            >\n                                <li\n                                    value={question.question}\n                                    key={index}\n                                    style={{ fontSize: \"20px\" }}\n                                    //onClick={ this.handleClick(getData).bind(this)}\n                                    //onClick={ this.props.handleClic}\n                                    onClick={this.handleClick.bind(this, question)}\n                                >\n                                    {\n                                        question.question\n                                    }\n                                    <DropdownMotivation\n                                        key={index}\n                                        listNameFromParent={questionParent}\n                                        value={this.test(question.question)}\n                                    />\n                                    <Frequency\n                                        callBackFromParent={this.frequencyCallback}\n                                        listNameFromParent={questionParent}\n                                        value={this.test(question.question)}\n                                    />\n                                    <Comments\n                                        listNameFromParent={questionParent}\n                                        getComment={this.getBackComment}\n                                        value={this.test(question.question)}\n                                    />\n                                </li>\n                            </ul>\n                        );\n                    })}\n                </Container>\n            </React.Fragment>\n        )\n    }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}