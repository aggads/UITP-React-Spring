{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aggad.samy\\\\Workspace\\\\UITP-React-Spring\\\\Front-end\\\\src\\\\components\\\\FormPage\\\\FormPage.js\";\nimport Mode from '../ModeSelection/Mode';\nimport MainForm from './Mainform/MainForm';\nimport Legend from './Mainform/Legend/Legend';\nimport React from 'react';\nimport { Container } from 'reactstrap';\nexport default class FormPage extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      selectedCat: 1,\n      selectedMode: 0,\n      group: null\n    };\n\n    this.handleSelection = idx => e => {\n      this.setState({\n        selectedMode: idx\n      });\n    };\n\n    this.selectCat = e => {\n      this.setState({\n        selectedCat: e.target.value\n      });\n    };\n  }\n\n  componentWillMount() {\n    let getGroup = localStorage.getItem(\"group\"); // var stateMode = JSON.parse(localStorage.getItem(\"stateMode\"))\n\n    this.setState({\n      group: getGroup\n    });\n  }\n\n  componentDidMount() {\n    localStorage.setItem(\"stateMode\", JSON.stringify(this.props.location.state)); // console.log(\"state mode \", stateMode)\n  } // componentDidUpdate(){\n  //     let getGroup = localStorage.getItem(\"group\")\n  //     let group = this.getUrlParams();\n  //     if(this.didQueryChange(group)) this.setState({group: group})\n  // }\n\n\n  render() {\n    //const selectedtransport = this.props.location.state.modes.modes.filter(item => item.selected === true);\n    var stateMode = localStorage.getItem(\"stateMode\");\n    var getMode = Object.values(stateMode);\n    console.log(\"state mode \", stateMode);\n    console.log(\"get mode \", getMode.modes);\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(Legend, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: {\n        display: \"block\",\n        margin: \"auto\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, stateMode.group === 0 ? \"Separate\" : \"Grouped\", \" Reporting for\"), React.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"start\",\n        marginBottom: \"40px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, stateMode.group === 0 ? stateMode.modes.modes.filter(mode => mode.selected === true).map((mode, idx) => React.createElement(Mode, {\n      key: idx,\n      id: mode.id,\n      index: idx,\n      name: mode.name,\n      url: mode,\n      selected: this.state.selectedMode === idx ? true : false,\n      maxHeight: \"50px\",\n      handleSelection: this.handleSelection(idx),\n      grouped: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    })) : stateMode.modes.modes.filter(mode => mode.selected === true).map((mode, idx) => React.createElement(Mode, {\n      key: idx,\n      id: mode.id,\n      index: idx,\n      name: mode.name,\n      url: mode,\n      selected: true,\n      maxHeight: \"50px\",\n      grouped: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    })))), stateMode.modes.modes.filter(mode => mode.selected === true).map((mode, idx) => idx === this.state.selectedMode && React.createElement(MainForm, {\n      key: idx,\n      id: mode.id,\n      group: stateMode.group,\n      index: idx,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }))));\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\aggad.samy\\Workspace\\UITP-React-Spring\\Front-end\\src\\components\\FormPage\\FormPage.js"],"names":["Mode","MainForm","Legend","React","Container","FormPage","Component","state","selectedCat","selectedMode","group","handleSelection","idx","e","setState","selectCat","target","value","componentWillMount","getGroup","localStorage","getItem","componentDidMount","setItem","JSON","stringify","props","location","render","stateMode","getMode","Object","values","console","log","modes","display","margin","justifyContent","marginBottom","filter","mode","selected","map","id","name"],"mappings":";AAAA,OAAOA,IAAP,MAAiB,uBAAjB;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,YAA1B;AAIA,eAAe,MAAMC,QAAN,SAAuBF,KAAK,CAACG,SAA7B,CAAuC;AAAA;AAAA;AAAA,SAClDC,KADkD,GAC1C;AACJC,MAAAA,WAAW,EAAE,CADT;AAEJC,MAAAA,YAAY,EAAE,CAFV;AAGJC,MAAAA,KAAK,EAAE;AAHH,KAD0C;;AAAA,SAOlDC,eAPkD,GAO/BC,GAAD,IAAUC,CAAD,IAAO;AAC9B,WAAKC,QAAL,CAAc;AAAEL,QAAAA,YAAY,EAAEG;AAAhB,OAAd;AACH,KATiD;;AAAA,SAWlDG,SAXkD,GAWrCF,CAAD,IAAO;AACf,WAAKC,QAAL,CAAc;AAAEN,QAAAA,WAAW,EAAEK,CAAC,CAACG,MAAF,CAASC;AAAxB,OAAd;AACH,KAbiD;AAAA;;AAelDC,EAAAA,kBAAkB,GAAE;AAChB,QAAIC,QAAQ,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAf,CADgB,CAEhB;;AACA,SAAKP,QAAL,CAAc;AACVJ,MAAAA,KAAK,EAAES;AADG,KAAd;AAGH;;AACDG,EAAAA,iBAAiB,GAAE;AACfF,IAAAA,YAAY,CAACG,OAAb,CAAqB,WAArB,EAAkCC,IAAI,CAACC,SAAL,CAAe,KAAKC,KAAL,CAAWC,QAAX,CAAoBpB,KAAnC,CAAlC,EADe,CAGf;AACH,GA1BiD,CA6BlD;AACA;AACA;AACA;AACA;;;AAEAqB,EAAAA,MAAM,GAAG;AACL;AACA,QAAIC,SAAS,GAAGT,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAhB;AACA,QAAIS,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAcH,SAAd,CAAd;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BL,SAA3B;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBJ,OAAO,CAACK,KAAjC;AACA,WACI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAGI;AAAK,MAAA,KAAK,EAAE;AAAEC,QAAAA,OAAO,EAAE,OAAX;AAAoBC,QAAAA,MAAM,EAAE;AAA5B,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKR,SAAS,CAACnB,KAAV,KAAoB,CAApB,GAAwB,UAAxB,GAAqC,SAA1C,mBADJ,EAGI;AAAK,MAAA,KAAK,EAAE;AAAE0B,QAAAA,OAAO,EAAE,MAAX;AAAmBE,QAAAA,cAAc,EAAE,OAAnC;AAA4CC,QAAAA,YAAY,EAAE;AAA1D,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKV,SAAS,CAACnB,KAAV,KAAoB,CAApB,GAEDmB,SAAS,CAACM,KAAV,CAAgBA,KAAhB,CAAsBK,MAAtB,CAA6BC,IAAI,IAAIA,IAAI,CAACC,QAAL,KAAkB,IAAvD,EAA6DC,GAA7D,CAAiE,CAACF,IAAD,EAAO7B,GAAP,KACjE,oBAAC,IAAD;AAAM,MAAA,GAAG,EAAEA,GAAX;AAAgB,MAAA,EAAE,EAAE6B,IAAI,CAACG,EAAzB;AAA6B,MAAA,KAAK,EAAEhC,GAApC;AAAyC,MAAA,IAAI,EAAE6B,IAAI,CAACI,IAApD;AAA0D,MAAA,GAAG,EAAEJ,IAA/D;AAAqE,MAAA,QAAQ,EAAE,KAAKlC,KAAL,CAAWE,YAAX,KAA4BG,GAA5B,GAAkC,IAAlC,GAAyC,KAAxH;AAA+H,MAAA,SAAS,EAAC,MAAzI;AAAgJ,MAAA,eAAe,EAAE,KAAKD,eAAL,CAAqBC,GAArB,CAAjK;AAA4L,MAAA,OAAO,EAAE,KAArM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,CAFC,GAKDiB,SAAS,CAACM,KAAV,CAAgBA,KAAhB,CAAsBK,MAAtB,CAA6BC,IAAI,IAAIA,IAAI,CAACC,QAAL,KAAkB,IAAvD,EAA6DC,GAA7D,CAAiE,CAACF,IAAD,EAAO7B,GAAP,KAChE,oBAAC,IAAD;AAAM,MAAA,GAAG,EAAEA,GAAX;AAAgB,MAAA,EAAE,EAAE6B,IAAI,CAACG,EAAzB;AAA6B,MAAA,KAAK,EAAEhC,GAApC;AAAyC,MAAA,IAAI,EAAE6B,IAAI,CAACI,IAApD;AAA0D,MAAA,GAAG,EAAEJ,IAA/D;AAAqE,MAAA,QAAQ,EAAE,IAA/E;AAAqF,MAAA,SAAS,EAAC,MAA/F;AAAsG,MAAA,OAAO,EAAE,IAA/G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CANJ,CAHJ,CAHJ,EAoBKZ,SAAS,CAACM,KAAV,CAAgBA,KAAhB,CAAsBK,MAAtB,CAA6BC,IAAI,IAAIA,IAAI,CAACC,QAAL,KAAkB,IAAvD,EAA6DC,GAA7D,CAAiE,CAACF,IAAD,EAAO7B,GAAP,KAAeA,GAAG,KAAK,KAAKL,KAAL,CAAWE,YAAnB,IAC7E,oBAAC,QAAD;AAAU,MAAA,GAAG,EAAEG,GAAf;AAAoB,MAAA,EAAE,EAAE6B,IAAI,CAACG,EAA7B;AAAiC,MAAA,KAAK,EAAEf,SAAS,CAACnB,KAAlD;AAAyD,MAAA,KAAK,EAAEE,GAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,CApBL,CADJ,CADJ;AA8BH;;AAvEiD","sourcesContent":["import Mode from '../ModeSelection/Mode'\nimport MainForm from './Mainform/MainForm'\nimport Legend from './Mainform/Legend/Legend'\nimport React from 'react';\nimport { Container } from 'reactstrap';\n\n\n\nexport default class FormPage extends React.Component {\n    state = {\n        selectedCat: 1,\n        selectedMode: 0,\n        group: null\n    };\n\n    handleSelection = (idx) => (e) => {\n        this.setState({ selectedMode: idx });\n    };\n\n    selectCat = (e) => {\n        this.setState({ selectedCat: e.target.value })\n    }\n\n    componentWillMount(){\n        let getGroup = localStorage.getItem(\"group\")\n        // var stateMode = JSON.parse(localStorage.getItem(\"stateMode\"))\n        this.setState({\n            group: getGroup\n        })\n    }\n    componentDidMount(){\n        localStorage.setItem(\"stateMode\", JSON.stringify(this.props.location.state))   \n        \n        // console.log(\"state mode \", stateMode)\n    }\n\n   \n    // componentDidUpdate(){\n    //     let getGroup = localStorage.getItem(\"group\")\n    //     let group = this.getUrlParams();\n    //     if(this.didQueryChange(group)) this.setState({group: group})\n    // }\n\n    render() {\n        //const selectedtransport = this.props.location.state.modes.modes.filter(item => item.selected === true);\n        var stateMode = localStorage.getItem(\"stateMode\")\n        var getMode = Object.values(stateMode)\n        console.log(\"state mode \", stateMode)\n        console.log(\"get mode \", getMode.modes)\n        return (\n            <React.Fragment>\n                <Container>\n                    <Legend /> \n\n                    <div style={{ display: \"block\", margin: \"auto\" }}>\n                        <h4>{stateMode.group === 0 ? \"Separate\" : \"Grouped\"} Reporting for</h4>\n\n                        <div style={{ display: \"flex\", justifyContent: \"start\", marginBottom: \"40px\" }}>\n                            {stateMode.group === 0 ?\n                            \n                            stateMode.modes.modes.filter(mode => mode.selected === true).map((mode, idx) =>\n                            <Mode key={idx} id={mode.id} index={idx} name={mode.name} url={mode} selected={this.state.selectedMode === idx ? true : false} maxHeight=\"50px\" handleSelection={this.handleSelection(idx)} grouped={false} />)\n                            :                             \n                            stateMode.modes.modes.filter(mode => mode.selected === true).map((mode, idx) =>\n                             <Mode key={idx} id={mode.id} index={idx} name={mode.name} url={mode} selected={true} maxHeight=\"50px\" grouped={true}  />) }  \n                        </div>\n\n                        \n                    </div>\n\n\n                    {stateMode.modes.modes.filter(mode => mode.selected === true).map((mode, idx) => idx === this.state.selectedMode &&\n                        <MainForm key={idx} id={mode.id} group={stateMode.group} index={idx} />\n                    )}\n\n\n                </Container>\n            </React.Fragment>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}