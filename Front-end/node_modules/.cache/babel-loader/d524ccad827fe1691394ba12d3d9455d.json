{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aggad.samy\\\\Workspace\\\\uitp-service\\\\Front-end\\\\src\\\\components\\\\Confirmation\\\\Confirmation.js\";\nimport Frequency from '../FormPage/Mainform/Frequency/Radio';\nimport Comments from '../FormPage/Mainform/Comment/Comment';\nimport Mode from '../ModeSelection/Mode'; // import Legend from './Legend/Legend';\n\nimport Motivation from '../FormPage/Mainform/Motivation/Motivation'; // import Categories from '../Categories/Categories'\n// import URLStorage from '../../../constants';\n\nimport { Link, Redirect } from 'react-router-dom';\nimport axios from 'axios';\nimport React from 'react';\nimport { Container, Row, Col, Button, Form, FormGroup } from 'reactstrap'; // import './MainForm.css'\n\nexport default class Confirmation extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {// categories:[], \n      // motivation:[],\n      // questions: [],\n      // answers: [],\n      // value: [],\n      // selectedCat:1,\n      // selectedMode: 0,\n    };\n\n    this.submit = e => {\n      e.preventDefault();\n      const selectedModes = JSON.parse(localStorage.getItem(\"selectedModes\"));\n      JSON.parse(localStorage.getItem(\"selectedModes\"));\n      let results = []; //const localPtoId = parseInt(localStorage.getItem(\"ptoid\"));\n      // -------------- GROUPED RESULTS POSTING -----------------------\n\n      if (JSON.parse(localStorage.getItem(\"group\")) === 1) {\n        selectedModes.map(mode => {\n          return results.push(this.props.location.state.answers.map(answer => {\n            return {\n              ptoID: localPtoId,\n              questionID: parseInt(answer.questionID),\n              frequency: parseInt(answer.frequency),\n              modeID: parseInt(mode.id),\n              motivationID: parseInt(answer.motivationID),\n              comment: answer.comment,\n              periodeID: parseInt(answer.periode)\n            };\n          }));\n        }); // -------------- SEPARATE RESULTS POSTING -----------------------\n      } else {\n        selectedModes.map(mode => {\n          const oneSelectedMode = JSON.parse(localStorage.getItem(mode.id));\n          return results.push(oneSelectedMode.map(answer => {\n            return {\n              ptoID: localPtoId,\n              questionID: parseInt(answer.questionID),\n              frequency: parseInt(answer.frequency),\n              modeID: parseInt(answer.modeID),\n              motivationID: parseInt(answer.motivationID),\n              comment: answer.comment,\n              periode: parseInt(answer.periode)\n            };\n          }));\n        });\n      } // -------------- AXIOS POST -----------------------\n      // let successBoolean = true\n      // results.forEach((resultOne) => {\n      //     axios.post(`${URLStorage.API_URL}/resultAll`, {\n      //         resultOne // variable name asked by the backend, do not change\n      //     })\n      //         .then((res) => { return res.status !== 202 ? successBoolean = false : undefined })\n      //         .then(item => { return successBoolean === true ? this.clearQuestions(selectedModes) && this.goTo(\"reports\") : this.goTo(\"error\") })\n      // })\n\n    };\n  }\n\n  clearQuestions(selectedModes) {\n    selectedModes.forEach(mode => localStorage.removeItem(\"\".concat(mode.id)));\n    return true;\n  } // goTo(route) {\n  //     this.props.history.replace(`/${route}`);\n  // }\n\n\n  render() {\n    const selectedModes = JSON.parse(localStorage.getItem(\"selectedModes\")); // const allAnswers = selectedModes.map((item, idx) => {\n    //     return JSON.parse(localStorage.getItem(`${item.id}`));\n    // })\n\n    const _this$props$location$ = this.props.location.state,\n          answers = _this$props$location$.answers,\n          motivations = _this$props$location$.motivations;\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"space-between\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, selectedModes.map((mode, idx) => React.createElement(Mode, {\n      key: idx,\n      id: mode.id,\n      index: idx,\n      name: mode.mode_name,\n      url: mode,\n      selected: true,\n      maxHeight: \"50px\",\n      grouped: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.submit,\n      className: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"Confirm Submission\"))), React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, JSON.parse(localStorage.getItem(\"group\")) === 1 ?\n    /* DISPLAY GROUPED RESULTS  */\n    answers.map((data, index) => {\n      return React.createElement(Container, {\n        key: index,\n        className: \"dark-overlay\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, React.createElement(Row, {\n        key: index,\n        style: {\n          padding: '15px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, React.createElement(Col, {\n        key: index,\n        sm: \"12\",\n        md: {\n          size: 12\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, \" \", index + 1, \" \", data.question, \" \"), React.createElement(Frequency, {\n        key: data.questionID,\n        questionId: data.questionID,\n        value: data.frequency,\n        disable: \"disabled\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      })), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, \"Comment : \", data.comment ? data.comment : \"none\"))));\n    }) :\n    /* DISPLAY SEPARATE RESULTS */\n    JSON.parse(localStorage.getItem(\"selectedModes\")).map(mode => {\n      return JSON.parse(localStorage.getItem(mode.id)).map((data, index) => {\n        return React.createElement(Container, {\n          key: index,\n          className: \"dark-overlay\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 148\n          },\n          __self: this\n        }, index === 0 && React.createElement(\"h3\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 149\n          },\n          __self: this\n        }, mode.mode_name), React.createElement(Row, {\n          key: index,\n          style: {\n            padding: '15px'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150\n          },\n          __self: this\n        }, React.createElement(Col, {\n          key: index,\n          sm: \"12\",\n          md: {\n            size: 12\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 151\n          },\n          __self: this\n        }, React.createElement(FormGroup, {\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 152\n          },\n          __self: this\n        }, React.createElement(\"h3\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 153\n          },\n          __self: this\n        }, \" \", data.index, \" \", data.question, \" \"), React.createElement(Frequency, {\n          key: data.questionID,\n          questionId: data.questionID,\n          value: data.frequency,\n          disable: \"disabled\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 154\n          },\n          __self: this\n        })), React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156\n          },\n          __self: this\n        }, \"Comment : \", data.comment), React.createElement(Motivation, {\n          key: data.questionID,\n          questionId: data.questionID,\n          items: motivations,\n          value: data.motivationID,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157\n          },\n          __self: this\n        }))));\n      });\n    }), React.createElement(Button, {\n      onClick: this.submit,\n      className: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, \"Confirm Submission\"), React.createElement(Link, {\n      to: {\n        pathname: \"/formpage\"\n      },\n      className: \"back-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, React.createElement(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, \"Back to Form\"))));\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\aggad.samy\\Workspace\\uitp-service\\Front-end\\src\\components\\Confirmation\\Confirmation.js"],"names":["Frequency","Comments","Mode","Motivation","Link","Redirect","axios","React","Container","Row","Col","Button","Form","FormGroup","Confirmation","Component","state","submit","e","preventDefault","selectedModes","JSON","parse","localStorage","getItem","results","map","mode","push","props","location","answers","answer","ptoID","localPtoId","questionID","parseInt","frequency","modeID","id","motivationID","comment","periodeID","periode","oneSelectedMode","clearQuestions","forEach","removeItem","render","motivations","display","alignItems","justifyContent","idx","mode_name","data","index","padding","size","question","pathname"],"mappings":"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","sourcesContent":["import Frequency from '../FormPage/Mainform/Frequency/Radio';\nimport Comments from '../FormPage/Mainform/Comment/Comment';\n\nimport Mode from '../ModeSelection/Mode'\n\n// import Legend from './Legend/Legend';\nimport Motivation from '../FormPage/Mainform/Motivation/Motivation'\n// import Categories from '../Categories/Categories'\n// import URLStorage from '../../../constants';\nimport { Link, Redirect } from 'react-router-dom';\n\nimport axios from 'axios';\nimport React from 'react';\nimport { Container, Row, Col, Button, Form, FormGroup } from 'reactstrap';\n\n// import './MainForm.css'\n\nexport default class Confirmation extends React.Component {\n\n    state = {\n        // categories:[], \n        // motivation:[],\n        // questions: [],\n        // answers: [],\n        // value: [],\n        // selectedCat:1,\n        // selectedMode: 0,\n\n    };\n\n    clearQuestions(selectedModes)  {\n         selectedModes.forEach(mode => localStorage.removeItem(`${mode.id}`));\n        return true;\n    }\n\n    // goTo(route) {\n    //     this.props.history.replace(`/${route}`);\n    // }\n\n    submit = (e) => {\n\n        e.preventDefault();\n        const selectedModes = JSON.parse(localStorage.getItem(\"selectedModes\"));\n        JSON.parse(localStorage.getItem(\"selectedModes\"));\n        let results = [];\n        //const localPtoId = parseInt(localStorage.getItem(\"ptoid\"));\n\n        // -------------- GROUPED RESULTS POSTING -----------------------\n        if (JSON.parse(localStorage.getItem(\"group\")) === 1) {\n            selectedModes.map((mode) => {\n                return results.push(this.props.location.state.answers.map((answer) => {\n                    return {\n                        ptoID: localPtoId,\n                        questionID: parseInt(answer.questionID),\n                        frequency: parseInt(answer.frequency),\n                        modeID: parseInt(mode.id),\n                        motivationID: parseInt(answer.motivationID),\n                        comment: answer.comment,\n                        periodeID: parseInt(answer.periode)\n\n                    }\n                }))\n            });\n\n            // -------------- SEPARATE RESULTS POSTING -----------------------\n        } else {\n            selectedModes.map(mode => {\n                const oneSelectedMode = JSON.parse(localStorage.getItem(mode.id));\n                return results.push(oneSelectedMode.map((answer) => {\n                    return {\n                        ptoID: localPtoId,\n                        questionID: parseInt(answer.questionID),\n                        frequency: parseInt(answer.frequency),\n                        modeID: parseInt(answer.modeID),\n                        motivationID: parseInt(answer.motivationID),\n                        comment: answer.comment,\n                        periode: parseInt(answer.periode),\n                    }\n                }\n                ))\n            })\n        }\n\n        // -------------- AXIOS POST -----------------------\n\n        // let successBoolean = true\n\n        // results.forEach((resultOne) => {\n        //     axios.post(`${URLStorage.API_URL}/resultAll`, {\n        //         resultOne // variable name asked by the backend, do not change\n        //     })\n        //         .then((res) => { return res.status !== 202 ? successBoolean = false : undefined })\n        //         .then(item => { return successBoolean === true ? this.clearQuestions(selectedModes) && this.goTo(\"reports\") : this.goTo(\"error\") })\n                \n        // })\n\n\n\n    }\n\n    render() {\n\n        const selectedModes = JSON.parse(localStorage.getItem(\"selectedModes\"));\n        // const allAnswers = selectedModes.map((item, idx) => {\n        //     return JSON.parse(localStorage.getItem(`${item.id}`));\n        // })\n\n        const { answers, motivations } = this.props.location.state;\n\n        return (\n            <>\n\n                <div style={{display: \"flex\", alignItems:\"center\", justifyContent: \"space-between\"}}>\n                    {selectedModes.map((mode, idx) => <Mode key={idx} id={mode.id} index={idx} name={mode.mode_name} url={mode} selected={true} maxHeight=\"50px\" grouped={true}  />)}\n                    <div>\n                        <Button onClick={this.submit} className=\"submit\">Confirm Submission</Button>\n                    </div>\n                </div>\n            <Container>\n\n                {JSON.parse(localStorage.getItem(\"group\")) === 1\n                    ?\n                    /* DISPLAY GROUPED RESULTS  */\n                    answers.map((data, index) => {\n                        return <Container key={index} className=\"dark-overlay\" >\n                            <Row key={index} style={{ padding: '15px' }}>\n                                <Col key={index} sm=\"12\" md={{ size: 12 }}>\n                                    <FormGroup key={index}>\n                                        <h5> {index + 1} {data.question} </h5>\n                                        <Frequency key={data.questionID} questionId={data.questionID} value={data.frequency} disable={\"disabled\"} />\n                                    </FormGroup>\n                                    <p>Comment : {data.comment ? data.comment : \"none\"}</p>\n                                    {/* <Motivation key={data.questionID} questionId={data.questionID} items={motivations} value={data.motivationID} /> */}\n\n                                    {/* <Comments key={data.questionID + 'coucou'} questionId={data.questionID} comment={data.comment} disable={\"disabled\"} /> */}\n\n                                </Col>\n\n                            </Row>\n                        </Container>\n                    })\n\n                    :\n                    /* DISPLAY SEPARATE RESULTS */\n                    JSON.parse(localStorage.getItem(\"selectedModes\")).map((mode) => {\n                        return JSON.parse(localStorage.getItem(mode.id)).map((data, index) => {\n                            return (\n                                <Container key={index} className=\"dark-overlay\" >\n                                    {index === 0 && <h3>{mode.mode_name}</h3>}\n                                    <Row key={index} style={{ padding: '15px' }}>\n                                        <Col key={index} sm=\"12\" md={{ size: 12 }}>\n                                            <FormGroup key={index}>\n                                                <h3> {data.index} {data.question} </h3>\n                                                <Frequency key={data.questionID} questionId={data.questionID} value={data.frequency} disable={\"disabled\"} />\n                                            </FormGroup>\n                                            <h5>Comment : {data.comment}</h5>\n                                            <Motivation key={data.questionID} questionId={data.questionID} items={motivations} value={data.motivationID} />\n                                            {/* <Comments key={data.questionID + 'coucou'} questionId={data.questionID} comment={data.comment} disable={\"disabled\"} /> */}\n                                        </Col>\n                                    </Row>\n                                </Container>\n                            )\n                        })\n                    })\n                }\n                <Button onClick={this.submit} className=\"submit\">Confirm Submission</Button>\n                <Link to={{ pathname: \"/formpage\"}} className=\"back-form\">\n                    <Button>Back to Form</Button>\n                </Link>\n                </Container>\n            </>\n        )\n\n    }\n\n}\n\n"]},"metadata":{},"sourceType":"module"}