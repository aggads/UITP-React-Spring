{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aggad.samy\\\\Workspace\\\\uitp-service\\\\Front-end\\\\src\\\\components\\\\ModeSelection\\\\ModeSelection.js\";\nimport { Link } from 'react-router-dom';\nimport React, { Component } from 'react';\nimport { Container, ButtonGroup, Button } from 'reactstrap';\nimport Mode from './Mode';\nimport './Mode.css'; //import axios from 'axios';\n//import URLStorage from '../../constants';\n\nclass ModeSelection extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      //modes: JSON.parse(localStorage.getItem(\"modes\")),\n      modes: [{\n        id: 1,\n        name: \"train\",\n        url: \"\",\n        selected: false\n      }, {\n        id: 2,\n        name: \"bus\",\n        url: \"\",\n        selected: false\n      }, {\n        id: 3,\n        name: \"metro\",\n        url: \"\",\n        selected: false\n      }, {\n        id: 4,\n        name: \"trolley\",\n        url: \"\",\n        selected: false\n      }],\n      grouping: [{\n        text: \"Multiple Separate Reports\",\n        active: false\n      }, {\n        text: \"One Grouped Report\",\n        active: false\n      }],\n      selectedModes: [],\n      periodeDone: false\n    };\n\n    this.handleSelection = idx => {\n      let copiedState = Object.assign({}, this.state);\n      copiedState.modes[idx].selected = !copiedState.modes[idx].selected;\n      this.setState(copiedState);\n      const selectedModes = copiedState.modes.filter(mode => mode.selected === true);\n      localStorage.setItem(\"selectedModes\", JSON.stringify(selectedModes)); // -------- ARRAY OF BOOLEAN FOR COMPLETED ANSWER ----------------\n\n      const completedModes = JSON.parse(localStorage.getItem(\"selectedModes\")).map(mode => {\n        return false;\n      });\n      localStorage.setItem(\"completedModes\", JSON.stringify(completedModes));\n      this.setState({\n        completedModes\n      });\n    };\n  }\n\n  onRadioBtnClick(idx) {\n    this.setState({\n      rSelected: idx\n    });\n    localStorage.setItem(\"group\", idx);\n  }\n\n  componentDidMount() {\n    // let pathToCheck = `${localStorage.getItem(\"ptoid\")}/${JSON.parse(localStorage.getItem(\"periods\")).currentPeriod}`\n    // axios.get(`${URLStorage.API_URL}/lastPeriode/${pathToCheck}`)\n    // .then(res => {\n    //     if (res.data.message === \"DONE\") {\n    //         this.setState({periodeDone : true})\n    //     } else if(res.data.message === \"NOTDONE\"){\n    //         this.setState({periodeDone : false})\n    //     }\n    // }) \n    // -------------- TESTING : UNCOMMENT WHEN SERVER DOWN ----------------\n    const localmodes = JSON.parse(localStorage.getItem(\"modes\"));\n    this.setState({\n      modes: localmodes\n    });\n    console.log(\"LOCAL MODES \", localmodes); // -------------- TESTING : COMMENT WHEN SERVER DOWN ----------------\n    // axios.get(`${URLStorage.API_URL}/mode`)\n    //     .then(res => {\n    //         if (res) {\n    //             const modes = res.data;\n    //             this.setState({ modes });\n    //             localStorage.setItem(\"modes\", JSON.stringify(modes));                   \n    //         }\n    //     })\n    //     .then(() => {\n    //         if (!this.state.modes){\n    //         const localmodes = JSON.parse(localStorage.getItem(\"modes\"));\n    //         this.setState({ modes: localmodes })}\n    //     })\n    // -------------------------------------------------------------------   \n  }\n\n  render() {\n    // if (localStorage.getItem('group'))    {\n    //     return <Redirect to={{ pathname: '/mainform' }}/>\n    //   }\n    if (!this.state.modes) {\n      return null;\n    }\n\n    return this.state.periodeDone === false ? React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      style: {\n        textAlign: \"center\",\n        margin: \"20px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \"Select Transports to Report For\"), React.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"space-around\",\n        padding: \"40px\",\n        margin: \"40px\",\n        flexWrap: \"wrap\",\n        alignItems: \"flex-end\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, this.state.modes.map((mode, idx) => React.createElement(Mode, {\n      key: idx,\n      id: mode.id,\n      name: mode.name,\n      url: mode,\n      handleSelection: () => this.handleSelection(idx),\n      selected: mode.selected,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }))), this.state.modes.filter(mode => mode.selected === true).length > 0 && React.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        width: \"50vw\",\n        alignItems: \"space-around\",\n        margin: \"auto\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      style: {\n        textAlign: \"center\",\n        margin: \"20px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \"Access to Report Form\"), React.createElement(ButtonGroup, {\n      style: {\n        display: \"flex\",\n        justifyContent: \"space-around\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, this.state.grouping.map((item, idx) => React.createElement(Link, {\n      key: idx,\n      to: {\n        pathname: \"/formpage\",\n        state: {\n          modes: this.state,\n          group: idx\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(Button, {\n      className: \"selection-btn\",\n      key: idx,\n      style: {\n        margin: \"20px\",\n        minWidth: \"100px\",\n        width: \"300px\"\n      },\n      color: \"success\",\n      size: \"lg\",\n      onClick: () => this.onRadioBtnClick(idx),\n      active: this.state.rSelected === idx,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, item.text)))))) : React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \"Form already sent for this period\");\n  }\n\n}\n\nexport default ModeSelection;","map":{"version":3,"sources":["C:\\Users\\aggad.samy\\Workspace\\uitp-service\\Front-end\\src\\components\\ModeSelection\\ModeSelection.js"],"names":["Link","React","Component","Container","ButtonGroup","Button","Mode","ModeSelection","state","modes","id","name","url","selected","grouping","text","active","selectedModes","periodeDone","handleSelection","idx","copiedState","Object","assign","setState","filter","mode","localStorage","setItem","JSON","stringify","completedModes","parse","getItem","map","onRadioBtnClick","rSelected","componentDidMount","localmodes","console","log","render","textAlign","margin","display","justifyContent","padding","flexWrap","alignItems","length","flexDirection","width","item","pathname","group","minWidth"],"mappings":"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","sourcesContent":["import { Link } from 'react-router-dom';\nimport React, { Component } from 'react';\nimport { Container, ButtonGroup, Button } from 'reactstrap';\nimport Mode from './Mode';\nimport './Mode.css'\n//import axios from 'axios';\n//import URLStorage from '../../constants';\n\n\n\nclass ModeSelection extends Component {\n    state = {\n        //modes: JSON.parse(localStorage.getItem(\"modes\")),\n        modes: [{ id: 1, name: \"train\", url: \"\", selected: false }, { id: 2, name: \"bus\", url: \"\", selected: false }, { id: 3, name: \"metro\", url: \"\", selected: false }, { id: 4, name: \"trolley\", url: \"\", selected: false }],\n        grouping: [{ text: \"Multiple Separate Reports\", active: false }, { text: \"One Grouped Report\", active: false }],\n        selectedModes: [],\n        periodeDone: false\n        \n    };\n\n    onRadioBtnClick(idx) {\n        this.setState({ rSelected: idx });\n        localStorage.setItem(\"group\", idx);\n    }\n\n    componentDidMount() {\n        // let pathToCheck = `${localStorage.getItem(\"ptoid\")}/${JSON.parse(localStorage.getItem(\"periods\")).currentPeriod}`\n        // axios.get(`${URLStorage.API_URL}/lastPeriode/${pathToCheck}`)\n        // .then(res => {\n        //     if (res.data.message === \"DONE\") {\n        //         this.setState({periodeDone : true})\n        //     } else if(res.data.message === \"NOTDONE\"){\n        //         this.setState({periodeDone : false})\n        //     }\n        // }) \n    // -------------- TESTING : UNCOMMENT WHEN SERVER DOWN ----------------\n            const localmodes = JSON.parse(localStorage.getItem(\"modes\"));\n            this.setState({ modes: localmodes });\n            console.log(\"LOCAL MODES \", localmodes)\n\n    // -------------- TESTING : COMMENT WHEN SERVER DOWN ----------------\n            // axios.get(`${URLStorage.API_URL}/mode`)\n            //     .then(res => {\n            //         if (res) {\n            //             const modes = res.data;\n            //             this.setState({ modes });\n            //             localStorage.setItem(\"modes\", JSON.stringify(modes));                   \n            //         }\n            //     })\n            //     .then(() => {\n            //         if (!this.state.modes){\n            //         const localmodes = JSON.parse(localStorage.getItem(\"modes\"));\n            //         this.setState({ modes: localmodes })}\n            //     })\n\n    // -------------------------------------------------------------------   \n    \n    }\n\n    handleSelection = (idx) => {\n        let copiedState = Object.assign({}, this.state);\n        copiedState.modes[idx].selected = !copiedState.modes[idx].selected;\n\n        this.setState(copiedState);\n\n        const selectedModes = copiedState.modes.filter(mode => mode.selected === true);\n        localStorage.setItem(\"selectedModes\", JSON.stringify(selectedModes));\n        \n        \n\n        // -------- ARRAY OF BOOLEAN FOR COMPLETED ANSWER ----------------\n        const completedModes = JSON.parse(localStorage.getItem(\"selectedModes\")).map(mode => {\n            return false\n        });\n        localStorage.setItem(\"completedModes\", JSON.stringify(completedModes));\n        this.setState({completedModes});\n\n                \n    };\n    \n    render() {\n        // if (localStorage.getItem('group'))    {\n        //     return <Redirect to={{ pathname: '/mainform' }}/>\n        //   }\n        if(!this.state.modes){\n            return null;\n        }\n        return (\n            this.state.periodeDone === false ? <Container >\n\n                <h4 style={{ textAlign: \"center\", margin: \"20px\" }}>Select Transports to Report For</h4>\n\n                <div style={{ display: \"flex\", justifyContent: \"space-around\", padding: \"40px\", margin: \"40px\", flexWrap: \"wrap\", alignItems: \"flex-end\",  }}>\n                    {this.state.modes.map((mode, idx) =>\n\n                        <Mode key={idx} id={mode.id} name={mode.name} url={mode} handleSelection={() => this.handleSelection(idx)} selected={mode.selected} />\n                    )}\n                </div>\n\n                {this.state.modes.filter(mode => mode.selected === true).length > 0 &&\n                <div style={{display: \"flex\", flexDirection: \"column\", width: \"50vw\", alignItems: \"space-around\", margin: \"auto\"}}>\n                 <h4 style={{ textAlign: \"center\", margin: \"20px\" }}>Access to Report Form</h4>\n                    <ButtonGroup style={{ display: \"flex\", justifyContent: \"space-around\" }}>\n\n                                            \n                        {this.state.grouping.map((item, idx) =>\n                            <Link key={idx} to={{pathname:\"/formpage\", state : {modes: this.state, group: idx}}}>\n                                <Button className=\"selection-btn\" key={idx} style={{ margin: \"20px\", minWidth: \"100px\", width: \"300px\" }} color=\"success\" size=\"lg\" onClick={() => this.onRadioBtnClick(idx)} active={this.state.rSelected === idx}>{item.text}</Button>\n                            </Link>\n                            )}\n                          \n\n                    </ButtonGroup>\n                </div>    \n                }\n\n               \n\n\n            </Container> : <h3>Form already sent for this period</h3>\n            \n        \n        );\n    }\n}\n\nexport default ModeSelection;\n"]},"metadata":{},"sourceType":"module"}