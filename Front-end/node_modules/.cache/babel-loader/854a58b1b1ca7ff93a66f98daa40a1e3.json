{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aggad.samy\\\\Workspace\\\\UITP-React-Spring\\\\Front-end\\\\src\\\\components\\\\FormPage\\\\FormPage.js\";\nimport Mode from '../ModeSelection/Mode';\nimport MainForm from './Mainform/MainForm';\nimport Legend from './Mainform/Legend/Legend';\nimport React from 'react';\nimport { Container } from 'reactstrap';\nexport default class FormPage extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      selectedCat: 1,\n      selectedMode: 0,\n      group: null,\n      stateMode: []\n    };\n\n    this.handleSelection = idx => e => {\n      this.setState({\n        selectedMode: idx\n      });\n    };\n\n    this.selectCat = e => {\n      this.setState({\n        selectedCat: e.target.value\n      });\n    };\n  }\n\n  // async retrieveData(){\n  //     try {\n  //         await var stateMode = JSON.parse(localStorage.getItem(\"stateMode\"))\n  //     } catch (error) {\n  //     }\n  //     return stateMode\n  // }\n  componentWillMount() {\n    let getGroup = localStorage.getItem(\"group\");\n    const asyncLocalStorage = {\n      setItem: async function (key, value) {\n        await null;\n        return localStorage.setItem(key, value);\n      },\n      getItem: async function (key) {\n        await null;\n        return localStorage.getItem(key);\n      }\n    };\n    var stateMode = asyncLocalStorage.getItem(\"stateMode\"); // console.log(stateMode)\n\n    stateMode.then(function (value) {\n      console.log(\"async storage \", JSON.parse(value));\n    });\n    console.log(\"state mod value\", JSON.stringify(stateMode));\n    this.setState({\n      group: getGroup,\n      stateMode: stateMode\n    });\n  }\n\n  componentDidMount() {\n    localStorage.setItem(\"stateMode\", JSON.stringify(this.props.location.state));\n    var stateModeN = localStorage.getItem(\"stateMode\");\n    console.log(\"Normal storage \", JSON.parse(stateModeN)); // console.log(\"state mode \", stateMode)\n    // console.log(\"THE STATE \", this.state)\n  }\n\n  render() {\n    //const selectedtransport = this.props.location.state.modes.modes.filter(item => item.selected === true);\n    console.log(\"group \", this.state.stateMode); // console.log(\"group state \", this.props.location)\n\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(Legend, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: {\n        display: \"block\",\n        margin: \"auto\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, this.props.location.state.group === 0 ? \"Separate\" : \"Grouped\", \" Reporting for\"), React.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"start\",\n        marginBottom: \"40px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, this.props.location.state.group === 0 ? this.props.location.state.modes.modes.filter(mode => mode.selected === true).map((mode, idx) => React.createElement(Mode, {\n      key: idx,\n      id: mode.id,\n      index: idx,\n      name: mode.name,\n      url: mode,\n      selected: this.state.selectedMode === idx ? true : false,\n      maxHeight: \"50px\",\n      handleSelection: this.handleSelection(idx),\n      grouped: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    })) : this.props.location.state.modes.modes.filter(mode => mode.selected === true).map((mode, idx) => React.createElement(Mode, {\n      key: idx,\n      id: mode.id,\n      index: idx,\n      name: mode.name,\n      url: mode,\n      selected: true,\n      maxHeight: \"50px\",\n      grouped: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    })))), this.props.location.state.modes.modes.filter(mode => mode.selected === true).map((mode, idx) => idx === this.state.selectedMode && React.createElement(MainForm, {\n      key: idx,\n      id: mode.id,\n      group: this.props.location.state.group,\n      index: idx,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }))));\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\aggad.samy\\Workspace\\UITP-React-Spring\\Front-end\\src\\components\\FormPage\\FormPage.js"],"names":["Mode","MainForm","Legend","React","Container","FormPage","Component","state","selectedCat","selectedMode","group","stateMode","handleSelection","idx","e","setState","selectCat","target","value","componentWillMount","getGroup","localStorage","getItem","asyncLocalStorage","setItem","key","then","console","log","JSON","parse","stringify","componentDidMount","props","location","stateModeN","render","display","margin","justifyContent","marginBottom","modes","filter","mode","selected","map","id","name"],"mappings":"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","sourcesContent":["import Mode from '../ModeSelection/Mode'\nimport MainForm from './Mainform/MainForm'\nimport Legend from './Mainform/Legend/Legend'\nimport React from 'react';\nimport { Container } from 'reactstrap';\n\n\n\nexport default class FormPage extends React.Component {\n    state = {\n        selectedCat: 1,\n        selectedMode: 0,\n        group: null, \n        stateMode: [],\n    };\n\n    handleSelection = (idx) => (e) => {\n        this.setState({ selectedMode: idx });\n    };\n\n    selectCat = (e) => {\n        this.setState({ selectedCat: e.target.value })\n    }\n\n    \n    // async retrieveData(){\n    //     try {\n             \n    //         await var stateMode = JSON.parse(localStorage.getItem(\"stateMode\"))\n    //     } catch (error) {\n            \n    //     }\n        \n    //     return stateMode\n    // }\n\n    componentWillMount(){\n        let getGroup = localStorage.getItem(\"group\")\n        \n        const asyncLocalStorage = {\n            setItem: async function (key, value) {\n                await null;\n                return localStorage.setItem(key, value);\n            },\n            getItem: async function (key) {\n                await null;\n                return localStorage.getItem(key);\n            }\n        };\n        var stateMode = asyncLocalStorage.getItem(\"stateMode\")\n        \n        // console.log(stateMode)\n        stateMode.then(function(value) {\n            console.log(\"async storage \", JSON.parse(value)) \n        })\n        console.log(\"state mod value\", JSON.stringify(stateMode))\n        this.setState({\n            group: getGroup,\n            stateMode: stateMode\n        })\n    }\n    componentDidMount(){\n        \n        localStorage.setItem(\"stateMode\", JSON.stringify(this.props.location.state)) \n        var stateModeN = localStorage.getItem(\"stateMode\")  \n        console.log(\"Normal storage \", JSON.parse(stateModeN))\n        \n        // console.log(\"state mode \", stateMode)\n        // console.log(\"THE STATE \", this.state)\n    }\n\nrender() {\n        //const selectedtransport = this.props.location.state.modes.modes.filter(item => item.selected === true);\n        console.log(\"group \", this.state.stateMode)\n        // console.log(\"group state \", this.props.location)\n        return (\n            <React.Fragment>\n                <Container>\n                    <Legend /> \n\n                    <div style={{ display: \"block\", margin: \"auto\" }}>\n                        <h4>{this.props.location.state.group === 0 ? \"Separate\" : \"Grouped\"} Reporting for</h4>\n\n                        <div style={{ display: \"flex\", justifyContent: \"start\", marginBottom: \"40px\" }}>\n                            {this.props.location.state.group === 0 ?\n                            \n                            this.props.location.state.modes.modes.filter(mode => mode.selected === true).map((mode, idx) =>\n                            <Mode key={idx} id={mode.id} index={idx} name={mode.name} url={mode} selected={this.state.selectedMode === idx ? true : false} maxHeight=\"50px\" handleSelection={this.handleSelection(idx)} grouped={false} />)\n                            :                             \n                             this.props.location.state.modes.modes.filter(mode => mode.selected === true).map((mode, idx) =>\n                             <Mode key={idx} id={mode.id} index={idx} name={mode.name} url={mode} selected={true} maxHeight=\"50px\" grouped={true}  />) }  \n                        </div>\n\n                        \n                    </div>\n\n\n                    {this.props.location.state.modes.modes.filter(mode => mode.selected === true).map((mode, idx) => idx === this.state.selectedMode &&\n                        <MainForm key={idx} id={mode.id} group={this.props.location.state.group} index={idx} />\n                    )}\n\n\n                </Container>\n            </React.Fragment>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}