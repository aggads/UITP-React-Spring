{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aggad.samy\\\\Workspace\\\\UITP-React-Spring\\\\Front-end\\\\src\\\\components\\\\FormPage\\\\Mainform\\\\MainForm.js\";\nimport Frequency from './Frequency/Radio';\nimport Comments from './Comment/Comment';\nimport Categories from './Categories/Categories';\nimport URLStorage from '../../../constants';\nimport { Link } from 'react-router-dom';\nimport '../../../App.css';\nimport axios from 'axios';\nimport React from 'react';\nimport ErrorBoundary from '../Mainform/ErrorBoundary';\nimport { Container, Row, Col, Button, Form, FormGroup } from 'reactstrap';\nimport './MainForm.css';\nimport DropdownMotivation from './Motivation/Motivation';\nexport default class MainForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSelection = idx => e => {\n      this.setState({\n        selectedMode: idx\n      });\n    };\n\n    this.next = () => {\n      let id = this.state.id + 1;\n      this.fetchQuestions(id);\n      this.setState(prevState => ({\n        selectedCat: prevState.selectedCat + 1,\n        id: prevState.id + 1\n      }));\n    };\n\n    this.prev = () => {\n      let id = this.state.id - 1;\n      this.fetchQuestions(id);\n      this.setState(prevState => ({\n        selectedCat: prevState.selectedCat - 1,\n        id: prevState.id - 1\n      }));\n    };\n\n    this.fetchQuestions = id => {\n      axios.get(\"\".concat(URLStorage.API_URL, \"/getAllQuestions/\").concat(id)).then(res => {\n        const data = res.data;\n        this.setState({\n          question: data,\n          isLoaded: true\n        });\n      });\n    };\n\n    this.anyChange = id => e => {\n      const inputName = e.target.name;\n      const inputValue = e.target.value;\n      let entries = Object.assign({}, this.state);\n      const answers = entries.answers;\n      answers.map(answer => answer.questionID === id ? answer[inputName] = inputValue : undefined);\n      this.setState(entries);\n      localStorage.setItem(this.props.id, JSON.stringify(this.state.answers)); // ------------ SWITCH BOOLEAN TO COMPLETED FOR CURRENT MODE ---------------\n\n      if (this.state.allData.filter(answer => answer.frequency === null).length === 0) {\n        let completeMode = JSON.parse(localStorage.getItem(\"completedModes\"));\n        completeMode[this.props.index] = true;\n\n        if (this.props.group) {\n          var dummieArray = [];\n          completeMode.map(item => dummieArray.push(true));\n          localStorage.setItem(\"completedModes\", JSON.stringify(dummieArray));\n        } else {\n          localStorage.setItem(\"completedModes\", JSON.stringify(completeMode));\n        }\n      }\n    };\n\n    this.selectCat = e => {\n      this.setState({\n        selectedCat: e.target.value\n      });\n      localStorage.setItem(this.props.id, JSON.stringify(this.state.answers));\n    };\n\n    this.frequencyCallback = regularityCall => {\n      this.setState({\n        regularityFromChild: regularityCall\n      }); //console.log(\"regularity call \", regularityCall)\n    };\n\n    this.getFrequency = frequencyCallbackFromChild => {\n      // console.log('From getFrequency in MainForm:')\n      // console.log(frequencyCallbackFromChild)\n      this.setState({\n        frequencyFromChild: frequencyCallbackFromChild\n      });\n    };\n\n    this.getMotivation = motivationCallbackFromChild => {\n      // console.log('From getMotivation in MainForm:')\n      // console.log(motivationCallbackFromChild)\n      this.setState({\n        motivationFromChild: motivationCallbackFromChild\n      });\n    };\n\n    this.state = {\n      question: [],\n      id: 1,\n      allData: [],\n      answers: [],\n      result: [],\n      value: [],\n      selectedCat: 1,\n      selectedMode: 0,\n      dataGet: [],\n      incidentName: \"\",\n      frequencyFromChild: 0,\n      comment: \"\",\n      motivationFromChild: null // this.handleChange = this.handleChange.bind(this)\n\n    };\n  }\n\n  getAllStorage() {\n    var archive = [],\n        keys = Object.keys(localStorage),\n        i = 0,\n        key;\n\n    for (; key = keys[i]; i++) {\n      archive.push(key + '=' + localStorage.getItem(key));\n    }\n\n    return console.log(archive);\n  }\n\n  async handleClick(question) {\n    if (this.state.allData.length) {\n      var getQuestion = this.state.allData.find(function (data, id) {\n        console.log(\"get question \", getQuestion);\n\n        if (data.id === question.id) {\n          return data;\n        } else {\n          return false;\n        }\n      });\n\n      if (getQuestion) {\n        var indexOf = this.state.allData.indexOf(getQuestion);\n        console.log(\"index of \", indexOf);\n\n        for (var key in getQuestion) {\n          if (getQuestion[key] === question[key] || getQuestion[key] === undefined) {\n            getQuestion[key] = question[key];\n            await this.state.allData.splice(indexOf, 1, question);\n            localStorage.setItem(\"bigItem\", JSON.stringify(this.state.allData));\n          }\n        }\n      } else {\n        await this.setState({\n          allData: [this.state.allData, question]\n        });\n        localStorage.setItem(\"bigItem\", JSON.stringify(this.state.allData));\n      }\n    } else {\n      await this.setState({\n        allData: [question]\n      });\n      localStorage.setItem(\"bigItem\", JSON.stringify(this.state.allData));\n    }\n\n    await localStorage.setItem(\"bigItem\", JSON.stringify(this.state.allData));\n  }\n\n  componentDidMount() {\n    var bigItem = JSON.parse(localStorage.getItem(\"bigItem\"));\n    this.fetchQuestions(1);\n    const transportId = this.props.id;\n    var selected = localStorage.getItem(\"selected\");\n    this.setState({\n      modeID: transportId,\n      selected: selected\n    });\n\n    if (this.state.allData.filter(answer => answer.frequency === null).length === 0) {\n      let completeMode = JSON.parse(localStorage.getItem(\"completedModes\"));\n      completeMode[this.props.index] = true;\n\n      if (this.props.group) {\n        var dummieArray = [];\n        completeMode.map(item => dummieArray.push(true));\n        localStorage.setItem(\"completedModes\", JSON.stringify(dummieArray));\n      } else {\n        localStorage.setItem(\"completedModes\", JSON.stringify(completeMode));\n      }\n    }\n  }\n\n  // handleOptionSelect(e){\n  //     this.setState({ selected : e.target.value });\n  //     localStorage.setItem(\"selected\", e.target.value);\n  //   }\n  componentWillMount() {\n    var bigItem = JSON.parse(localStorage.getItem(\"bigItem\"));\n    var questionStorage = localStorage.getItem(\"question\");\n    var getData = JSON.parse(localStorage.getItem(\"\".concat(questionStorage)));\n    var selectedMode = JSON.parse(localStorage.getItem(\"selectedModes\"));\n    var selectedModeName = [];\n\n    for (var i in selectedMode) {\n      selectedModeName.push(selectedMode[i].name);\n    }\n\n    if (bigItem) {\n      bigItem.selectedMode = selectedModeName;\n    } else {\n      bigItem = [];\n    } // if(this.state.allData.length === 0 || this.state.allData.length < 60){\n    //     this.state.allData.indexOf(questionParent) === -1 ? this.state.allData.push(questionParent) : console.log(\"This item already exists\");\n    // }\n    // this.setState({ allData: bigItem })\n\n\n    this.setState({\n      allData: bigItem,\n      dataGet: getData\n    });\n  }\n\n  render() {\n    // NEXT / SUBMIT BUTTON SWITCH\n    // console.log(\"THE STATE \", this.state.allData)\n    const nextSubmit = this.state.selectedCat === 5 ? // || (parseInt((localStorage.getItem(\"group\")) === 1)\n    JSON.parse(localStorage.getItem(\"completedModes\")).filter(item => item === false).length === 0 ? React.createElement(Link, {\n      to: {\n        pathname: \"/confirmation\",\n        state: {\n          answers: this.state.allData\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.submit,\n      className: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, \"Submit\")) : React.createElement(React.Fragment, null, React.createElement(Button, {\n      className: \"submit\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }, \"Submit\")) : React.createElement(Button, {\n      onClick: this.next,\n      className: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, \"Next\");\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"flex-end\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, this.state.selectedCat !== 1 && React.createElement(Button, {\n      style: {\n        marginRight: \"10px\"\n      },\n      onClick: this.prev,\n      className: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, \"Previous\"), nextSubmit), React.createElement(Categories, {\n      idPage: this.state.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }), this.state.question.map((question, index) => {\n      // console.log(\"STATE \", this.state.allData);\n      // var allData = this.state.allData\n      var questionParent = question;\n      this.state.incidentName = questionParent.incident.name;\n      localStorage.setItem(\"question\", question.question);\n      var questionStorage = localStorage.getItem(\"question\");\n      localStorage.setItem(\"\".concat(questionStorage), JSON.stringify(questionParent)); // var result = []\n      // for( var i = 0; i < allData.length; i++){\n      //     result.push(allData[i])\n      // }\n      // for (var i = 0;i < result.length; i++){\n      //     if(!result[i].hasOwnProperty(\"motivation\")){\n      //         result[i].motivation = \"undefined\"\n      // }else if(!result[i].hasOwnProperty(\"frequency\")){\n      //     result[i].frequency = 0\n      // }\n      // }\n\n      if (!questionParent.hasOwnProperty(\"motivation\")) {\n        questionParent.motivation = \"Undefined\";\n      } else if (!questionParent.hasOwnProperty(\"frequency\")) {\n        questionParent.frequency = 0;\n      }\n\n      if (this.state.allData.length === 0 || this.state.allData.length < 60) {\n        this.state.allData.indexOf(questionParent) === -1 ? this.state.allData.push(questionParent) : console.log(\"This item already exists\");\n      }\n\n      var answeredQuestion = this.state.allData.find(function (answer) {\n        return answer.id === question.id;\n      });\n      console.log(\"STATE \", this.state.allData);\n      return React.createElement(\"ul\", {\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        value: question.question,\n        key: index,\n        style: {\n          fontSize: \"20px\"\n        },\n        onClick: this.handleClick.bind(this, question),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        },\n        __self: this\n      }, question.question, React.createElement(DropdownMotivation, {\n        listNameFromParent: questionParent,\n        selectedCategory: answeredQuestion,\n        passValueToMainForm: this.getMotivation,\n        value: this.state.selected,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285\n        },\n        __self: this\n      }), React.createElement(Frequency, {\n        callBackFromParent: this.frequencyCallback,\n        listNameFromParent: questionParent,\n        selectedCategory: answeredQuestion,\n        passValueToMainForm: this.getFrequency,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291\n        },\n        __self: this\n      }), React.createElement(Comments, {\n        listNameFromParent: questionParent,\n        getComment: this.getBackComment,\n        selectedCategory: answeredQuestion,\n        onBlur: this.onBlur,\n        handleChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297\n        },\n        __self: this\n      })));\n    })));\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\aggad.samy\\Workspace\\UITP-React-Spring\\Front-end\\src\\components\\FormPage\\Mainform\\MainForm.js"],"names":["Frequency","Comments","Categories","URLStorage","Link","axios","React","ErrorBoundary","Container","Row","Col","Button","Form","FormGroup","DropdownMotivation","MainForm","Component","constructor","props","handleSelection","idx","e","setState","selectedMode","next","id","state","fetchQuestions","prevState","selectedCat","prev","get","API_URL","then","res","data","question","isLoaded","anyChange","inputName","target","name","inputValue","value","entries","Object","assign","answers","map","answer","questionID","undefined","localStorage","setItem","JSON","stringify","allData","filter","frequency","length","completeMode","parse","getItem","index","group","dummieArray","item","push","selectCat","frequencyCallback","regularityCall","regularityFromChild","getFrequency","frequencyCallbackFromChild","frequencyFromChild","getMotivation","motivationCallbackFromChild","motivationFromChild","result","dataGet","incidentName","comment","getAllStorage","archive","keys","i","key","console","log","handleClick","getQuestion","find","indexOf","splice","componentDidMount","bigItem","transportId","selected","modeID","componentWillMount","questionStorage","getData","selectedModeName","render","nextSubmit","pathname","submit","display","justifyContent","marginRight","questionParent","incident","hasOwnProperty","motivation","answeredQuestion","fontSize","bind","getBackComment","onBlur","handleChange"],"mappings":"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","sourcesContent":["import Frequency from './Frequency/Radio';\nimport Comments from './Comment/Comment';\nimport Categories from './Categories/Categories'\nimport URLStorage from '../../../constants';\nimport { Link } from 'react-router-dom';\nimport '../../../App.css';\nimport axios from 'axios';\nimport React from 'react';\nimport ErrorBoundary from '../Mainform/ErrorBoundary'\nimport { Container, Row, Col, Button, Form, FormGroup } from 'reactstrap';\n\nimport './MainForm.css'\nimport DropdownMotivation from './Motivation/Motivation';\n\nexport default class MainForm extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            question: [],\n            id: 1,\n            allData: [],\n            answers: [],\n            result: [],\n            value: [],\n            selectedCat: 1,\n            selectedMode: 0,\n            dataGet: [],\n            incidentName: \"\",\n            frequencyFromChild: 0,\n            comment: \"\",\n            motivationFromChild: null,\n        }\n        // this.handleChange = this.handleChange.bind(this)\n    }\n\n    getAllStorage() {\n        var archive = [],\n            keys = Object.keys(localStorage),\n            i = 0, key;\n\n        for (; key = keys[i]; i++) {\n            archive.push(key + '=' + localStorage.getItem(key));\n        }\n        return console.log(archive);\n    }\n\n    async handleClick(question) {\n        if (this.state.allData.length) {\n            var getQuestion = this.state.allData.find(function (data, id) {\n                console.log(\"get question \", getQuestion)\n                if (data.id === question.id) {\n                    return data\n                } else {\n                    return false\n                }\n            })\n            if (getQuestion) {\n                var indexOf = this.state.allData.indexOf(getQuestion);\n                console.log(\"index of \", indexOf)\n                for (var key in getQuestion) {\n                    if (getQuestion[key] === question[key] || getQuestion[key] === undefined) {\n                        getQuestion[key] = question[key]\n                        await this.state.allData.splice(indexOf, 1, question)\n                        localStorage.setItem(\"bigItem\", JSON.stringify(this.state.allData))\n                    }\n                }\n            }else {\n                await this.setState({ allData: [this.state.allData, question] })\n                localStorage.setItem(\"bigItem\", JSON.stringify(this.state.allData))\n\n            }\n        }else {\n            await this.setState({ allData: [question] })\n            localStorage.setItem(\"bigItem\", JSON.stringify(this.state.allData))\n        }\n        await localStorage.setItem(\"bigItem\", JSON.stringify(this.state.allData))\n    }\n\n    handleSelection = (idx) => (e) => {\n        this.setState({ selectedMode: idx })\n    }\n\n    next = () => {\n        let id = this.state.id + 1;\n        this.fetchQuestions(id);\n        this.setState(prevState => ({\n            selectedCat: prevState.selectedCat + 1,\n            id: prevState.id + 1,\n        }));\n    }\n    prev = () => {\n        let id = this.state.id - 1;\n        this.fetchQuestions(id);\n        this.setState(prevState => ({\n            selectedCat: prevState.selectedCat - 1,\n            id: prevState.id - 1,\n        }));\n    }\n\n    fetchQuestions = (id) => {\n        axios.get(`${URLStorage.API_URL}/getAllQuestions/${id}`)\n            .then(res => {\n                const data = res.data\n                this.setState({\n                    question: data,\n                    isLoaded: true,\n                })\n            })\n    }\n    anyChange = (id) => (e) => {\n        const inputName = e.target.name;\n        const inputValue = e.target.value;\n        let entries = Object.assign({}, this.state);\n        const { answers } = entries;\n        answers.map(answer => answer.questionID === id ? answer[inputName] = inputValue : undefined);\n        this.setState(entries);\n        localStorage.setItem(this.props.id, JSON.stringify(this.state.answers));\n\n        // ------------ SWITCH BOOLEAN TO COMPLETED FOR CURRENT MODE ---------------\n\n        if (this.state.allData.filter(answer => answer.frequency === null).length === 0) {\n\n            let completeMode = JSON.parse(localStorage.getItem(\"completedModes\"));\n            completeMode[this.props.index] = true;\n\n            if (this.props.group) {\n                var dummieArray = [];\n                completeMode.map(item => dummieArray.push(true));\n                localStorage.setItem(\"completedModes\", JSON.stringify(dummieArray));\n\n            } else {\n                localStorage.setItem(\"completedModes\", JSON.stringify(completeMode));\n            }\n        }\n    }\n\n    selectCat = (e) => {\n        this.setState({ selectedCat: e.target.value })\n        localStorage.setItem(this.props.id, JSON.stringify(this.state.answers));\n    }\n    frequencyCallback = (regularityCall) => {\n        this.setState({\n            regularityFromChild: regularityCall\n        })\n        //console.log(\"regularity call \", regularityCall)\n    }\n    componentDidMount() {\n        var bigItem = JSON.parse(localStorage.getItem(\"bigItem\"))\n        this.fetchQuestions(1);\n        const transportId = this.props.id;\n        var selected = localStorage.getItem(\"selected\");\n        this.setState({ modeID: transportId, selected : selected })\n        if (this.state.allData.filter(answer => answer.frequency === null).length === 0) {\n            let completeMode = JSON.parse(localStorage.getItem(\"completedModes\"));\n            completeMode[this.props.index] = true;\n            if (this.props.group) {\n                var dummieArray = [];\n                completeMode.map(item => dummieArray.push(true));\n                localStorage.setItem(\"completedModes\", JSON.stringify(dummieArray));\n            } else {\n                localStorage.setItem(\"completedModes\", JSON.stringify(completeMode));\n            }\n        }\n    }\n\n    getFrequency = (frequencyCallbackFromChild) => {\n        // console.log('From getFrequency in MainForm:')\n        // console.log(frequencyCallbackFromChild)\n        this.setState({\n            frequencyFromChild: frequencyCallbackFromChild\n        })\n    }\n\n    getMotivation = (motivationCallbackFromChild) => {\n        // console.log('From getMotivation in MainForm:')\n        // console.log(motivationCallbackFromChild)\n        this.setState({\n            motivationFromChild: motivationCallbackFromChild\n        })\n    }\n    // handleOptionSelect(e){\n    //     this.setState({ selected : e.target.value });\n    //     localStorage.setItem(\"selected\", e.target.value);\n    //   }\n\n    componentWillMount(){\n        var bigItem = JSON.parse(localStorage.getItem(\"bigItem\"))\n        var questionStorage = localStorage.getItem(\"question\");\n        var getData = JSON.parse(localStorage.getItem(`${questionStorage}`))\n        var selectedMode = JSON.parse(localStorage.getItem(\"selectedModes\"))\n        var selectedModeName = [];\n        for (var i in selectedMode) {\n            selectedModeName.push(selectedMode[i].name)\n        }\n        if (bigItem) {\n            bigItem.selectedMode = selectedModeName\n        }\n        else {\n            bigItem = []\n        }\n        // if(this.state.allData.length === 0 || this.state.allData.length < 60){\n        //     this.state.allData.indexOf(questionParent) === -1 ? this.state.allData.push(questionParent) : console.log(\"This item already exists\");\n        // }\n        // this.setState({ allData: bigItem })\n        this.setState({ \n            allData: bigItem, \n            dataGet: getData, \n        })\n        \n    }\n        render() {\n            // NEXT / SUBMIT BUTTON SWITCH\n            // console.log(\"THE STATE \", this.state.allData)\n            const nextSubmit = this.state.selectedCat === 5 ?\n                // || (parseInt((localStorage.getItem(\"group\")) === 1)\n                (JSON.parse(localStorage.getItem(\"completedModes\")).filter(item => item === false).length === 0) ?\n                    <Link to={{ \n                        pathname: \"/confirmation\", \n                        state: { answers: this.state.allData } }}>\n                        <Button onClick={this.submit} className=\"submit\" >Submit</Button>\n                    </Link>\n                    : <>\n                        <Button className=\"submit\" disabled>Submit</Button>\n                    </>\n                :\n                <Button onClick={this.next} className=\"submit\">Next</Button>\n            return (\n                <React.Fragment>\n                    <Container>\n                        <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n                            {this.state.selectedCat !== 1 && <Button style={{ marginRight: \"10px\" }} onClick={this.prev} className=\"submit\" >Previous</Button>}\n                            {nextSubmit}\n                        </div>\n                        <Categories idPage={this.state.id} />\n                        <br />\n                        <br />\n                        {this.state.question.map((question, index) => {\n                            // console.log(\"STATE \", this.state.allData);\n                            \n                            // var allData = this.state.allData\n                            var questionParent = question\n                            this.state.incidentName = questionParent.incident.name\n                            localStorage.setItem(\"question\", question.question)\n                            var questionStorage = localStorage.getItem(\"question\")\n                            localStorage.setItem(`${questionStorage}`, JSON.stringify(questionParent))\n                            // var result = []\n                            // for( var i = 0; i < allData.length; i++){\n                            //     result.push(allData[i])\n                            // }\n                            // for (var i = 0;i < result.length; i++){\n                            //     if(!result[i].hasOwnProperty(\"motivation\")){\n                            //         result[i].motivation = \"undefined\"\n                            // }else if(!result[i].hasOwnProperty(\"frequency\")){\n                            //     result[i].frequency = 0\n                            // }\n                            // }\n                            if(!questionParent.hasOwnProperty(\"motivation\")){\n                                questionParent.motivation = \"Undefined\"\n                            }else if(!questionParent.hasOwnProperty(\"frequency\")){\n                                questionParent.frequency = 0\n                                \n                            }\n                        if(this.state.allData.length === 0 || this.state.allData.length < 60){\n                            this.state.allData.indexOf(questionParent) === -1 ? this.state.allData.push(questionParent) : console.log(\"This item already exists\");\n                        }\n                        var answeredQuestion = this.state.allData.find(function(answer) {\n                            return answer.id === question.id\n                        })\n                       \n                        console.log(\"STATE \", this.state.allData);\n\n                            return (\n                                <ul\n                                    key={index}\n                                >\n                                    <li\n                                        value={question.question}\n                                        key={index}\n                                        style={{ fontSize: \"20px\" }}\n                                        onClick={this.handleClick.bind(this, question)}\n                                    >\n                                        {\n                                            question.question\n                                        }\n                                        <DropdownMotivation\n                                            listNameFromParent={questionParent}\n                                            selectedCategory = {answeredQuestion}\n                                            passValueToMainForm={this.getMotivation}\n                                            value={this.state.selected}\n                                        />\n                                        <Frequency\n                                            callBackFromParent={this.frequencyCallback}\n                                            listNameFromParent={questionParent}\n                                            selectedCategory={answeredQuestion}\n                                            passValueToMainForm={this.getFrequency}   \n                                        />\n                                        <Comments\n                                            listNameFromParent={questionParent}\n                                            getComment={this.getBackComment}\n                                            selectedCategory={answeredQuestion}\n                                            onBlur={this.onBlur}\n                                            handleChange={this.handleChange}\n                                        />\n                                    </li>\n                                </ul>\n                            )\n                        })}\n                    </Container>\n                </React.Fragment>\n            )\n        }\n    }\n"]},"metadata":{},"sourceType":"module"}