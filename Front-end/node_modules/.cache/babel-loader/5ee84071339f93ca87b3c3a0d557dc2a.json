{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aggad.samy\\\\Workspace\\\\UITP-React-Spring\\\\Front-end\\\\src\\\\components\\\\FormPage\\\\Mainform\\\\MainForm.js\";\nimport Frequency from './Frequency/Radio';\nimport Comments from './Comment/Comment'; // import Legend from './Legend/Legend';\n\nimport Motivation from './Motivation/Motivation';\nimport Categories from './Categories/Categories';\nimport URLStorage from '../../../constants';\nimport { Link } from 'react-router-dom';\nimport uniqueid from 'uniqid'; // import  ConfirmModal  from '../Modal';\n\nimport '../../../App.css';\nimport axios from 'axios';\nimport React from 'react';\nimport { Container, Row, Col, Button, Form, FormGroup } from 'reactstrap';\nimport './MainForm.css';\nimport DropdownExampleCompact from './Motivation/Motivation';\nimport { ButtonGroup, Dropdown } from 'semantic-ui-react';\nimport DropdownMotivation from './Motivation/Motivation';\nexport default class MainForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = (e, getData) => {\n      //e.preventDefault();\n      var bigItem = JSON.parse(localStorage.getItem(\"bigItem\"));\n\n      if (!bigItem) {\n        bigItem = [];\n      }\n\n      var selectedMode = JSON.parse(localStorage.getItem(\"selectedModes\"));\n      var selectedModeName = [];\n\n      for (var i in selectedMode) {\n        selectedModeName.push(selectedMode[i].name);\n      }\n\n      bigItem.selectedMode = selectedModeName;\n      var allData = this.state.allData;\n      var copiedState = this.state;\n      copiedState = Array.from(Object.create(allData)); //console.log(\"COPIED STATE\", copiedState)\n\n      var modified = false;\n      var id = 0;\n\n      if (!this.state.allData) {\n        this.state.allData = [\"Something\"];\n      } else {\n        var verif = copiedState.find(function (data, id) {\n          if (data.id === getData.id) {\n            var indexOf = copiedState.indexOf(data);\n            console.log(\"INDEX OF \", indexOf);\n\n            for (var key in data) {\n              if (data[key] === getData[key] || data[key] === undefined) {\n                data[key] = getData[key];\n                modified = true;\n                copiedState.splice(indexOf, 1);\n                console.log(\"copied state after existing question  \", copiedState);\n              }\n            }\n\n            return true;\n          } else {\n            console.log(\"HELLO\");\n            return false;\n          }\n        });\n\n        if (!verif || modified) {\n          copiedState.push(getData);\n          this.setState({\n            allData: copiedState\n          });\n          localStorage.setItem(\"bigItem\", JSON.stringify(copiedState));\n          console.log(\"Console log state \", this.state.allData);\n        }\n      }\n    };\n\n    this.handleSelection = idx => e => {\n      this.setState({\n        selectedMode: idx\n      });\n    };\n\n    this.next = () => {\n      let id = this.state.id + 1;\n      this.fetchQuestions(id);\n      this.setState(prevState => ({\n        selectedCat: prevState.selectedCat + 1,\n        id: prevState.id + 1\n      }));\n    };\n\n    this.prev = () => {\n      let id = this.state.id - 1;\n      this.fetchQuestions(id);\n      this.setState(prevState => ({\n        selectedCat: prevState.selectedCat - 1,\n        id: prevState.id - 1\n      }));\n    };\n\n    this.fetchQuestions = id => {\n      axios.get(\"\".concat(URLStorage.API_URL, \"/getAllQuestions/\").concat(id)).then(res => {\n        const data = res.data;\n        this.setState({\n          question: data,\n          isLoaded: true\n        });\n      });\n    };\n\n    this.test = question => {\n      var test = this.state.allData; //console.log(\"test value \", test)\n\n      if (test === null) {\n        return this.setState({\n          allData: [\"\"]\n        });\n      } else {\n        for (let i = 0; i < test.length; i++) {\n          //console.log(\"RUN SECONDE TIME BABY\", test[i].motivation)\n          //, test[i].motivation, test[i].comment, test[i].frequency\n          if (test[i].question === question) {//console.log(\"HELLLOOO \", test[i].frequency)\n            //return test[i].frequency \n            // if (test[i].frequency) {\n            //     console.log(\"frequency\", test[i].frequency)\n            //     return test[i].frequency\n            // } else if (test[i].motivation) {\n            //     console.log(\"motivation\", test[i].motivation)\n            //     return test[i].motivation\n            // } else if (test[i].comment) {\n            //     console.log(\"comment\", test[i].comment)\n            //     return test[i].comment\n            // } else {\n            //     console.log(\"Nothing\")\n            // }\n          }\n        }\n      }\n    };\n\n    this.selectCat = e => {\n      this.setState({\n        selectedCat: e.target.value\n      });\n      localStorage.setItem(this.props.id, JSON.stringify(this.state.answers));\n    };\n\n    this.frequencyCallback = regularityCall => {\n      this.setState({\n        regularityFromChild: regularityCall\n      });\n    };\n\n    this.state = {\n      // --------- TESTING : UNCOMMENT WHEN SERVER DOWN ----------------\n      categories: [],\n      motivations: [],\n      regularity: [],\n      question: [],\n      questions: [],\n      id: 1,\n      name: [],\n      incident: [],\n      test: null,\n      results: [],\n      regularityFromChild: 0,\n      // ----------------------------------------------------------------\n      allData: [],\n      answers: [],\n      value: [],\n      selectedCat: 1,\n      selectedMode: 0\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  componentDidMount() {\n    localStorage.getItem(\"frequency\", \"motivations\", \"comments\", \"questions\", \"question\");\n    this.fetchQuestions(1);\n    const transportId = this.props.id;\n    var bigItem = JSON.parse(localStorage.getItem(\"bigItem\"));\n    this.setState({\n      modeID: transportId,\n      allData: bigItem\n    });\n\n    if (this.state.allData.filter(answer => answer.frequency === null).length === 0) {\n      let completeMode = JSON.parse(localStorage.getItem(\"completedModes\"));\n      completeMode[this.props.index] = true;\n\n      if (this.props.group) {\n        var dummieArray = [];\n        completeMode.map(item => dummieArray.push(true));\n        localStorage.setItem(\"completedModes\", JSON.stringify(dummieArray));\n      } else {\n        localStorage.setItem(\"completedModes\", JSON.stringify(completeMode));\n      }\n    }\n  }\n\n  render() {\n    // NEXT / SUBMIT BUTTON SWITCH\n    console.log(\"THE STATE \", this.state.allData); //console.log(\"Copied after render \", copiedState)\n\n    const nextSubmit = this.state.selectedCat === 5 ? // || (parseInt((localStorage.getItem(\"group\")) === 1)\n    JSON.parse(localStorage.getItem(\"completedModes\")).filter(item => item === false).length === 0 ? React.createElement(Link, {\n      to: {\n        pathname: \"/confirmation\",\n        state: {\n          answers: this.state.answers\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.submit,\n      className: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    }, \"Submit\")) : React.createElement(React.Fragment, null, React.createElement(Button, {\n      className: \"submit\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    }, \"Submit\")) : React.createElement(Button, {\n      onClick: this.next,\n      className: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    }, \"Next\");\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }, React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"flex-end\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    }, this.state.selectedCat !== 1 && React.createElement(Button, {\n      style: {\n        marginRight: \"10px\"\n      },\n      onClick: this.prev,\n      className: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }, \"Previous\"), nextSubmit), React.createElement(Categories, {\n      idPage: this.state.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    }), this.state.question.map((question, index) => {\n      let questionParent = question;\n      let incidentName = questionParent.incident.name;\n      questionParent.incident = incidentName;\n      localStorage.setItem(\"question\", question.question);\n      var questionStorage = localStorage.getItem(\"question\");\n      localStorage.setItem(\"\".concat(questionStorage), JSON.stringify(questionParent));\n      var getData = JSON.parse(localStorage.getItem(\"\".concat(questionStorage)));\n      return React.createElement(\"ul\", {\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 290\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        value: question.question,\n        key: index,\n        style: {\n          fontSize: \"20px\"\n        },\n        onClick: this.handleClick(getData).bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293\n        },\n        __self: this\n      }, question.question, React.createElement(DropdownMotivation, {\n        key: index,\n        listNameFromParent: questionParent,\n        value: this.test(question.question),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 302\n        },\n        __self: this\n      }), React.createElement(Frequency, {\n        callBackFromParent: this.frequencyCallback,\n        listNameFromParent: questionParent,\n        value: this.test(question.question),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307\n        },\n        __self: this\n      }), React.createElement(Comments, {\n        listNameFromParent: questionParent,\n        getComment: this.getBackComment,\n        value: this.test(question.question),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 312\n        },\n        __self: this\n      })));\n    })));\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\aggad.samy\\Workspace\\UITP-React-Spring\\Front-end\\src\\components\\FormPage\\Mainform\\MainForm.js"],"names":["Frequency","Comments","Motivation","Categories","URLStorage","Link","uniqueid","axios","React","Container","Row","Col","Button","Form","FormGroup","DropdownExampleCompact","ButtonGroup","Dropdown","DropdownMotivation","MainForm","Component","constructor","props","handleClick","e","getData","bigItem","JSON","parse","localStorage","getItem","selectedMode","selectedModeName","i","push","name","allData","state","copiedState","Array","from","Object","create","modified","id","verif","find","data","indexOf","console","log","key","undefined","splice","setState","setItem","stringify","handleSelection","idx","next","fetchQuestions","prevState","selectedCat","prev","get","API_URL","then","res","question","isLoaded","test","length","selectCat","target","value","answers","frequencyCallback","regularityCall","regularityFromChild","categories","motivations","regularity","questions","incident","results","bind","componentDidMount","transportId","modeID","filter","answer","frequency","completeMode","index","group","dummieArray","map","item","render","nextSubmit","pathname","submit","display","justifyContent","marginRight","questionParent","incidentName","questionStorage","fontSize","getBackComment"],"mappings":"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","sourcesContent":["import Frequency from './Frequency/Radio';\nimport Comments from './Comment/Comment';\n// import Legend from './Legend/Legend';\nimport Motivation from './Motivation/Motivation'\nimport Categories from './Categories/Categories'\nimport URLStorage from '../../../constants';\nimport { Link } from 'react-router-dom';\nimport uniqueid from 'uniqid';\n// import  ConfirmModal  from '../Modal';\n\nimport '../../../App.css';\n\nimport axios from 'axios';\nimport React from 'react';\nimport { Container, Row, Col, Button, Form, FormGroup } from 'reactstrap';\n\nimport './MainForm.css'\nimport DropdownExampleCompact from './Motivation/Motivation';\nimport { ButtonGroup, Dropdown } from 'semantic-ui-react';\nimport DropdownMotivation from './Motivation/Motivation';\n\nexport default class MainForm extends React.Component {\nconstructor(props){\n    super (props)\n    this.state = {\n\n        // --------- TESTING : UNCOMMENT WHEN SERVER DOWN ----------------\n        categories: [],\n        motivations: [],\n        regularity: [],\n        question: [],\n        questions: [],\n        id: 1,\n        name: [],\n        incident: [],\n        test: null,\n        results: [],\n        regularityFromChild: 0,\n        // ----------------------------------------------------------------\n\n        allData: [],\n        answers: [],\n        value: [],\n        selectedCat: 1,\n        selectedMode: 0,\n\n    }\n    this.handleClick = this.handleClick.bind(this)\n}\n\n    handleClick = (e, getData) =>{\n        //e.preventDefault();\n\n            var bigItem = JSON.parse(localStorage.getItem(\"bigItem\"))\n            if (!bigItem) {\n                bigItem = []\n            }\n            var selectedMode = JSON.parse(localStorage.getItem(\"selectedModes\"))\n            var selectedModeName = [];\n            for (var i in selectedMode) {\n                selectedModeName.push(selectedMode[i].name)\n            }\n            bigItem.selectedMode = selectedModeName\n            var allData = this.state.allData\n            var copiedState = this.state\n            copiedState = Array.from(Object.create(allData))\n            //console.log(\"COPIED STATE\", copiedState)\n            var modified = false\n            var id = 0\n            if (!this.state.allData){\n                this.state.allData = [\"Something\"]\n            }else{\n                var verif = copiedState.find(function (data, id) {\n                    if (data.id === getData.id) {\n                        var indexOf = copiedState.indexOf(data);\n                        console.log(\"INDEX OF \", indexOf)\n                        for (var key in data) {\n                            if (data[key] === getData[key] || data[key] === undefined) {\n                                data[key] = getData[key]\n                                modified = true\n                                copiedState.splice(indexOf, 1)\n                                console.log(\"copied state after existing question  \", copiedState)\n                            }\n                        }\n                        return true\n                    } else {\n                        console.log(\"HELLO\")\n                        return false\n                    }\n                })\n                if (!verif || modified) {\n                    copiedState.push(getData)\n                    this.setState({ allData : copiedState})\n                    localStorage.setItem(\"bigItem\", JSON.stringify(copiedState))\n                    console.log(\"Console log state \", this.state.allData)\n                }\n    \n            }\n            \n    }\n\n    handleSelection = (idx) => (e) => {\n        this.setState({ selectedMode: idx });\n    };\n\n    next = () => {\n        let id = this.state.id + 1;\n        this.fetchQuestions(id);\n        this.setState(prevState => ({\n            selectedCat: prevState.selectedCat + 1,\n            id: prevState.id + 1,\n\n        }));\n\n\n    }\n    prev = () => {\n        let id = this.state.id - 1;\n        this.fetchQuestions(id);\n        this.setState(prevState => ({\n            selectedCat: prevState.selectedCat - 1,\n            id: prevState.id - 1,\n        }));\n\n    }\n\n\n    fetchQuestions = (id) => {\n        axios.get(`${URLStorage.API_URL}/getAllQuestions/${id}`)\n            .then(res => {\n                const data = res.data\n                this.setState({\n                    question: data,\n                    isLoaded: true,\n                })\n            })\n    }\n\n    test = (question) => {\n        var test = this.state.allData\n        //console.log(\"test value \", test)\n        if (test === null) {\n            return this.setState({\n                allData: [\"\"]\n            })\n        } else {\n\n            for (let i = 0; i < test.length; i++) {\n\n                //console.log(\"RUN SECONDE TIME BABY\", test[i].motivation)\n                //, test[i].motivation, test[i].comment, test[i].frequency\n                if (test[i].question === question) {\n                    //console.log(\"HELLLOOO \", test[i].frequency)\n                    //return test[i].frequency \n                    // if (test[i].frequency) {\n                    //     console.log(\"frequency\", test[i].frequency)\n                    //     return test[i].frequency\n                    // } else if (test[i].motivation) {\n                    //     console.log(\"motivation\", test[i].motivation)\n                    //     return test[i].motivation\n                    // } else if (test[i].comment) {\n                    //     console.log(\"comment\", test[i].comment)\n                    //     return test[i].comment\n                    // } else {\n                    //     console.log(\"Nothing\")\n                    // }\n\n\n                }\n\n            }\n        }\n\n\n    }\n\n\n\n    // anyChange = (id) => (e) => {\n    //     const inputName = e.target.name;\n    //     const inputValue = e.target.value;\n    //     let entries = Object.assign({}, this.state);\n    //     const { answers } = entries;\n    //     answers.map(answer => answer.questionID === id ? answer[inputName] = inputValue : undefined);\n    //     this.setState(entries);\n    //     localStorage.setItem(this.props.id, JSON.stringify(this.state.answers));\n\n    //     // ------------ SWITCH BOOLEAN TO COMPLETED FOR CURRENT MODE ---------------\n\n    //     console.log(this.state.allData)\n\n    //     if (this.state.allData.filter(answer => answer.frequency === null).length === 0) {\n\n    //         let completeMode = JSON.parse(localStorage.getItem(\"completedModes\"));\n    //         completeMode[this.props.index] = true;\n\n    //         if (this.props.group) {\n    //             var dummieArray = [];\n    //             completeMode.map(item => dummieArray.push(true));\n    //             localStorage.setItem(\"completedModes\", JSON.stringify(dummieArray));\n\n    //         } else {\n    //             localStorage.setItem(\"completedModes\", JSON.stringify(completeMode));\n    //         }\n    //     }\n    // }\n\n    //------------- Another try -----------------\n    // removeElement = (array, elem) => {  \n    //     var index = array.indexOf(elem);\n    //     if (index > -1) {\n    //         array.splice(index, 1);\n    //     }\n    // }\n    //--------------------------------------------\n\n    selectCat = (e) => {\n        this.setState({ selectedCat: e.target.value })\n        localStorage.setItem(this.props.id, JSON.stringify(this.state.answers));\n    }\n    frequencyCallback = (regularityCall) => {\n        this.setState({\n            regularityFromChild: regularityCall\n        })\n    }\n    componentDidMount() {\n        localStorage.getItem(\"frequency\", \"motivations\", \"comments\", \"questions\", \"question\")\n\n        this.fetchQuestions(1);\n\n        const transportId = this.props.id;\n\n\n        var bigItem = JSON.parse(localStorage.getItem(\"bigItem\"))\n        this.setState({ modeID: transportId, allData: bigItem })\n\n        if (this.state.allData.filter(answer => answer.frequency === null).length === 0) {\n\n            let completeMode = JSON.parse(localStorage.getItem(\"completedModes\"));\n            completeMode[this.props.index] = true;\n\n            if (this.props.group) {\n                var dummieArray = [];\n                completeMode.map(item => dummieArray.push(true));\n                localStorage.setItem(\"completedModes\", JSON.stringify(dummieArray));\n\n            } else {\n                localStorage.setItem(\"completedModes\", JSON.stringify(completeMode));\n            }\n        }\n    };\n\n\n    render() {\n        // NEXT / SUBMIT BUTTON SWITCH\n        console.log(\"THE STATE \", this.state.allData)\n        //console.log(\"Copied after render \", copiedState)\n        const nextSubmit = this.state.selectedCat === 5 ?\n            // || (parseInt((localStorage.getItem(\"group\")) === 1)\n            (JSON.parse(localStorage.getItem(\"completedModes\")).filter(item => item === false).length === 0) ?\n                <Link to={{ pathname: \"/confirmation\", state: { answers: this.state.answers } }}>\n                    <Button onClick={this.submit} className=\"submit\" >Submit</Button>\n                </Link>\n                : <>\n                    <Button className=\"submit\" disabled>Submit</Button>\n                </>\n            :\n            <Button onClick={this.next} className=\"submit\">Next</Button>;\n        return (\n            <React.Fragment>\n                <Container>\n                    <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n                        {this.state.selectedCat !== 1 && <Button style={{ marginRight: \"10px\" }} onClick={this.prev} className=\"submit\" >Previous</Button>}\n                        {nextSubmit}\n                    </div>\n                    <Categories idPage={this.state.id} />\n                    <br />\n                    <br />\n                    {this.state.question.map((question, index) => {\n                        let questionParent = question\n                        let incidentName = questionParent.incident.name\n                        questionParent.incident = incidentName\n                        localStorage.setItem(\"question\", question.question)\n                        var questionStorage = localStorage.getItem(\"question\");\n                        localStorage.setItem(`${questionStorage}`, JSON.stringify(questionParent))\n                        var getData = JSON.parse(localStorage.getItem(`${questionStorage}`))\n                       \n                        \n                        return (\n                            <ul\n                                key={index}\n                            >\n                                <li\n                                    value={question.question}\n                                    key={index}\n                                    style={{ fontSize: \"20px\" }}\n                                    onClick={ this.handleClick(getData).bind(this)}\n                                >\n                                    {\n                                        question.question\n                                    }\n                                    <DropdownMotivation\n                                        key={index}\n                                        listNameFromParent={questionParent}\n                                        value={this.test(question.question)}\n                                    />\n                                    <Frequency\n                                        callBackFromParent={this.frequencyCallback}\n                                        listNameFromParent={questionParent}\n                                        value={this.test(question.question)}\n                                    />\n                                    <Comments\n                                        listNameFromParent={questionParent}\n                                        getComment={this.getBackComment}\n                                        value={this.test(question.question)}\n                                    />\n                                </li>\n                            </ul>\n                        );\n                    })}\n                </Container>\n            </React.Fragment>\n        )\n    }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}