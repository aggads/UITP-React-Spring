{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aggad.samy\\\\Workspace\\\\UITP-React-Spring\\\\Front-end\\\\src\\\\components\\\\FormPage\\\\FormPage.js\";\nimport Mode from '../ModeSelection/Mode';\nimport MainForm from './Mainform/MainForm';\nimport Legend from './Mainform/Legend/Legend';\nimport React from 'react';\nimport { Container } from 'reactstrap';\nexport default class FormPage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSelection = idx => e => {\n      this.setState({\n        selectedMode: idx\n      });\n    };\n\n    this.selectCat = e => {\n      this.setState({\n        selectedCat: e.target.value\n      });\n    };\n\n    this.state = {\n      selectedCat: 1,\n      selectedMode: 0,\n      group: null,\n      stateMode: [],\n      modes: []\n    };\n    this.asyncLocalStorageSetItem = this.asyncLocalStorageSetItem.bind(this);\n    this.asyncLocalStorageGetItem = this.asyncLocalStorageGetItem.bind(this);\n  }\n\n  async asyncLocalStorageSetItem(key, value) {\n    await null;\n    return localStorage.setItem(key, value);\n  }\n\n  async asyncLocalStorageGetItem(key) {\n    await null;\n    return localStorage.getItem(key);\n  }\n\n  async componentWillMount() {\n    let getGroup = localStorage.getItem(\"group\"); // const asyncLocalStorage = {\n    //     setItem: async function (key, value) {\n    //         await null;\n    //         return localStorage.setItem(key, value);\n    //     },\n    //     getItem: async function (key) {\n    //         await null;\n    //         return localStorage.getItem(key);\n    //     }\n    // };\n\n    var stateMode = this.asyncLocalStorageGetItem(\"stateMode\"); // console.log(stateMode)\n\n    stateMode.then(function (value) {\n      // console.log(\"async storage \", JSON.parse(value)) \n      // this.setState({stateMode: JSON.parse(value)})\n      console.log(\"STAAAAATE \", this.state.stateMode);\n    });\n    localStorage.setItem(\"stateMode\", JSON.stringify(this.props.location.state));\n    var stateModeN = localStorage.getItem(\"stateMode\"); // console.log(\"Normal storage \", JSON.parse(stateModeN))\n    // await this.setState({stateMode: JSON.parse(stateModeN)})\n    // console.log(\"state mod value\", stateMode)\n\n    this.setState({\n      group: getGroup // modes: this.state.stateMode.modes.modes\n\n    }); //   console.log(\"THE STATE stateMode \", this.state.modes)\n  } // async componentDidMount(){\n  //     localStorage.setItem(\"stateMode\", JSON.stringify(this.props.location.state)) \n  //     var stateModeN = localStorage.getItem(\"stateMode\")  \n  //     // console.log(\"Normal storage \", JSON.parse(stateModeN))\n  //     await this.setState({stateMode: JSON.parse(stateModeN)})\n  //     // console.log(\"state mode \", stateMode)\n  //     // console.log(\"THE STATE stateMode \", this.state.stateMode.modes.modes)\n  // }\n\n\n  render() {\n    //const selectedtransport = this.props.location.state.modes.modes.filter(item => item.selected === true);\n    // console.log(\"group \", this.state.stateMode)\n    // console.log(\"group state \", this.props.location)\n    // console.log(\"hello\")\n    // console.log(\"state mode \", this.state.modes)\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(Legend, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: {\n        display: \"block\",\n        margin: \"auto\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, this.state.stateMode.group === 0 ? \"Separate\" : \"Grouped\", \" Reporting for\"), React.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"start\",\n        marginBottom: \"40px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, this.state.stateMode.group === 0 ? this.props.location.state.modes.modes.filter(mode => mode.selected === true).map((mode, idx) => React.createElement(Mode, {\n      key: idx,\n      id: mode.id,\n      index: idx,\n      name: mode.name,\n      url: mode,\n      selected: this.state.selectedMode === idx ? true : false,\n      maxHeight: \"50px\",\n      handleSelection: this.handleSelection(idx),\n      grouped: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    })) : this.props.location.state.modes.modes.filter(mode => mode.selected === true).map((mode, idx) => React.createElement(Mode, {\n      key: idx,\n      id: mode.id,\n      index: idx,\n      name: mode.name,\n      url: mode,\n      selected: true,\n      maxHeight: \"50px\",\n      grouped: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    })))), this.props.location.state.modes.modes.filter(mode => mode.selected === true).map((mode, idx) => idx === this.state.selectedMode && React.createElement(MainForm, {\n      key: idx,\n      id: mode.id,\n      group: this.state.stateMode.group,\n      index: idx,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }))));\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\aggad.samy\\Workspace\\UITP-React-Spring\\Front-end\\src\\components\\FormPage\\FormPage.js"],"names":["Mode","MainForm","Legend","React","Container","FormPage","Component","constructor","props","handleSelection","idx","e","setState","selectedMode","selectCat","selectedCat","target","value","state","group","stateMode","modes","asyncLocalStorageSetItem","bind","asyncLocalStorageGetItem","key","localStorage","setItem","getItem","componentWillMount","getGroup","then","console","log","JSON","stringify","location","stateModeN","render","display","margin","justifyContent","marginBottom","filter","mode","selected","map","id","name"],"mappings":"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","sourcesContent":["import Mode from '../ModeSelection/Mode'\nimport MainForm from './Mainform/MainForm'\nimport Legend from './Mainform/Legend/Legend'\nimport React from 'react';\nimport { Container } from 'reactstrap';\n\n\n\nexport default class FormPage extends React.Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            selectedCat: 1,\n            selectedMode: 0,\n            group: null, \n            stateMode: [],\n            modes: []\n        };\n        this.asyncLocalStorageSetItem = this.asyncLocalStorageSetItem.bind(this)\n        this.asyncLocalStorageGetItem = this.asyncLocalStorageGetItem.bind(this)\n    }\n    \n\n    handleSelection = (idx) => (e) => {\n        this.setState({ selectedMode: idx });\n    };\n\n    selectCat = (e) => {\n        this.setState({ selectedCat: e.target.value })\n    }\n\n    async asyncLocalStorageSetItem (key, value){\n        await null;\n        return localStorage.setItem(key, value);\n    }\n    async asyncLocalStorageGetItem (key){\n        await null;\n        return localStorage.getItem(key);\n    }\n    async componentWillMount(){\n        let getGroup = localStorage.getItem(\"group\")\n        \n        // const asyncLocalStorage = {\n        //     setItem: async function (key, value) {\n        //         await null;\n        //         return localStorage.setItem(key, value);\n        //     },\n        //     getItem: async function (key) {\n        //         await null;\n        //         return localStorage.getItem(key);\n        //     }\n        // };\n        var stateMode = this.asyncLocalStorageGetItem(\"stateMode\")\n        \n        // console.log(stateMode)\n        stateMode.then(function(value) {\n            // console.log(\"async storage \", JSON.parse(value)) \n            // this.setState({stateMode: JSON.parse(value)})\n            console.log(\"STAAAAATE \", this.state.stateMode)\n            \n        })\n        localStorage.setItem(\"stateMode\", JSON.stringify(this.props.location.state)) \n        var stateModeN = localStorage.getItem(\"stateMode\")  \n        // console.log(\"Normal storage \", JSON.parse(stateModeN))\n        // await this.setState({stateMode: JSON.parse(stateModeN)})\n        // console.log(\"state mod value\", stateMode)\n        this.setState({\n            group: getGroup,\n            // modes: this.state.stateMode.modes.modes\n        })\n        \n    //   console.log(\"THE STATE stateMode \", this.state.modes)\n\n\n        \n    }\n    // async componentDidMount(){\n        \n    //     localStorage.setItem(\"stateMode\", JSON.stringify(this.props.location.state)) \n    //     var stateModeN = localStorage.getItem(\"stateMode\")  \n    //     // console.log(\"Normal storage \", JSON.parse(stateModeN))\n    //     await this.setState({stateMode: JSON.parse(stateModeN)})\n        \n    //     // console.log(\"state mode \", stateMode)\n    //     // console.log(\"THE STATE stateMode \", this.state.stateMode.modes.modes)\n        \n    // }\n\nrender() {\n        //const selectedtransport = this.props.location.state.modes.modes.filter(item => item.selected === true);\n        // console.log(\"group \", this.state.stateMode)\n        // console.log(\"group state \", this.props.location)\n        // console.log(\"hello\")\n        // console.log(\"state mode \", this.state.modes)\n        \n        return (\n            <React.Fragment>\n                <Container>\n                    <Legend /> \n\n                    <div style={{ display: \"block\", margin: \"auto\" }}>\n                        <h4>{this.state.stateMode.group === 0 ? \"Separate\" : \"Grouped\"} Reporting for</h4>\n\n                        <div style={{ display: \"flex\", justifyContent: \"start\", marginBottom: \"40px\" }}>\n                            {this.state.stateMode.group === 0 ?\n                            \n                            this.props.location.state.modes.modes.filter(mode => mode.selected === true).map((mode, idx) =>\n                            <Mode key={idx} id={mode.id} index={idx} name={mode.name} url={mode} selected={this.state.selectedMode === idx ? true : false} maxHeight=\"50px\" handleSelection={this.handleSelection(idx)} grouped={false} />)\n                            :                             \n                             this.props.location.state.modes.modes.filter(mode => mode.selected === true).map((mode, idx) =>\n                             <Mode key={idx} id={mode.id} index={idx} name={mode.name} url={mode} selected={true} maxHeight=\"50px\" grouped={true}  />) }  \n                        </div>\n\n                        \n                    </div>\n\n\n                    {this.props.location.state.modes.modes.filter(mode => mode.selected === true).map((mode, idx) => idx === this.state.selectedMode &&\n                        <MainForm key={idx} id={mode.id} group={this.state.stateMode.group} index={idx} />\n                    )}\n\n\n                </Container>\n            </React.Fragment>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}