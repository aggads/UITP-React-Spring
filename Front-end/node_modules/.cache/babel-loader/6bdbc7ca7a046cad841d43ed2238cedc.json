{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aggad.samy\\\\Workspace\\\\uitp-service\\\\Front-end\\\\src\\\\components\\\\FormPage\\\\Mainform\\\\MainForm.js\";\nimport Frequency from './Frequency/Radio';\nimport Comments from './Comment/Comment'; // import Legend from './Legend/Legend';\n\nimport Motivation from './Motivation/Motivation';\nimport Categories from './Categories/Categories';\nimport URLStorage from '../../../constants';\nimport { Link } from 'react-router-dom';\nimport uniqueid from 'uniqid'; // import  ConfirmModal  from '../Modal';\n\nimport '../../../App.css';\nimport axios from 'axios';\nimport React from 'react';\nimport { Container, Row, Col, Button, Form, FormGroup } from 'reactstrap';\nimport './MainForm.css';\nimport DropdownExampleCompact from './Motivation/Motivation';\nimport { ButtonGroup, Dropdown } from 'semantic-ui-react';\nimport DropdownMotivation from './Motivation/Motivation';\nexport default class MainForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      // --------- TESTING : UNCOMMENT WHEN SERVER DOWN ----------------\n      categories: [],\n      motivations: [],\n      regularity: [],\n      question: [],\n      questions: [],\n      id: 1,\n      name: [],\n      incident: [],\n      results: [],\n      // ----------------------------------------------------------------\n      answers: [],\n      value: [],\n      selectedCat: 1,\n      selectedMode: 0\n    };\n\n    this.handleSelection = idx => e => {\n      this.setState({\n        selectedMode: idx\n      });\n    };\n\n    this.next = () => {\n      let id = this.state.id + 1;\n      this.fetchQuestions(id);\n      this.setState(prevState => ({\n        selectedCat: prevState.selectedCat + 1,\n        id: prevState.id + 1\n      }));\n    };\n\n    this.prev = () => {\n      let id = this.state.id - 1;\n      this.fetchQuestions(id);\n      this.setState(prevState => ({\n        selectedCat: prevState.selectedCat - 1,\n        id: prevState.id - 1\n      }));\n    };\n\n    this.fetchQuestions = id => {\n      axios.get(\"\".concat(URLStorage.API_URL, \"/getAllQuestions/\").concat(id)).then(res => {\n        const data = res.data;\n        this.setState({\n          question: data,\n          isLoaded: true\n        });\n      });\n    };\n\n    this.anyChange = id => e => {\n      const inputName = e.target.name;\n      const inputValue = e.target.value;\n      let entries = Object.assign({}, this.state);\n      const answers = entries.answers;\n      answers.map(answer => answer.questionID === id ? answer[inputName] = inputValue : undefined);\n      this.setState(entries);\n      localStorage.setItem(this.props.id, JSON.stringify(this.state.answers)); // ------------ SWITCH BOOLEAN TO COMPLETED FOR CURRENT MODE ---------------\n      // if (this.state.answers.filter(answer => answer.frequency === null).length === 0) {\n      //     let completeMode = JSON.parse(localStorage.getItem(\"completedModes\"));\n      //     completeMode[this.props.index] = true;\n      //     if (this.props.group) {\n      //         var dummieArray = [];\n      //         completeMode.map(item => dummieArray.push(true));\n      //         localStorage.setItem(\"completedModes\", JSON.stringify(dummieArray));\n      //     } else {\n      //         localStorage.setItem(\"completedModes\", JSON.stringify(completeMode));\n      //     }\n      // }\n    };\n\n    this.selectCat = e => {\n      this.setState({\n        selectedCat: e.target.value\n      });\n      localStorage.setItem(this.props.id, JSON.stringify(this.state.answers));\n    };\n  }\n\n  // handleFormSubmit = () => {\n  //     const { answers } = this.state;\n  //     localStorage.setItem('answer', JSON.stringify(answers));\n  //   };\n  componentDidUpdate() {\n    // handleFormSubmit = () => {\n    //     const { answers } = this.state;\n    //     localStorage.setItem('answer', JSON.stringify(answers));\n    //   };\n    window.localStorage.setItem('state', JSON.stringify(this.state));\n  }\n\n  // onClick = (e) => {\n  //             localStorage.setItem(\"answer\", JSON.stringify(this.state.regularity))\n  //         }\n  // componentDidUpdate(){\n  //     onClick = (e) => {\n  //         localStorage.setItem(\"answer\", JSON.stringify(this.state.regularity))\n  //     }\n  // }\n  componentDidUpdate() {\n    localStorage.setItem(\"regularityId\", JSON.stringify(this.state.regularityId));\n  }\n\n  componentDidMount() {\n    localStorage.getItem(\"regularityId\");\n    this.fetchQuestions(1);\n    const transportId = this.props.id;\n    this.setState({\n      modeID: transportId\n    }); // ------------------ Retreiving PREVIOUS PERIOD RESULTS ----------------------\n    // if (JSON.parse(localStorage.getItem(\"periods\"))) {\n    //     axios.post(`${URLStorage.API_URL}/resultPeriode`, {\n    //         ptoID: parseInt(localStorage.getItem(\"ptoid\")),\n    //         periodeID: JSON.parse(localStorage.getItem(\"periods\")).previousPeriod,\n    //     })\n    //         .then(res => {\n    //             const previousResult = res.data.filter(item => item.mode_id === transportId).sort((a, b) => a.questionID - b.questionID).map(item => {\n    //                 return { prevFreq: item.frequency, };\n    //             })\n    //             const newStateAnswers = this.state.answers.map((answer, idx) => {\n    //                 return { ...answer, ...previousResult[idx] }\n    //             })\n    //             // // ------------------ ADDING PREVIOUS PERIOD RESULTS TO THE STATE.ANSWERS ----------------------\n    //             this.setState({ answers: newStateAnswers });\n    //             localStorage.setItem(\"prevResult\", JSON.stringify(previousResult))\n    //         })\n    // };\n    // // -----------------------------------------------------------------\n    // axios.get(`${URLStorage.API_URL}/getallincident`)\n    //     .then(res => {\n    //         const data = res.data\n    //         this.setState({\n    //             categories: data,\n    //             isLoaded: true,\n    //         })\n    //     })\n    // axios.get(`${URLStorage.API_URL}/getallquestions`)\n    // .then(res => {\n    //     const data = res.data\n    //     this.setState({\n    //         questions: data,\n    //         isLoaded: true,\n    //     })\n    // })\n    // axios.get(`${URLStorage.API_URL}/getallquestions`)\n    // .then(response =>(\n    //         response.data.map(questions => {\n    //           questionTest.push(questions.question);\n    //           incidentTest.push(questions.incident);\n    //         }),\n    //         resultsTest = response.data,\n    //         this.setState({question : questionTest, incident : incidentTest, results: resultsTest})\n    //       ))\n  }\n\n  render() {\n    // NEXT / SUBMIT BUTTON SWITCH\n    const nextSubmit = this.state.selectedCat === 5 ? // || (parseInt((localStorage.getItem(\"group\")) === 1)\n    JSON.parse(localStorage.getItem(\"completedModes\")).filter(item => item === false).length === 0 ? React.createElement(Link, {\n      to: {\n        pathname: \"/confirmation\",\n        state: {\n          answers: this.state.answers\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.submit,\n      className: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, \"Submit\")) : React.createElement(React.Fragment, null, React.createElement(Button, {\n      className: \"submit\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }, \"Submit\")) : React.createElement(Button, {\n      onClick: this.next,\n      className: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, \"Next\"); //console.log(this.state.categories);\n    // console.log(this.state.regularity);\n    //console.log(this.state.motivations);\n    // console.log(this.state.question);\n    // console.log(this.state.answers);\n    // console.log(this.state.id);\n\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"flex-end\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, this.state.selectedCat !== 1 && React.createElement(Button, {\n      style: {\n        marginRight: \"10px\"\n      },\n      onClick: this.prev,\n      className: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, \"Previous\"), nextSubmit), React.createElement(Categories, {\n      idPage: this.state.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }), this.state.question.map(question => {\n      return React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        key: this.state.id,\n        style: {\n          fontSize: \"20px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240\n        },\n        __self: this\n      }, question.question, React.createElement(DropdownMotivation, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242\n        },\n        __self: this\n      }), React.createElement(Frequency, {\n        onClick: () => this.setState({\n          regularityId: this.state.id\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243\n        },\n        __self: this\n      }), React.createElement(Comments, {\n        key: question.id + 'coucou',\n        questionId: question.id,\n        comment: question.comment,\n        parentCallback: this.anyChange(question.id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      })));\n    })));\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\aggad.samy\\Workspace\\uitp-service\\Front-end\\src\\components\\FormPage\\Mainform\\MainForm.js"],"names":["Frequency","Comments","Motivation","Categories","URLStorage","Link","uniqueid","axios","React","Container","Row","Col","Button","Form","FormGroup","DropdownExampleCompact","ButtonGroup","Dropdown","DropdownMotivation","MainForm","Component","state","categories","motivations","regularity","question","questions","id","name","incident","results","answers","value","selectedCat","selectedMode","handleSelection","idx","e","setState","next","fetchQuestions","prevState","prev","get","API_URL","then","res","data","isLoaded","anyChange","inputName","target","inputValue","entries","Object","assign","map","answer","questionID","undefined","localStorage","setItem","props","JSON","stringify","selectCat","componentDidUpdate","window","regularityId","componentDidMount","getItem","transportId","modeID","render","nextSubmit","parse","filter","item","length","pathname","submit","display","justifyContent","marginRight","fontSize","comment"],"mappings":"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","sourcesContent":["import Frequency from './Frequency/Radio';\nimport Comments from './Comment/Comment';\n// import Legend from './Legend/Legend';\nimport Motivation from './Motivation/Motivation'\nimport Categories from './Categories/Categories'\nimport URLStorage from '../../../constants';\nimport { Link } from 'react-router-dom';\nimport uniqueid from 'uniqid';\n// import  ConfirmModal  from '../Modal';\n\nimport '../../../App.css';\n\nimport axios from 'axios';\nimport React from 'react';\nimport { Container, Row, Col, Button, Form, FormGroup } from 'reactstrap';\n\nimport './MainForm.css'\nimport DropdownExampleCompact from './Motivation/Motivation';\nimport { ButtonGroup, Dropdown } from 'semantic-ui-react';\nimport DropdownMotivation from './Motivation/Motivation';\n\nexport default class MainForm extends React.Component {\n\n    state = {\n\n        // --------- TESTING : UNCOMMENT WHEN SERVER DOWN ----------------\n        categories: [],\n        motivations: [],\n        regularity: [],\n        question: [],\n        questions: [],\n        id: 1,\n        name: [],\n        incident: [],\n        results: [],\n        // ----------------------------------------------------------------\n\n        answers: [],\n        value: [],\n        selectedCat: 1,\n        selectedMode: 0,\n\n    };\n    \n    // handleFormSubmit = () => {\n    //     const { answers } = this.state;\n    //     localStorage.setItem('answer', JSON.stringify(answers));\n    //   };\n    componentDidUpdate() {\n        \n            // handleFormSubmit = () => {\n    //     const { answers } = this.state;\n    //     localStorage.setItem('answer', JSON.stringify(answers));\n    //   };\n        window.localStorage.setItem('state', JSON.stringify(this.state));\n      }\n\n    handleSelection = (idx) => (e) => {\n        this.setState({ selectedMode: idx });\n    };\n\n    next = () => {\n        let id = this.state.id + 1;\n        this.fetchQuestions(id);\n        this.setState(prevState => ({\n            selectedCat: prevState.selectedCat + 1,\n            id: prevState.id + 1,\n\n        }));\n       \n\n    }\n    prev = () => {\n        let id = this.state.id - 1;\n        this.fetchQuestions(id);\n        this.setState(prevState => ({\n            selectedCat: prevState.selectedCat - 1,\n            id: prevState.id - 1,\n        }));\n\n    }\n\n\n    fetchQuestions = (id) => {\n        axios.get(`${URLStorage.API_URL}/getAllQuestions/${id}`)\n            .then(res => {\n                const data = res.data\n                this.setState({\n                    question: data,\n                    isLoaded: true,\n                })\n            })\n    }\n\n\n\n    anyChange = (id) => (e) => {\n        const inputName = e.target.name;\n        const inputValue = e.target.value;\n        let entries = Object.assign({}, this.state);\n        const { answers } = entries;\n        answers.map(answer => answer.questionID === id ? answer[inputName] = inputValue : undefined);\n        this.setState(entries);\n        localStorage.setItem(this.props.id, JSON.stringify(this.state.answers));\n\n        // ------------ SWITCH BOOLEAN TO COMPLETED FOR CURRENT MODE ---------------\n\n        // if (this.state.answers.filter(answer => answer.frequency === null).length === 0) {\n\n        //     let completeMode = JSON.parse(localStorage.getItem(\"completedModes\"));\n        //     completeMode[this.props.index] = true;\n\n        //     if (this.props.group) {\n        //         var dummieArray = [];\n        //         completeMode.map(item => dummieArray.push(true));\n        //         localStorage.setItem(\"completedModes\", JSON.stringify(dummieArray));\n\n        //     } else {\n        //         localStorage.setItem(\"completedModes\", JSON.stringify(completeMode));\n        //     }\n        // }\n    }\n\n    selectCat = (e) => {\n        this.setState({ selectedCat: e.target.value })\n        localStorage.setItem(this.props.id, JSON.stringify(this.state.answers));\n    }\n    // onClick = (e) => {\n    //             localStorage.setItem(\"answer\", JSON.stringify(this.state.regularity))\n    //         }\n\n    // componentDidUpdate(){\n    //     onClick = (e) => {\n    //         localStorage.setItem(\"answer\", JSON.stringify(this.state.regularity))\n    //     }\n        \n    // }\n\n    componentDidUpdate(){\n        localStorage.setItem(\"regularityId\", \n        JSON.stringify(this.state.regularityId))\n    }\n\n    componentDidMount() {\n        localStorage.getItem(\"regularityId\")\n\n        this.fetchQuestions(1);\n\n        const transportId = this.props.id;\n        this.setState({ modeID: transportId })\n\n        // ------------------ Retreiving PREVIOUS PERIOD RESULTS ----------------------\n\n        // if (JSON.parse(localStorage.getItem(\"periods\"))) {\n\n        //     axios.post(`${URLStorage.API_URL}/resultPeriode`, {\n        //         ptoID: parseInt(localStorage.getItem(\"ptoid\")),\n        //         periodeID: JSON.parse(localStorage.getItem(\"periods\")).previousPeriod,\n        //     })\n        //         .then(res => {\n        //             const previousResult = res.data.filter(item => item.mode_id === transportId).sort((a, b) => a.questionID - b.questionID).map(item => {\n\n        //                 return { prevFreq: item.frequency, };\n        //             })\n        //             const newStateAnswers = this.state.answers.map((answer, idx) => {\n        //                 return { ...answer, ...previousResult[idx] }\n        //             })\n        //             // // ------------------ ADDING PREVIOUS PERIOD RESULTS TO THE STATE.ANSWERS ----------------------\n        //             this.setState({ answers: newStateAnswers });\n        //             localStorage.setItem(\"prevResult\", JSON.stringify(previousResult))\n        //         })\n        // };\n        // // -----------------------------------------------------------------\n\n\n        // axios.get(`${URLStorage.API_URL}/getallincident`)\n        //     .then(res => {\n        //         const data = res.data\n        //         this.setState({\n        //             categories: data,\n        //             isLoaded: true,\n        //         })\n        //     })\n\n        // axios.get(`${URLStorage.API_URL}/getallquestions`)\n        // .then(res => {\n        //     const data = res.data\n        //     this.setState({\n        //         questions: data,\n        //         isLoaded: true,\n        //     })\n        // })\n\n        // axios.get(`${URLStorage.API_URL}/getallquestions`)\n        // .then(response =>(\n        //         response.data.map(questions => {\n        //           questionTest.push(questions.question);\n        //           incidentTest.push(questions.incident);\n        //         }),\n        //         resultsTest = response.data,\n        //         this.setState({question : questionTest, incident : incidentTest, results: resultsTest})\n        //       ))\n    };\n\n\n\n    render() {\n        // NEXT / SUBMIT BUTTON SWITCH\n        const nextSubmit = this.state.selectedCat === 5 ?\n            // || (parseInt((localStorage.getItem(\"group\")) === 1)\n            (JSON.parse(localStorage.getItem(\"completedModes\")).filter(item => item === false).length === 0) ?\n                <Link to={{ pathname: \"/confirmation\", state: { answers: this.state.answers } }}>\n                    <Button onClick={this.submit} className=\"submit\" >Submit</Button>\n                </Link>\n                : <>\n                    <Button className=\"submit\" disabled>Submit</Button>\n                </>\n            :\n            <Button onClick={this.next} className=\"submit\">Next</Button>;\n\n        //console.log(this.state.categories);\n        // console.log(this.state.regularity);\n        //console.log(this.state.motivations);\n        // console.log(this.state.question);\n        // console.log(this.state.answers);\n        // console.log(this.state.id);\n        return (\n            <React.Fragment>\n                <Container>\n                    <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n                        {this.state.selectedCat !== 1 && <Button style={{ marginRight: \"10px\" }} onClick={this.prev} className=\"submit\" >Previous</Button>}\n                        {nextSubmit}\n                    </div>\n                    <Categories idPage={this.state.id}/>\n                    <br />\n                    <br />\n                    {this.state.question.map(question => {\n                        return (\n                            <ul>\n                                <li key={this.state.id} style={{fontSize: \"20px\"}} >\n                                    {question.question}\n                                    <DropdownMotivation />\n                                    <Frequency \n                                    onClick={ () => this.setState({regularityId: this.state.id}) }\n                                    />\n                                    <Comments key={question.id + 'coucou'} questionId={question.id} comment={question.comment} parentCallback={this.anyChange(question.id)} />\n                                </li>\n                            </ul>\n                        );\n                    })}\n                </Container>\n            </React.Fragment>\n        )\n    }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}