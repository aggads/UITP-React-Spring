{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aggad.samy\\\\Workspace\\\\uitp-service\\\\Front-end\\\\src\\\\components\\\\FormPage\\\\Mainform\\\\MainForm.js\";\nimport Frequency from './Frequency/Radio';\nimport Comments from './Comment/Comment'; // import Legend from './Legend/Legend';\n\nimport Motivation from './Motivation/Motivation';\nimport Categories from './Categories/Categories';\nimport URLStorage from '../../../constants';\nimport { Link } from 'react-router-dom'; // import  ConfirmModal  from '../Modal';\n\nimport '../../../App.css';\nimport axios from 'axios';\nimport React from 'react';\nimport { Container, Row, Col, Button, Form, FormGroup } from 'reactstrap';\nimport './MainForm.css';\nexport default class MainForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      // --------- TESTING : UNCOMMENT WHEN SERVER DOWN ----------------\n      categories: [],\n      motivations: [],\n      frequency: [],\n      id: [],\n      // ----------------------------------------------------------------\n      answers: [],\n      value: [],\n      selectedCat: 1,\n      selectedMode: 0\n    };\n\n    this.handleSelection = idx => e => {\n      this.setState({\n        selectedMode: idx\n      });\n    };\n\n    this.next = () => {\n      this.setState(prevState => ({\n        selectedCat: prevState.selectedCat + 1\n      }));\n    };\n\n    this.prev = () => {\n      this.setState(prevState => ({\n        selectedCat: prevState.selectedCat - 1\n      }));\n    };\n\n    this.anyChange = id => e => {\n      const inputName = e.target.name;\n      const inputValue = e.target.value;\n      let entries = Object.assign({}, this.state);\n      const answers = entries.answers;\n      answers.map(answer => answer.questionID === id ? answer[inputName] = inputValue : undefined);\n      this.setState(entries);\n      localStorage.setItem(this.props.id, JSON.stringify(this.state.answers)); // ------------ SWITCH BOOLEAN TO COMPLETED FOR CURRENT MODE ---------------\n\n      if (this.state.answers.filter(answer => answer.frequency === null).length === 0) {\n        let completeMode = JSON.parse(localStorage.getItem(\"completedModes\"));\n        completeMode[this.props.index] = true;\n\n        if (this.props.group) {\n          var dummieArray = [];\n          completeMode.map(item => dummieArray.push(true));\n          localStorage.setItem(\"completedModes\", JSON.stringify(dummieArray));\n        } else {\n          localStorage.setItem(\"completedModes\", JSON.stringify(completeMode));\n        }\n      }\n    };\n\n    this.selectCat = e => {\n      this.setState({\n        selectedCat: e.target.value\n      });\n      localStorage.setItem(this.props.id, JSON.stringify(this.state.answers));\n    };\n  }\n\n  componentDidMount() {\n    const transportId = this.props.id;\n    this.setState({\n      modeID: transportId\n    }); // ------------ TESTING : UNCOMMENT WHEN SERVER DOWN -------\n    // const localanswers = localStorage.getItem(this.props.id);\n    // console.log(localanswers);\n    // this.setState({ answers: JSON.parse(localanswers)});\n    // console.log(\"localstorageanswers\", this.state.answers);\n    //-----------------------------------------------------------\n    // ------------ TESTING : COMMENT WHEN SERVER DOWN -------\n    // axios.get(`${URLStorage.API_URL}/getallresult`)\n    //     .then(res => {\n    //         if (res) {\n    //             const answers = res.data.sort((a, b) => a.id[1] - b.id[1]).map(function (item) {\n    //                 return {\n    //                     question: item.question,\n    //                     categoryId: item.id[0],\n    //                     questionID: item.id[1],\n    //                     motivationID: 6,\n    //                     ptoID: parseInt(localStorage.getItem(\"ptoid\")),\n    //                     frequency: null,\n    //                     modeID: transportId,\n    //                     comment: \"\",\n    //                     // periode: JSON.parse(localStorage.getItem(\"periods\")).currentPeriod,\n    //                     // previousPeriod: JSON.parse(localStorage.getItem(\"periods\")).previousPeriod,\n    //                 }\n    //             });\n    //             this.setState({ answers });\n    //             localStorage.setItem(this.props.id, JSON.stringify(answers));\n    //             if (!localStorage.getItem(this.props.id)) {\n    //                 this.setState({ answers });\n    //                 localStorage.setItem(this.props.id, JSON.stringify(this.state.answers));\n    //             } else {\n    //                 let ans1;\n    //                 ans1 = localStorage.getItem(this.props.id);\n    //                 this.setState({ answers: JSON.parse(ans1) });\n    //             }\n    //         }\n    //     })\n    //     .then(() => {\n    //         const localquestions = JSON.parse(localStorage.getItem(\"questions\"));\n    //         this.setState({ questions: localquestions });\n    //         let ans2;\n    //         ans2 = localStorage.getItem(this.props.id);\n    //         this.setState({ answers: JSON.parse(ans2) });\n    //     })\n\n    axios.get(\"\".concat(URLStorage.API_URL, \"/getallmotivations\")).then(res => {\n      this.setState({\n        motivations: res.data\n      });\n      localStorage.setItem(\"motivation\", JSON.stringify(res.data));\n    });\n    axios.get(\"\".concat(URLStorage.API_URL, \"/getallincident\")).then(res => {\n      const data = res.data;\n      this.setState({\n        categories: data,\n        id: [],\n        isLoaded: true\n      });\n    }); // ------------------ Retreiving PREVIOUS PERIOD RESULTS ----------------------\n    // if (JSON.parse(localStorage.getItem(\"periods\"))) {\n    //     axios.post(`${URLStorage.API_URL}/resultPeriode`, {\n    //         ptoID: parseInt(localStorage.getItem(\"ptoid\")),\n    //         periodeID: JSON.parse(localStorage.getItem(\"periods\")).previousPeriod,\n    //     })          \n    //     .then(res => {\n    //         const previousResult = res.data.filter(item => item.mode_id === transportId).sort((a, b) => a.questionID - b.questionID).map(item => {\n    //             return { prevFreq: item.frequency, };\n    //         })\n    //         const newStateAnswers = this.state.answers.map((answer, idx) => {\n    //             return { ...answer, ...previousResult[idx] }\n    //         })\n    // // ------------------ ADDING PREVIOUS PERIOD RESULTS TO THE STATE.ANSWERS ----------------------\n    //         this.setState({ answers: newStateAnswers });\n    //         localStorage.setItem(\"prevResult\", JSON.stringify(previousResult))\n    //     })\n    // };\n    // // -----------------------------------------------------------------\n\n    axios.get(\"\".concat(URLStorage.API_URL, \"/getallfrequency\")).then(res => {\n      const data = res.data;\n      this.setState({\n        frequency: data,\n        id: [],\n        isLoaded: true\n      });\n    });\n  }\n\n  render() {\n    // NEXT / SUBMIT BUTTON SWITCH\n    const nextSubmit = this.state.selectedCat === 5 ? // || (parseInt((localStorage.getItem(\"group\")) === 1)\n    JSON.parse(localStorage.getItem(\"completedModes\")).filter(item => item === false).length === 0 ? React.createElement(Link, {\n      to: {\n        pathname: \"/confirmation\",\n        state: {\n          answers: this.state.answers\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.submit,\n      className: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, \"Submit\")) : React.createElement(React.Fragment, null, React.createElement(Button, {\n      className: \"submit\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, \"Submit\")) : React.createElement(Button, {\n      onClick: this.next,\n      className: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, \"Next\");\n    const answers = this.state.answers; //console.log(this.state.categories);\n\n    console.log(this.state.frequency); //console.log(this.state.motivations);\n\n    var id = 0;\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"flex-end\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, this.state.selectedCat !== 1 && React.createElement(Button, {\n      style: {\n        marginRight: \"10px\"\n      },\n      onClick: this.prev,\n      className: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, \"Previous\"), nextSubmit), React.createElement(Categories, {\n      categories: this.state.categories,\n      parentCallback: this.selectCat,\n      active: this.state.selectedCat,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }), React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, \"Whew! Check out my long todo list:\", React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, this.state.frequency.map((frequency, idx) => {\n      return React.createElement(\"li\", {\n        key: idx,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      }, frequency));\n    })))));\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\aggad.samy\\Workspace\\uitp-service\\Front-end\\src\\components\\FormPage\\Mainform\\MainForm.js"],"names":["Frequency","Comments","Motivation","Categories","URLStorage","Link","axios","React","Container","Row","Col","Button","Form","FormGroup","MainForm","Component","state","categories","motivations","frequency","id","answers","value","selectedCat","selectedMode","handleSelection","idx","e","setState","next","prevState","prev","anyChange","inputName","target","name","inputValue","entries","Object","assign","map","answer","questionID","undefined","localStorage","setItem","props","JSON","stringify","filter","length","completeMode","parse","getItem","index","group","dummieArray","item","push","selectCat","componentDidMount","transportId","modeID","get","API_URL","then","res","data","isLoaded","render","nextSubmit","pathname","submit","console","log","display","justifyContent","marginRight"],"mappings":"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","sourcesContent":["import Frequency from './Frequency/Radio';\r\nimport Comments from './Comment/Comment';\r\n// import Legend from './Legend/Legend';\r\nimport Motivation from './Motivation/Motivation'\r\nimport Categories from './Categories/Categories'\r\nimport URLStorage from '../../../constants';\r\nimport { Link } from 'react-router-dom';\r\n// import  ConfirmModal  from '../Modal';\r\n\r\nimport '../../../App.css';\r\n\r\nimport axios from 'axios';\r\nimport React from 'react';\r\nimport { Container, Row, Col, Button, Form, FormGroup } from 'reactstrap';\r\n\r\nimport './MainForm.css'\r\n\r\nexport default class MainForm extends React.Component {\r\n\r\n    state = {\r\n\r\n        // --------- TESTING : UNCOMMENT WHEN SERVER DOWN ----------------\r\n        categories: [],\r\n        motivations: [],\r\n        frequency:[],\r\n        id:[],\r\n        // ----------------------------------------------------------------\r\n\r\n        answers: [],\r\n        value: [],\r\n        selectedCat: 1,\r\n        selectedMode: 0,\r\n\r\n    };\r\n\r\n    handleSelection = (idx) => (e) => {\r\n        this.setState({ selectedMode: idx });\r\n    };\r\n\r\n    next = () => {\r\n        this.setState(prevState => ({ selectedCat: prevState.selectedCat + 1 }));\r\n    }\r\n\r\n    prev = () => {\r\n        this.setState(prevState => ({ selectedCat: prevState.selectedCat - 1 }));\r\n    }\r\n\r\n    anyChange = (id) => (e) => {\r\n        const inputName = e.target.name;\r\n        const inputValue = e.target.value;\r\n        let entries = Object.assign({}, this.state);\r\n        const { answers } = entries;\r\n        answers.map(answer => answer.questionID === id ? answer[inputName] = inputValue : undefined);\r\n        this.setState(entries);\r\n        localStorage.setItem(this.props.id, JSON.stringify(this.state.answers));\r\n\r\n        // ------------ SWITCH BOOLEAN TO COMPLETED FOR CURRENT MODE ---------------\r\n      \r\n        if (this.state.answers.filter(answer => answer.frequency === null).length === 0) {\r\n            \r\n            let completeMode = JSON.parse(localStorage.getItem(\"completedModes\"));\r\n            completeMode[this.props.index] = true;\r\n            \r\n            if (this.props.group) {          \r\n                var dummieArray = [];          \r\n                    completeMode.map(item => dummieArray.push(true));  \r\n                    localStorage.setItem(\"completedModes\", JSON.stringify(dummieArray));                      \r\n                                \r\n            } else {\r\n                localStorage.setItem(\"completedModes\", JSON.stringify(completeMode));\r\n            }            \r\n        } \r\n    }\r\n\r\n    selectCat = (e) => {\r\n        this.setState({ selectedCat: e.target.value })\r\n        localStorage.setItem(this.props.id, JSON.stringify(this.state.answers));\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        const transportId = this.props.id;\r\n        this.setState({ modeID: transportId })\r\n\r\n\r\n        // ------------ TESTING : UNCOMMENT WHEN SERVER DOWN -------\r\n        // const localanswers = localStorage.getItem(this.props.id);\r\n        // console.log(localanswers);\r\n        // this.setState({ answers: JSON.parse(localanswers)});\r\n        // console.log(\"localstorageanswers\", this.state.answers);\r\n        //-----------------------------------------------------------\r\n\r\n\r\n        // ------------ TESTING : COMMENT WHEN SERVER DOWN -------\r\n        \r\n\r\n        // axios.get(`${URLStorage.API_URL}/getallresult`)\r\n        //     .then(res => {\r\n        //         if (res) {\r\n\r\n        //             const answers = res.data.sort((a, b) => a.id[1] - b.id[1]).map(function (item) {\r\n        //                 return {\r\n        //                     question: item.question,\r\n        //                     categoryId: item.id[0],\r\n        //                     questionID: item.id[1],\r\n        //                     motivationID: 6,\r\n        //                     ptoID: parseInt(localStorage.getItem(\"ptoid\")),\r\n        //                     frequency: null,\r\n        //                     modeID: transportId,\r\n        //                     comment: \"\",\r\n        //                     // periode: JSON.parse(localStorage.getItem(\"periods\")).currentPeriod,\r\n        //                     // previousPeriod: JSON.parse(localStorage.getItem(\"periods\")).previousPeriod,\r\n        //                 }\r\n        //             });\r\n        //             this.setState({ answers });\r\n        //             localStorage.setItem(this.props.id, JSON.stringify(answers));\r\n\r\n        //             if (!localStorage.getItem(this.props.id)) {\r\n        //                 this.setState({ answers });\r\n        //                 localStorage.setItem(this.props.id, JSON.stringify(this.state.answers));\r\n\r\n        //             } else {\r\n        //                 let ans1;\r\n        //                 ans1 = localStorage.getItem(this.props.id);\r\n        //                 this.setState({ answers: JSON.parse(ans1) });\r\n        //             }\r\n        //         }\r\n        //     })\r\n        //     .then(() => {\r\n        //         const localquestions = JSON.parse(localStorage.getItem(\"questions\"));\r\n        //         this.setState({ questions: localquestions });\r\n        //         let ans2;\r\n\r\n        //         ans2 = localStorage.getItem(this.props.id);\r\n        //         this.setState({ answers: JSON.parse(ans2) });\r\n        //     })\r\n\r\n        axios.get(`${URLStorage.API_URL}/getallmotivations`)\r\n            .then(res => {\r\n                this.setState({ motivations: res.data });\r\n                localStorage.setItem(\"motivation\", JSON.stringify(res.data));\r\n            })\r\n\r\n\r\n\r\n        axios.get(`${URLStorage.API_URL}/getallincident`)\r\n            .then(res => {\r\n                const data = res.data\r\n                this.setState({\r\n                    categories: data,\r\n                    id:[],\r\n                    isLoaded: true,\r\n                })\r\n            })\r\n\r\n        \r\n\r\n        \r\n\r\n\r\n        // ------------------ Retreiving PREVIOUS PERIOD RESULTS ----------------------\r\n\r\n        // if (JSON.parse(localStorage.getItem(\"periods\"))) {\r\n\r\n        //     axios.post(`${URLStorage.API_URL}/resultPeriode`, {\r\n        //         ptoID: parseInt(localStorage.getItem(\"ptoid\")),\r\n        //         periodeID: JSON.parse(localStorage.getItem(\"periods\")).previousPeriod,\r\n        //     })          \r\n        //     .then(res => {\r\n        //         const previousResult = res.data.filter(item => item.mode_id === transportId).sort((a, b) => a.questionID - b.questionID).map(item => {\r\n                    \r\n        //             return { prevFreq: item.frequency, };\r\n        //         })\r\n        //         const newStateAnswers = this.state.answers.map((answer, idx) => {\r\n        //             return { ...answer, ...previousResult[idx] }\r\n        //         })\r\n        // // ------------------ ADDING PREVIOUS PERIOD RESULTS TO THE STATE.ANSWERS ----------------------\r\n        //         this.setState({ answers: newStateAnswers });\r\n        //         localStorage.setItem(\"prevResult\", JSON.stringify(previousResult))\r\n        //     })\r\n        // };\r\n        // // -----------------------------------------------------------------\r\n\r\n\r\n        axios.get(`${URLStorage.API_URL}/getallfrequency`)\r\n            .then(res => {\r\n                const data = res.data\r\n                this.setState({\r\n                    frequency: data,\r\n                    id:[],\r\n                    isLoaded: true,\r\n                })\r\n            })\r\n\r\n    };\r\n\r\n\r\n    render() {\r\n        // NEXT / SUBMIT BUTTON SWITCH\r\n        const nextSubmit = this.state.selectedCat === 5 ?\r\n            // || (parseInt((localStorage.getItem(\"group\")) === 1)\r\n            (JSON.parse(localStorage.getItem(\"completedModes\")).filter(item => item === false).length === 0)  ?\r\n                <Link to={{ pathname: \"/confirmation\", state: { answers: this.state.answers } }}>\r\n                    <Button onClick={this.submit} className=\"submit\">Submit</Button>\r\n                </Link>\r\n                : <>\r\n                    <Button className=\"submit\" disabled>Submit</Button>\r\n                </>\r\n            :\r\n            <Button onClick={this.next} className=\"submit\">Next</Button>;\r\n\r\n\r\n\r\n        const { answers } = this.state;\r\n\r\n        //console.log(this.state.categories);\r\n        console.log(this.state.frequency);\r\n        //console.log(this.state.motivations);\r\n        var id = 0;\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Container>\r\n\r\n                    <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\r\n                        {this.state.selectedCat !== 1 && <Button style={{ marginRight: \"10px\" }} onClick={this.prev} className=\"submit\" >Previous</Button>}\r\n                        {nextSubmit}\r\n                    </div>\r\n                    <Categories categories={this.state.categories} parentCallback={this.selectCat} active={this.state.selectedCat} />\r\n                    <React.Fragment>\r\n        Whew! Check out my long todo list:\r\n        <ul>\r\n          {this.state.frequency.map((frequency, idx) => {\r\n            return (\r\n              <li key={idx}>\r\n\r\n                <div>{frequency}</div>\r\n              </li>\r\n            )\r\n          })}\r\n        </ul>\r\n      </React.Fragment>\r\n\r\n\r\n                </Container>\r\n            </React.Fragment>\r\n        )\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}