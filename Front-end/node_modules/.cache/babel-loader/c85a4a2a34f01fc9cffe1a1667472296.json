{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aggad.samy\\\\Workspace\\\\UITP-React-Spring\\\\Front-end\\\\src\\\\components\\\\FormPage\\\\Mainform\\\\MainForm.js\";\nimport Frequency from './Frequency/Radio';\nimport Comments from './Comment/Comment'; // import Legend from './Legend/Legend';\n\nimport Motivation from './Motivation/Motivation';\nimport Categories from './Categories/Categories';\nimport URLStorage from '../../../constants';\nimport { Link } from 'react-router-dom';\nimport uniqueid from 'uniqid';\nimport { AsyncStorage } from 'AsyncStorage'; // import  ConfirmModal  from '../Modal';\n\nimport '../../../App.css';\nimport axios from 'axios';\nimport React from 'react';\nimport { Container, Row, Col, Button, Form, FormGroup } from 'reactstrap';\nimport './MainForm.css';\nimport DropdownExampleCompact from './Motivation/Motivation';\nimport { ButtonGroup, Dropdown } from 'semantic-ui-react';\nimport DropdownMotivation from './Motivation/Motivation';\nexport default class MainForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSelection = idx => e => {\n      this.setState({\n        selectedMode: idx\n      });\n    };\n\n    this.next = () => {\n      let id = this.state.id + 1;\n      this.fetchQuestions(id);\n      this.setState(prevState => ({\n        selectedCat: prevState.selectedCat + 1,\n        id: prevState.id + 1\n      }));\n    };\n\n    this.prev = () => {\n      let id = this.state.id - 1;\n      this.fetchQuestions(id);\n      this.setState(prevState => ({\n        selectedCat: prevState.selectedCat - 1,\n        id: prevState.id - 1\n      }));\n    };\n\n    this.fetchQuestions = id => {\n      axios.get(\"\".concat(URLStorage.API_URL, \"/getAllQuestions/\").concat(id)).then(res => {\n        const data = res.data;\n        this.setState({\n          question: data,\n          isLoaded: true\n        });\n      });\n    };\n\n    this.anyChange = id => e => {\n      const inputName = e.target.name;\n      const inputValue = e.target.value;\n      let entries = Object.assign({}, this.state);\n      const answers = entries.answers;\n      answers.map(answer => answer.questionID === id ? answer[inputName] = inputValue : undefined);\n      this.setState(entries);\n      localStorage.setItem(this.props.id, JSON.stringify(this.state.answers)); // ------------ SWITCH BOOLEAN TO COMPLETED FOR CURRENT MODE ---------------\n\n      if (this.state.allData.filter(answer => answer.frequency === null).length === 0) {\n        let completeMode = JSON.parse(localStorage.getItem(\"completedModes\"));\n        completeMode[this.props.index] = true;\n\n        if (this.props.group) {\n          var dummieArray = [];\n          completeMode.map(item => dummieArray.push(true));\n          localStorage.setItem(\"completedModes\", JSON.stringify(dummieArray));\n        } else {\n          localStorage.setItem(\"completedModes\", JSON.stringify(completeMode));\n        }\n      }\n    };\n\n    this.selectCat = e => {\n      this.setState({\n        selectedCat: e.target.value\n      });\n      localStorage.setItem(this.props.id, JSON.stringify(this.state.answers));\n    };\n\n    this.frequencyCallback = regularityCall => {\n      this.setState({\n        regularityFromChild: regularityCall\n      }); //console.log(\"regularity call \", regularityCall)\n    };\n\n    this.getFrequency = frequencyCallbackFromChild => {\n      // console.log('From getFrequency in MainForm:')\n      // console.log(frequencyCallbackFromChild)\n      this.setState({\n        frequencyFromChild: frequencyCallbackFromChild\n      });\n    };\n\n    this.getMotivation = motivationCallbackFromChild => {\n      // console.log('From getMotivation in MainForm:')\n      // console.log(motivationCallbackFromChild)\n      this.setState({\n        motivationFromChild: motivationCallbackFromChild\n      });\n    };\n\n    this.state = {\n      question: [],\n      id: 1,\n      allData: [],\n      answers: [],\n      result: [],\n      value: [],\n      selectedCat: 1,\n      selectedMode: 0,\n      dataGet: [],\n      incidentName: \"\",\n      frequencyFromChild: 0,\n      motivationFromChild: null\n    };\n  }\n\n  getAllStorage() {\n    var archive = [],\n        keys = Object.keys(localStorage),\n        i = 0,\n        key;\n\n    for (; key = keys[i]; i++) {\n      archive.push(key + '=' + localStorage.getItem(key));\n    }\n\n    return console.log(archive);\n  }\n\n  async handleClick(question) {\n    if (this.state.allData.length) {\n      var getQuestion = this.state.allData.find(function (data, id) {\n        if (data.id === question.id) {\n          return data;\n        } else {\n          return false;\n        }\n      });\n\n      if (getQuestion) {\n        var indexOf = this.state.allData.indexOf(getQuestion);\n\n        for (var key in getQuestion) {\n          if (getQuestion[key] === question[key] || getQuestion[key] === undefined) {\n            getQuestion[key] = question[key];\n            await this.state.allData.splice(indexOf, 1, question);\n            localStorage.setItem(\"bigItem\", JSON.stringify(this.state.allData));\n          }\n        }\n      } else {\n        await this.setState({\n          allData: [...this.state.allData, question]\n        });\n        localStorage.setItem(\"bigItem\", JSON.stringify(this.state.allData));\n      }\n    } else {\n      await this.setState({\n        allData: [question]\n      });\n      localStorage.setItem(\"bigItem\", JSON.stringify(this.state.allData));\n    }\n\n    await localStorage.setItem(\"bigItem\", JSON.stringify(this.state.allData));\n  }\n\n  componentDidMount() {\n    var bigItem = JSON.parse(localStorage.getItem(\"bigItem\"));\n    this.fetchQuestions(1);\n    const transportId = this.props.id;\n    var selected = localStorage.getItem(\"selected\");\n    this.setState({\n      modeID: transportId,\n      selected: selected\n    });\n\n    if (this.state.allData.filter(answer => answer.frequency === null).length === 0) {\n      let completeMode = JSON.parse(localStorage.getItem(\"completedModes\"));\n      completeMode[this.props.index] = true;\n\n      if (this.props.group) {\n        var dummieArray = [];\n        completeMode.map(item => dummieArray.push(true));\n        localStorage.setItem(\"completedModes\", JSON.stringify(dummieArray));\n      } else {\n        localStorage.setItem(\"completedModes\", JSON.stringify(completeMode));\n      }\n    } // var result = []\n    // for( var i = 0; i < this.state.allData.length; i++){\n    //     result.push(this.state.allData[i])\n    // }\n    // this.setState({result : result})\n    // console.log(\"all data in did mount \", this.state.allData)\n    // console.log(\"result in did mount \", this.state.result)\n\n  }\n\n  // handleOptionSelect(e){\n  //     this.setState({ selected : e.target.value });\n  //     localStorage.setItem(\"selected\", e.target.value);\n  //   }\n  componentWillMount() {\n    var bigItem = JSON.parse(localStorage.getItem(\"bigItem\"));\n    var questionStorage = localStorage.getItem(\"question\");\n    var getData = JSON.parse(localStorage.getItem(\"\".concat(questionStorage)));\n    var selectedMode = JSON.parse(localStorage.getItem(\"selectedModes\"));\n    var selectedModeName = [];\n\n    for (var i in selectedMode) {\n      selectedModeName.push(selectedMode[i].name);\n    }\n\n    if (bigItem) {\n      bigItem.selectedMode = selectedModeName;\n    } else {\n      bigItem = [];\n    }\n\n    this.setState({\n      allData: bigItem,\n      dataGet: getData\n    });\n  }\n\n  render() {\n    // NEXT / SUBMIT BUTTON SWITCH\n    console.log(\"THE STATE \", this.state.allData);\n    const nextSubmit = this.state.selectedCat === 5 ? // || (parseInt((localStorage.getItem(\"group\")) === 1)\n    JSON.parse(localStorage.getItem(\"completedModes\")).filter(item => item === false).length === 0 ? React.createElement(Link, {\n      to: {\n        pathname: \"/confirmation\",\n        state: {\n          answers: this.state.answers\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.submit,\n      className: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, \"Submit\")) : React.createElement(React.Fragment, null, React.createElement(Button, {\n      className: \"submit\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }, \"Submit\")) : React.createElement(Button, {\n      onClick: this.next,\n      className: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, \"Next\");\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }, React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"flex-end\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, this.state.selectedCat !== 1 && React.createElement(Button, {\n      style: {\n        marginRight: \"10px\"\n      },\n      onClick: this.prev,\n      className: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }, \"Previous\"), nextSubmit), React.createElement(Categories, {\n      idPage: this.state.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }), this.state.question.map((question, index) => {\n      var allData = this.state.allData; //var result = this.state.result\n\n      var questionParent = question;\n      this.state.incidentName = questionParent.incident.name;\n      localStorage.setItem(\"question\", question.question);\n      var questionStorage = localStorage.getItem(\"question\");\n      localStorage.setItem(\"\".concat(questionStorage), JSON.stringify(questionParent)); //var selected = this.state.selected\n\n      if (this.state.id === 1) {\n        index = 1;\n      } else if (this.state.id === 2) {\n        index = 8;\n      } else if (this.state.id === 3) {\n        index = 21;\n      } else if (this.state.id === 4) {\n        index = 6;\n      } else {\n        return null;\n      }\n\n      console.log(\"state id \", this.state.id);\n      var result = [];\n\n      for (var i = 0; i < allData.length; i++) {\n        result.push(allData[i]);\n      }\n\n      console.log(\"index in map \", question.id); // --------- IF motivation is undefined with result[question.id] -----------------\n      // if(result[question.id].motivation === undefined){\n      //     result[question.id].motivation = \"something\"\n      // }\n      // -------------------------------------------------------------------------------\n      // console.log(\"result in map \", result)\n      // console.log(\"result index \", result[index])\n      // console.log(\"result index \", questionParent.id)\n\n      return React.createElement(\"ul\", {\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        value: question.question,\n        key: index,\n        style: {\n          fontSize: \"20px\"\n        },\n        onClick: this.handleClick.bind(this, question),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294\n        },\n        __self: this\n      }, question.question, React.createElement(DropdownMotivation, {\n        listNameFromParent: questionParent //--------------- Wrong index paramater ----------------\n        ,\n        selectedCategory: result[index].motivation //selectedCategory = {result[question.id].motivation}\n        //-----------------------------------------------------\n        ,\n        passValueToMainForm: this.getMotivation,\n        value: this.state.selected,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303\n        },\n        __self: this\n      }), React.createElement(Frequency, {\n        callBackFromParent: this.frequencyCallback,\n        listNameFromParent: questionParent //--------------- Wrong index paramater ----------------\n        ,\n        value: result[index].frequency // value={result[question.id].frequency}\n        //-----------------------------------------------------\n        ,\n        passValueToMainForm: this.getFrequency,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 312\n        },\n        __self: this\n      }), React.createElement(Comments, {\n        listNameFromParent: questionParent,\n        getComment: this.getBackComment,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321\n        },\n        __self: this\n      })));\n    })));\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\aggad.samy\\Workspace\\UITP-React-Spring\\Front-end\\src\\components\\FormPage\\Mainform\\MainForm.js"],"names":["Frequency","Comments","Motivation","Categories","URLStorage","Link","uniqueid","AsyncStorage","axios","React","Container","Row","Col","Button","Form","FormGroup","DropdownExampleCompact","ButtonGroup","Dropdown","DropdownMotivation","MainForm","Component","constructor","props","handleSelection","idx","e","setState","selectedMode","next","id","state","fetchQuestions","prevState","selectedCat","prev","get","API_URL","then","res","data","question","isLoaded","anyChange","inputName","target","name","inputValue","value","entries","Object","assign","answers","map","answer","questionID","undefined","localStorage","setItem","JSON","stringify","allData","filter","frequency","length","completeMode","parse","getItem","index","group","dummieArray","item","push","selectCat","frequencyCallback","regularityCall","regularityFromChild","getFrequency","frequencyCallbackFromChild","frequencyFromChild","getMotivation","motivationCallbackFromChild","motivationFromChild","result","dataGet","incidentName","getAllStorage","archive","keys","i","key","console","log","handleClick","getQuestion","find","indexOf","splice","componentDidMount","bigItem","transportId","selected","modeID","componentWillMount","questionStorage","getData","selectedModeName","render","nextSubmit","pathname","submit","display","justifyContent","marginRight","questionParent","incident","fontSize","bind","motivation","getBackComment"],"mappings":"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","sourcesContent":["import Frequency from './Frequency/Radio';\nimport Comments from './Comment/Comment';\n// import Legend from './Legend/Legend';\nimport Motivation from './Motivation/Motivation'\nimport Categories from './Categories/Categories'\nimport URLStorage from '../../../constants';\nimport { Link } from 'react-router-dom';\nimport uniqueid from 'uniqid';\nimport { AsyncStorage } from 'AsyncStorage';\n// import  ConfirmModal  from '../Modal';\n\nimport '../../../App.css';\n\nimport axios from 'axios';\nimport React from 'react';\nimport { Container, Row, Col, Button, Form, FormGroup } from 'reactstrap';\n\nimport './MainForm.css'\nimport DropdownExampleCompact from './Motivation/Motivation';\nimport { ButtonGroup, Dropdown } from 'semantic-ui-react';\nimport DropdownMotivation from './Motivation/Motivation';\n\nexport default class MainForm extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            question: [],\n            id: 1,\n            allData: [],\n            answers: [],\n            result: [],\n            value: [],\n            selectedCat: 1,\n            selectedMode: 0,\n            dataGet: [],\n            incidentName: \"\",\n            frequencyFromChild: 0,\n            motivationFromChild: null,\n        }\n    }\n\n    getAllStorage() {\n        var archive = [],\n            keys = Object.keys(localStorage),\n            i = 0, key;\n\n        for (; key = keys[i]; i++) {\n            archive.push(key + '=' + localStorage.getItem(key));\n        }\n        return console.log(archive);\n    }\n\n    async handleClick(question) {\n        if (this.state.allData.length) {\n            var getQuestion = this.state.allData.find(function (data, id) {\n                if (data.id === question.id) {\n                    return data\n                } else {\n                    return false\n                }\n            })\n            if (getQuestion) {\n                var indexOf = this.state.allData.indexOf(getQuestion);\n                for (var key in getQuestion) {\n                    if (getQuestion[key] === question[key] || getQuestion[key] === undefined) {\n                        getQuestion[key] = question[key]\n                        await this.state.allData.splice(indexOf, 1, question)\n                        localStorage.setItem(\"bigItem\", JSON.stringify(this.state.allData))\n                    }\n                }\n            } else {\n                await this.setState({ allData: [...this.state.allData, question] })\n                localStorage.setItem(\"bigItem\", JSON.stringify(this.state.allData))\n\n            }\n        } else {\n            await this.setState({ allData: [question] })\n            localStorage.setItem(\"bigItem\", JSON.stringify(this.state.allData))\n        }\n        await localStorage.setItem(\"bigItem\", JSON.stringify(this.state.allData))\n    }\n\n    handleSelection = (idx) => (e) => {\n        this.setState({ selectedMode: idx });\n    };\n\n    next = () => {\n        let id = this.state.id + 1;\n        this.fetchQuestions(id);\n        this.setState(prevState => ({\n            selectedCat: prevState.selectedCat + 1,\n            id: prevState.id + 1,\n\n        }));\n\n\n    }\n    prev = () => {\n        let id = this.state.id - 1;\n        this.fetchQuestions(id);\n        this.setState(prevState => ({\n            selectedCat: prevState.selectedCat - 1,\n            id: prevState.id - 1,\n        }));\n\n    }\n\n\n    fetchQuestions = (id) => {\n        axios.get(`${URLStorage.API_URL}/getAllQuestions/${id}`)\n            .then(res => {\n                const data = res.data\n                this.setState({\n                    question: data,\n                    isLoaded: true,\n                })\n            })\n    }\n    anyChange = (id) => (e) => {\n        const inputName = e.target.name;\n        const inputValue = e.target.value;\n        let entries = Object.assign({}, this.state);\n        const { answers } = entries;\n        answers.map(answer => answer.questionID === id ? answer[inputName] = inputValue : undefined);\n        this.setState(entries);\n        localStorage.setItem(this.props.id, JSON.stringify(this.state.answers));\n\n        // ------------ SWITCH BOOLEAN TO COMPLETED FOR CURRENT MODE ---------------\n\n        if (this.state.allData.filter(answer => answer.frequency === null).length === 0) {\n\n            let completeMode = JSON.parse(localStorage.getItem(\"completedModes\"));\n            completeMode[this.props.index] = true;\n\n            if (this.props.group) {\n                var dummieArray = [];\n                completeMode.map(item => dummieArray.push(true));\n                localStorage.setItem(\"completedModes\", JSON.stringify(dummieArray));\n\n            } else {\n                localStorage.setItem(\"completedModes\", JSON.stringify(completeMode));\n            }\n        }\n    }\n\n    selectCat = (e) => {\n        this.setState({ selectedCat: e.target.value })\n        localStorage.setItem(this.props.id, JSON.stringify(this.state.answers));\n    }\n    frequencyCallback = (regularityCall) => {\n        this.setState({\n            regularityFromChild: regularityCall\n        })\n        //console.log(\"regularity call \", regularityCall)\n    }\n    componentDidMount() {\n        var bigItem = JSON.parse(localStorage.getItem(\"bigItem\"))\n        this.fetchQuestions(1);\n        const transportId = this.props.id;\n        var selected = localStorage.getItem(\"selected\");\n        this.setState({ modeID: transportId, selected : selected })\n\n        if (this.state.allData.filter(answer => answer.frequency === null).length === 0) {\n\n            let completeMode = JSON.parse(localStorage.getItem(\"completedModes\"));\n            completeMode[this.props.index] = true;\n\n            if (this.props.group) {\n                var dummieArray = [];\n                completeMode.map(item => dummieArray.push(true));\n                localStorage.setItem(\"completedModes\", JSON.stringify(dummieArray));\n\n            } else {\n                localStorage.setItem(\"completedModes\", JSON.stringify(completeMode));\n            }\n        }\n\n        // var result = []\n        // for( var i = 0; i < this.state.allData.length; i++){\n        //     result.push(this.state.allData[i])\n            \n        // }\n        // this.setState({result : result})\n        // console.log(\"all data in did mount \", this.state.allData)\n        // console.log(\"result in did mount \", this.state.result)\n        \n    }\n\n    getFrequency = (frequencyCallbackFromChild) => {\n        // console.log('From getFrequency in MainForm:')\n        // console.log(frequencyCallbackFromChild)\n        this.setState({\n            frequencyFromChild: frequencyCallbackFromChild\n        })\n    }\n\n    getMotivation = (motivationCallbackFromChild) => {\n        // console.log('From getMotivation in MainForm:')\n        // console.log(motivationCallbackFromChild)\n        this.setState({\n            motivationFromChild: motivationCallbackFromChild\n        })\n    }\n    // handleOptionSelect(e){\n    //     this.setState({ selected : e.target.value });\n    //     localStorage.setItem(\"selected\", e.target.value);\n    //   }\n\n    componentWillMount(){\n        var bigItem = JSON.parse(localStorage.getItem(\"bigItem\"))\n        var questionStorage = localStorage.getItem(\"question\");\n        var getData = JSON.parse(localStorage.getItem(`${questionStorage}`))\n        var selectedMode = JSON.parse(localStorage.getItem(\"selectedModes\"))\n        var selectedModeName = [];\n        for (var i in selectedMode) {\n            selectedModeName.push(selectedMode[i].name)\n        }\n        if (bigItem) {\n            bigItem.selectedMode = selectedModeName\n        }\n        else {\n            bigItem = []\n        }\n        this.setState({ \n            allData: bigItem, \n            dataGet: getData, \n        })\n        \n    }\n\n        render() {\n            // NEXT / SUBMIT BUTTON SWITCH\n            console.log(\"THE STATE \", this.state.allData)\n            const nextSubmit = this.state.selectedCat === 5 ?\n                // || (parseInt((localStorage.getItem(\"group\")) === 1)\n                (JSON.parse(localStorage.getItem(\"completedModes\")).filter(item => item === false).length === 0) ?\n                    <Link to={{ pathname: \"/confirmation\", state: { answers: this.state.answers } }}>\n                        <Button onClick={this.submit} className=\"submit\" >Submit</Button>\n                    </Link>\n                    : <>\n                        <Button className=\"submit\" disabled>Submit</Button>\n                    </>\n                :\n                <Button onClick={this.next} className=\"submit\">Next</Button>;\n            return (\n                <React.Fragment>\n                    <Container>\n                        <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n                            {this.state.selectedCat !== 1 && <Button style={{ marginRight: \"10px\" }} onClick={this.prev} className=\"submit\" >Previous</Button>}\n                            {nextSubmit}\n                        </div>\n                        <Categories idPage={this.state.id} />\n                        <br />\n                        <br />\n                        {this.state.question.map((question, index) => {\n                            var allData = this.state.allData\n                            //var result = this.state.result\n                            var questionParent = question\n                            this.state.incidentName = questionParent.incident.name\n                            localStorage.setItem(\"question\", question.question)\n                            var questionStorage = localStorage.getItem(\"question\");\n                            localStorage.setItem(`${questionStorage}`, JSON.stringify(questionParent))\n                            //var selected = this.state.selected\n                            if (this.state.id === 1){\n                                index = 1\n                            }else if(this.state.id === 2){\n                                index = 8   \n                            }else if(this.state.id === 3){\n                                index = 21\n                            }else if(this.state.id === 4){\n                                index = 6\n                            }else{\n                                return null\n                            }\n                            console.log(\"state id \", this.state.id)\n                            var result = []\n                            for( var i = 0; i < allData.length; i++){\n                                result.push(allData[i])\n                            }\n                            console.log(\"index in map \", question.id)\n\n                            // --------- IF motivation is undefined with result[question.id] -----------------\n                            // if(result[question.id].motivation === undefined){\n                            //     result[question.id].motivation = \"something\"\n                            // }\n                            // -------------------------------------------------------------------------------\n                            // console.log(\"result in map \", result)\n                            // console.log(\"result index \", result[index])\n                            // console.log(\"result index \", questionParent.id)\n                            return (\n                                <ul\n                                    key={index}\n                                >\n                                    <li\n                                        value={question.question}\n                                        key={index}\n                                        style={{ fontSize: \"20px\" }}\n                                        onClick={this.handleClick.bind(this, question)}\n                                    >\n                                        {\n                                            question.question\n                                        }\n                                        <DropdownMotivation\n                                            listNameFromParent={questionParent}\n                                            //--------------- Wrong index paramater ----------------\n                                            selectedCategory = {result[index].motivation}\n                                            //selectedCategory = {result[question.id].motivation}\n                                            //-----------------------------------------------------\n                                            passValueToMainForm={this.getMotivation}\n                                            value={this.state.selected}\n                                        />\n                                        <Frequency\n                                            callBackFromParent={this.frequencyCallback}\n                                            listNameFromParent={questionParent}\n                                            //--------------- Wrong index paramater ----------------\n                                            value={result[index].frequency}\n                                            // value={result[question.id].frequency}\n                                            //-----------------------------------------------------\n                                            passValueToMainForm={this.getFrequency}   \n                                        />\n                                        <Comments\n                                            listNameFromParent={questionParent}\n                                            getComment={this.getBackComment}\n                                        />\n                                    </li>\n                                </ul>\n                            );\n                        })}\n                    </Container>\n                </React.Fragment>\n            )\n        }\n    }\n\n"]},"metadata":{},"sourceType":"module"}