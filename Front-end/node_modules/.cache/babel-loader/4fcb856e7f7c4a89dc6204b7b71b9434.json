{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aggad.samy\\\\Workspace\\\\UITP-React-Spring\\\\Front-end\\\\src\\\\components\\\\FormPage\\\\Mainform\\\\MainForm.js\";\nimport Frequency from './Frequency/Radio';\nimport Comments from './Comment/Comment'; // import Legend from './Legend/Legend';\n\nimport Motivation from './Motivation/Motivation';\nimport Categories from './Categories/Categories';\nimport URLStorage from '../../../constants';\nimport { Link } from 'react-router-dom';\nimport uniqueid from 'uniqid'; // import  ConfirmModal  from '../Modal';\n\nimport '../../../App.css';\nimport axios from 'axios';\nimport React from 'react';\nimport { Container, Row, Col, Button, Form, FormGroup } from 'reactstrap';\nimport './MainForm.css';\nimport DropdownExampleCompact from './Motivation/Motivation';\nimport { ButtonGroup, Dropdown } from 'semantic-ui-react';\nimport DropdownMotivation from './Motivation/Motivation';\nexport default class MainForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSelection = idx => e => {\n      this.setState({\n        selectedMode: idx\n      });\n    };\n\n    this.next = () => {\n      let id = this.state.id + 1;\n      this.fetchQuestions(id);\n      this.setState(prevState => ({\n        selectedCat: prevState.selectedCat + 1,\n        id: prevState.id + 1\n      }));\n    };\n\n    this.prev = () => {\n      let id = this.state.id - 1;\n      this.fetchQuestions(id);\n      this.setState(prevState => ({\n        selectedCat: prevState.selectedCat - 1,\n        id: prevState.id - 1\n      }));\n    };\n\n    this.fetchQuestions = id => {\n      axios.get(\"\".concat(URLStorage.API_URL, \"/getAllQuestions/\").concat(id)).then(res => {\n        const data = res.data;\n        this.setState({\n          question: data,\n          isLoaded: true\n        });\n      });\n    };\n\n    this.test = question => {\n      var test = this.state.allData; //console.log(\"test value \", test)\n\n      if (test === null) {\n        return this.setState({\n          allData: []\n        });\n      } else {\n        for (let i = 0; i < test.length; i++) {\n          //console.log(\"RUN SECONDE TIME BABY\", test[i].motivation)\n          //, test[i].motivation, test[i].comment, test[i].frequency\n          if (test[i].question === question) {//console.log(\"HELLLOOO \", test[i].frequency)\n            //return test[i].frequency \n            // if (test[i].frequency) {\n            //     console.log(\"frequency\", test[i].frequency)\n            //     return test[i].frequency\n            // } else if (test[i].motivation) {\n            //     console.log(\"motivation\", test[i].motivation)\n            //     return test[i].motivation\n            // } else if (test[i].comment) {\n            //     console.log(\"comment\", test[i].comment)\n            //     return test[i].comment\n            // } else {\n            //     console.log(\"Nothing\")\n            // }\n          }\n        }\n      }\n    };\n\n    this.selectCat = e => {\n      this.setState({\n        selectedCat: e.target.value\n      });\n      localStorage.setItem(this.props.id, JSON.stringify(this.state.answers));\n    };\n\n    this.frequencyCallback = regularityCall => {\n      this.setState({\n        regularityFromChild: regularityCall\n      });\n    };\n\n    this.state = {\n      // --------- TESTING : UNCOMMENT WHEN SERVER DOWN ----------------\n      categories: [],\n      motivations: [],\n      question: [],\n      id: 1,\n      test: null,\n      results: [],\n      regularityFromChild: 0,\n      // ----------------------------------------------------------------\n      allData: [],\n      answers: [],\n      value: [],\n      selectedCat: 1,\n      selectedMode: 0,\n      dataGet: []\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(e) {\n    //e.preventDefault();\n    console.log(\"HandleClick is running\"); //console.log(\"Inside get data\", getData)\n    // var questionStorage = localStorage.getItem(\"question\");\n    // var getData = JSON.parse(localStorage.getItem(`${questionStorage}`))\n\n    console.log(\"get Data in onClick \", getData);\n    var bigItem = JSON.parse(localStorage.getItem(\"bigItem\"));\n\n    if (!bigItem) {\n      bigItem = [];\n    }\n\n    var selectedMode = JSON.parse(localStorage.getItem(\"selectedModes\"));\n    var selectedModeName = [];\n\n    for (var i in selectedMode) {\n      selectedModeName.push(selectedMode[i].name);\n    }\n\n    bigItem.selectedMode = selectedModeName;\n    var allData = this.state.allData;\n    var copiedState = this.state;\n    copiedState = Array.from(Object.create(allData)); //console.log(\"COPIED STATE\", copiedState)\n\n    var modified = false;\n    var id = 0;\n\n    if (!this.state.allData) {\n      this.state.allData = [];\n    } else {\n      var verif = this.state.allData.find(function (data, id) {\n        if (data.id === getData.id) {\n          var indexOf = copiedState.indexOf(data); // console.log(\"INDEX OF \", indexOf)\n\n          for (var key in data) {\n            if (data[key] === getData[key] || data[key] === undefined) {\n              data[key] = getData[key];\n              modified = true;\n              copiedState.splice(indexOf, 1); //console.log(\"copied state after existing question  \", copiedState)\n            }\n          }\n\n          return true;\n        } else {\n          // console.log(\"HELLO\")\n          return false;\n        }\n      });\n\n      if (!verif || modified) {\n        copiedState.push(getData);\n        this.setState({\n          allData: copiedState\n        });\n        localStorage.setItem(\"bigItem\", JSON.stringify(copiedState));\n        console.log(\"Console log state \", this.state.allData);\n      }\n    }\n  }\n\n  componentDidMount() {\n    //localStorage.getItem(\"frequency\", \"motivations\", \"comments\", \"questions\", \"question\")\n    this.fetchQuestions(1);\n    const transportId = this.props.id;\n    var questionStorage = localStorage.getItem(\"question\");\n    var getData = JSON.parse(localStorage.getItem(\"\".concat(questionStorage)));\n    this.setState({\n      dataGet: getData\n    });\n    console.log(\"Inside get data\", getData);\n    console.log(\"Inside data get\", this.state.dataGet);\n    var bigItem = JSON.parse(localStorage.getItem(\"bigItem\"));\n    this.setState({\n      modeID: transportId,\n      allData: bigItem\n    });\n\n    if (this.state.allData.filter(answer => answer.frequency === null).length === 0) {\n      let completeMode = JSON.parse(localStorage.getItem(\"completedModes\"));\n      completeMode[this.props.index] = true;\n\n      if (this.props.group) {\n        var dummieArray = [];\n        completeMode.map(item => dummieArray.push(true));\n        localStorage.setItem(\"completedModes\", JSON.stringify(dummieArray));\n      } else {\n        localStorage.setItem(\"completedModes\", JSON.stringify(completeMode));\n      }\n    }\n  }\n\n  // componentWillMount(){\n  //     var questionStorage = localStorage.getItem(\"question\");\n  //     var getData = JSON.parse(localStorage.getItem(`${questionStorage}`))\n  //     console.log(\"Inside get data\", getData)\n  // }\n  render() {\n    // this.handleClick = this.handleClick.bind(this)\n    // NEXT / SUBMIT BUTTON SWITCH\n    console.log(\"THE STATE \", this.state.allData); //console.log(\"Copied after render \", copiedState)\n\n    const nextSubmit = this.state.selectedCat === 5 ? // || (parseInt((localStorage.getItem(\"group\")) === 1)\n    JSON.parse(localStorage.getItem(\"completedModes\")).filter(item => item === false).length === 0 ? React.createElement(Link, {\n      to: {\n        pathname: \"/confirmation\",\n        state: {\n          answers: this.state.answers\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.submit,\n      className: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    }, \"Submit\")) : React.createElement(React.Fragment, null, React.createElement(Button, {\n      className: \"submit\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282\n      },\n      __self: this\n    }, \"Submit\")) : React.createElement(Button, {\n      onClick: this.next,\n      className: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    }, \"Next\");\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }, React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"flex-end\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289\n      },\n      __self: this\n    }, this.state.selectedCat !== 1 && React.createElement(Button, {\n      style: {\n        marginRight: \"10px\"\n      },\n      onClick: this.prev,\n      className: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    }, \"Previous\"), nextSubmit), React.createElement(Categories, {\n      idPage: this.state.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295\n      },\n      __self: this\n    }), this.state.question.map((question, index) => {\n      let questionParent = question; //console.log(\"Question parent \", questionParent)\n\n      let incidentName = questionParent.incident.name;\n      questionParent.incident = incidentName;\n      localStorage.setItem(\"question\", question.question);\n      var questionStorage = localStorage.getItem(\"question\");\n      localStorage.setItem(\"\".concat(questionStorage), JSON.stringify(questionParent)); //var getData = JSON.parse(localStorage.getItem(`${questionStorage}`))\n\n      console.log(\"incident name \", incidentName);\n      return React.createElement(\"ul\", {\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 309\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        value: question.question,\n        key: index,\n        style: {\n          fontSize: \"20px\"\n        } //onClick={ this.handleClick(getData).bind(this)}\n        //onClick={ this.props.handleClic}\n        ,\n        onClick: this.handleClick.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 312\n        },\n        __self: this\n      }, question.question, React.createElement(DropdownMotivation, {\n        key: index,\n        listNameFromParent: questionParent,\n        value: this.test(question.question),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 323\n        },\n        __self: this\n      }), React.createElement(Frequency, {\n        callBackFromParent: this.frequencyCallback,\n        listNameFromParent: questionParent,\n        value: this.test(question.question),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328\n        },\n        __self: this\n      }), React.createElement(Comments, {\n        listNameFromParent: questionParent,\n        getComment: this.getBackComment,\n        value: this.test(question.question),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 333\n        },\n        __self: this\n      })));\n    })));\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\aggad.samy\\Workspace\\UITP-React-Spring\\Front-end\\src\\components\\FormPage\\Mainform\\MainForm.js"],"names":["Frequency","Comments","Motivation","Categories","URLStorage","Link","uniqueid","axios","React","Container","Row","Col","Button","Form","FormGroup","DropdownExampleCompact","ButtonGroup","Dropdown","DropdownMotivation","MainForm","Component","constructor","props","handleSelection","idx","e","setState","selectedMode","next","id","state","fetchQuestions","prevState","selectedCat","prev","get","API_URL","then","res","data","question","isLoaded","test","allData","i","length","selectCat","target","value","localStorage","setItem","JSON","stringify","answers","frequencyCallback","regularityCall","regularityFromChild","categories","motivations","results","dataGet","handleClick","bind","console","log","getData","bigItem","parse","getItem","selectedModeName","push","name","copiedState","Array","from","Object","create","modified","verif","find","indexOf","key","undefined","splice","componentDidMount","transportId","questionStorage","modeID","filter","answer","frequency","completeMode","index","group","dummieArray","map","item","render","nextSubmit","pathname","submit","display","justifyContent","marginRight","questionParent","incidentName","incident","fontSize","getBackComment"],"mappings":"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","sourcesContent":["import Frequency from './Frequency/Radio';\nimport Comments from './Comment/Comment';\n// import Legend from './Legend/Legend';\nimport Motivation from './Motivation/Motivation'\nimport Categories from './Categories/Categories'\nimport URLStorage from '../../../constants';\nimport { Link } from 'react-router-dom';\nimport uniqueid from 'uniqid';\n// import  ConfirmModal  from '../Modal';\n\nimport '../../../App.css';\n\nimport axios from 'axios';\nimport React from 'react';\nimport { Container, Row, Col, Button, Form, FormGroup } from 'reactstrap';\n\nimport './MainForm.css'\nimport DropdownExampleCompact from './Motivation/Motivation';\nimport { ButtonGroup, Dropdown } from 'semantic-ui-react';\nimport DropdownMotivation from './Motivation/Motivation';\n\nexport default class MainForm extends React.Component {\nconstructor(props){\n    super (props)\n    this.state = {\n\n        // --------- TESTING : UNCOMMENT WHEN SERVER DOWN ----------------\n        categories: [],\n        motivations: [],\n        question: [],\n        id: 1,\n        test: null,\n        results: [],\n        regularityFromChild: 0,\n        // ----------------------------------------------------------------\n\n        allData: [],\n        answers: [],\n        value: [],\n        selectedCat: 1,\n        selectedMode: 0,\n\n\n        dataGet : []\n\n    }\n    this.handleClick = this.handleClick.bind(this)\n}\n\n    handleClick(e){\n        //e.preventDefault();\n            console.log(\"HandleClick is running\")\n            //console.log(\"Inside get data\", getData)\n            // var questionStorage = localStorage.getItem(\"question\");\n            // var getData = JSON.parse(localStorage.getItem(`${questionStorage}`))\n            console.log(\"get Data in onClick \", getData)\n            var bigItem = JSON.parse(localStorage.getItem(\"bigItem\"))\n            if (!bigItem) {\n                bigItem = []\n            }\n            var selectedMode = JSON.parse(localStorage.getItem(\"selectedModes\"))\n            var selectedModeName = [];\n            for (var i in selectedMode) {\n                selectedModeName.push(selectedMode[i].name)\n            }\n            bigItem.selectedMode = selectedModeName\n            var allData = this.state.allData\n            var copiedState = this.state\n            copiedState = Array.from(Object.create(allData))\n            //console.log(\"COPIED STATE\", copiedState)\n            var modified = false\n            var id = 0\n            if (!this.state.allData){\n                this.state.allData = []\n            }else{\n                var verif = this.state.allData.find(function (data, id) {\n                    if (data.id === getData.id) {\n                        var indexOf = copiedState.indexOf(data);\n                        // console.log(\"INDEX OF \", indexOf)\n                        for (var key in data) {\n                            if (data[key] === getData[key] || data[key] === undefined) {\n                                data[key] = getData[key]\n                                modified = true\n                                copiedState.splice(indexOf, 1)\n                                //console.log(\"copied state after existing question  \", copiedState)\n                            }\n                        }\n                        return true\n                    } else {\n                        // console.log(\"HELLO\")\n                        return false\n                    }\n                })\n                if (!verif || modified) {\n                    copiedState.push(getData)\n                    this.setState({ allData : copiedState})\n                    localStorage.setItem(\"bigItem\", JSON.stringify(copiedState))\n                    console.log(\"Console log state \", this.state.allData)\n                }\n    \n            }\n            \n    }\n\n    handleSelection = (idx) => (e) => {\n        this.setState({ selectedMode: idx });\n    };\n\n    next = () => {\n        let id = this.state.id + 1;\n        this.fetchQuestions(id);\n        this.setState(prevState => ({\n            selectedCat: prevState.selectedCat + 1,\n            id: prevState.id + 1,\n\n        }));\n\n\n    }\n    prev = () => {\n        let id = this.state.id - 1;\n        this.fetchQuestions(id);\n        this.setState(prevState => ({\n            selectedCat: prevState.selectedCat - 1,\n            id: prevState.id - 1,\n        }));\n\n    }\n\n\n    fetchQuestions = (id) => {\n        axios.get(`${URLStorage.API_URL}/getAllQuestions/${id}`)\n            .then(res => {\n                const data = res.data\n                this.setState({\n                    question: data,\n                    isLoaded: true,\n                })\n            })\n    }\n\n    test = (question) => {\n        var test = this.state.allData\n        //console.log(\"test value \", test)\n        if (test === null) {\n            return this.setState({\n                allData: []\n            })\n        } else {\n\n            for (let i = 0; i < test.length; i++) {\n\n                //console.log(\"RUN SECONDE TIME BABY\", test[i].motivation)\n                //, test[i].motivation, test[i].comment, test[i].frequency\n                if (test[i].question === question) {\n                    //console.log(\"HELLLOOO \", test[i].frequency)\n                    //return test[i].frequency \n                    // if (test[i].frequency) {\n                    //     console.log(\"frequency\", test[i].frequency)\n                    //     return test[i].frequency\n                    // } else if (test[i].motivation) {\n                    //     console.log(\"motivation\", test[i].motivation)\n                    //     return test[i].motivation\n                    // } else if (test[i].comment) {\n                    //     console.log(\"comment\", test[i].comment)\n                    //     return test[i].comment\n                    // } else {\n                    //     console.log(\"Nothing\")\n                    // }\n\n\n                }\n\n            }\n        }\n\n\n    }\n\n\n\n    // anyChange = (id) => (e) => {\n    //     const inputName = e.target.name;\n    //     const inputValue = e.target.value;\n    //     let entries = Object.assign({}, this.state);\n    //     const { answers } = entries;\n    //     answers.map(answer => answer.questionID === id ? answer[inputName] = inputValue : undefined);\n    //     this.setState(entries);\n    //     localStorage.setItem(this.props.id, JSON.stringify(this.state.answers));\n\n    //     // ------------ SWITCH BOOLEAN TO COMPLETED FOR CURRENT MODE ---------------\n\n    //     console.log(this.state.allData)\n\n    //     if (this.state.allData.filter(answer => answer.frequency === null).length === 0) {\n\n    //         let completeMode = JSON.parse(localStorage.getItem(\"completedModes\"));\n    //         completeMode[this.props.index] = true;\n\n    //         if (this.props.group) {\n    //             var dummieArray = [];\n    //             completeMode.map(item => dummieArray.push(true));\n    //             localStorage.setItem(\"completedModes\", JSON.stringify(dummieArray));\n\n    //         } else {\n    //             localStorage.setItem(\"completedModes\", JSON.stringify(completeMode));\n    //         }\n    //     }\n    // }\n\n    //------------- Another try -----------------\n    // removeElement = (array, elem) => {  \n    //     var index = array.indexOf(elem);\n    //     if (index > -1) {\n    //         array.splice(index, 1);\n    //     }\n    // }\n    //--------------------------------------------\n\n    selectCat = (e) => {\n        this.setState({ selectedCat: e.target.value })\n        localStorage.setItem(this.props.id, JSON.stringify(this.state.answers));\n    }\n    frequencyCallback = (regularityCall) => {\n        this.setState({\n            regularityFromChild: regularityCall\n        })\n    }\n    componentDidMount() {\n        //localStorage.getItem(\"frequency\", \"motivations\", \"comments\", \"questions\", \"question\")\n\n        this.fetchQuestions(1);\n\n        const transportId = this.props.id;\n\n        var questionStorage = localStorage.getItem(\"question\");\n        var getData = JSON.parse(localStorage.getItem(`${questionStorage}`))\n        this.setState({\n            dataGet: getData\n        })\n        console.log(\"Inside get data\", getData)\n        console.log(\"Inside data get\", this.state.dataGet)\n\n        var bigItem = JSON.parse(localStorage.getItem(\"bigItem\"))\n        this.setState({ modeID: transportId, allData: bigItem })\n\n        if (this.state.allData.filter(answer => answer.frequency === null).length === 0) {\n\n            let completeMode = JSON.parse(localStorage.getItem(\"completedModes\"));\n            completeMode[this.props.index] = true;\n\n            if (this.props.group) {\n                var dummieArray = [];\n                completeMode.map(item => dummieArray.push(true));\n                localStorage.setItem(\"completedModes\", JSON.stringify(dummieArray));\n\n            } else {\n                localStorage.setItem(\"completedModes\", JSON.stringify(completeMode));\n            }\n        }\n    };\n\n    // componentWillMount(){\n    //     var questionStorage = localStorage.getItem(\"question\");\n    //     var getData = JSON.parse(localStorage.getItem(`${questionStorage}`))\n    //     console.log(\"Inside get data\", getData)\n    // }\n\n\n    render() {\n        // this.handleClick = this.handleClick.bind(this)\n        // NEXT / SUBMIT BUTTON SWITCH\n        console.log(\"THE STATE \", this.state.allData)\n        //console.log(\"Copied after render \", copiedState)\n        const nextSubmit = this.state.selectedCat === 5 ?\n            // || (parseInt((localStorage.getItem(\"group\")) === 1)\n            (JSON.parse(localStorage.getItem(\"completedModes\")).filter(item => item === false).length === 0) ?\n                <Link to={{ pathname: \"/confirmation\", state: { answers: this.state.answers } }}>\n                    <Button onClick={this.submit} className=\"submit\" >Submit</Button>\n                </Link>\n                : <>\n                    <Button className=\"submit\" disabled>Submit</Button>\n                </>\n            :\n            <Button onClick={this.next} className=\"submit\">Next</Button>;\n        return (\n            <React.Fragment>\n                <Container>\n                    <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n                        {this.state.selectedCat !== 1 && <Button style={{ marginRight: \"10px\" }} onClick={this.prev} className=\"submit\" >Previous</Button>}\n                        {nextSubmit}\n                    </div>\n                    <Categories idPage={this.state.id} />\n                    <br />\n                    <br />\n                    {this.state.question.map((question, index) => {\n                        let questionParent = question\n                        //console.log(\"Question parent \", questionParent)\n                        let incidentName = questionParent.incident.name\n                        \n                        questionParent.incident = incidentName\n                        localStorage.setItem(\"question\", question.question)\n                        var questionStorage = localStorage.getItem(\"question\");\n                        localStorage.setItem(`${questionStorage}`, JSON.stringify(questionParent))\n                        //var getData = JSON.parse(localStorage.getItem(`${questionStorage}`))\n                       \n                        console.log(\"incident name \", incidentName)\n                        return (\n                            <ul\n                                key={index}\n                            >\n                                <li\n                                    value={question.question}\n                                    key={index}\n                                    style={{ fontSize: \"20px\" }}\n                                    //onClick={ this.handleClick(getData).bind(this)}\n                                    //onClick={ this.props.handleClic}\n                                    onClick={this.handleClick.bind(this)}\n                                >\n                                    {\n                                        question.question\n                                    }\n                                    <DropdownMotivation\n                                        key={index}\n                                        listNameFromParent={questionParent}\n                                        value={this.test(question.question)}\n                                    />\n                                    <Frequency\n                                        callBackFromParent={this.frequencyCallback}\n                                        listNameFromParent={questionParent}\n                                        value={this.test(question.question)}\n                                    />\n                                    <Comments\n                                        listNameFromParent={questionParent}\n                                        getComment={this.getBackComment}\n                                        value={this.test(question.question)}\n                                    />\n                                </li>\n                            </ul>\n                        );\n                    })}\n                </Container>\n            </React.Fragment>\n        )\n    }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}