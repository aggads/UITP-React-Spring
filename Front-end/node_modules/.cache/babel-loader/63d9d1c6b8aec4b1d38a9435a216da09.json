{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aggad.samy\\\\Workspace\\\\uitp-service\\\\Front-end\\\\src\\\\components\\\\FormPage\\\\Mainform\\\\MainForm.js\";\nimport Frequency from './Frequency/Radio';\nimport Comments from './Comment/Comment'; // import Legend from './Legend/Legend';\n\nimport Motivation from './Motivation/Motivation';\nimport Categories from './Categories/Categories';\nimport URLStorage from '../../../constants';\nimport { Link } from 'react-router-dom';\nimport uniqueid from 'uniqid'; // import  ConfirmModal  from '../Modal';\n\nimport '../../../App.css';\nimport axios from 'axios';\nimport React from 'react';\nimport { Container, Row, Col, Button, Form, FormGroup } from 'reactstrap';\nimport './MainForm.css';\nimport DropdownExampleCompact from './Motivation/Motivation';\nimport { ButtonGroup, Dropdown } from 'semantic-ui-react';\nimport DropdownMotivation from './Motivation/Motivation';\nexport default class MainForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      // --------- TESTING : UNCOMMENT WHEN SERVER DOWN ----------------\n      categories: [],\n      motivations: [],\n      regularity: [],\n      question: [],\n      questions: [],\n      id: 1,\n      name: [],\n      incident: [],\n      results: [],\n      regularityFromChild: 0,\n      // ----------------------------------------------------------------\n      answers: [],\n      value: [],\n      selectedCat: 1,\n      selectedMode: 0\n    };\n\n    this.handleSelection = idx => e => {\n      this.setState({\n        selectedMode: idx\n      });\n    };\n\n    this.next = () => {\n      let id = this.state.id + 1;\n      this.fetchQuestions(id);\n      this.setState(prevState => ({\n        selectedCat: prevState.selectedCat + 1,\n        id: prevState.id + 1\n      }));\n    };\n\n    this.prev = () => {\n      let id = this.state.id - 1;\n      this.fetchQuestions(id);\n      this.setState(prevState => ({\n        selectedCat: prevState.selectedCat - 1,\n        id: prevState.id - 1\n      }));\n    };\n\n    this.fetchQuestions = id => {\n      axios.get(\"\".concat(URLStorage.API_URL, \"/getAllQuestions/\").concat(id)).then(res => {\n        const data = res.data;\n        this.setState({\n          question: data,\n          isLoaded: true\n        });\n      });\n    };\n\n    this.anyChange = id => e => {\n      const inputName = e.target.name;\n      const inputValue = e.target.value;\n      let entries = Object.assign({}, this.state);\n      const answers = entries.answers;\n      answers.map(answer => answer.questionID === id ? answer[inputName] = inputValue : undefined);\n      this.setState(entries);\n      localStorage.setItem(this.props.id, JSON.stringify(this.state.answers)); // ------------ SWITCH BOOLEAN TO COMPLETED FOR CURRENT MODE ---------------\n      // if (this.state.answers.filter(answer => answer.frequency === null).length === 0) {\n      //     let completeMode = JSON.parse(localStorage.getItem(\"completedModes\"));\n      //     completeMode[this.props.index] = true;\n      //     if (this.props.group) {\n      //         var dummieArray = [];\n      //         completeMode.map(item => dummieArray.push(true));\n      //         localStorage.setItem(\"completedModes\", JSON.stringify(dummieArray));\n      //     } else {\n      //         localStorage.setItem(\"completedModes\", JSON.stringify(completeMode));\n      //     }\n      // }\n    };\n\n    this.selectCat = e => {\n      this.setState({\n        selectedCat: e.target.value\n      });\n      localStorage.setItem(this.props.id, JSON.stringify(this.state.answers));\n    };\n\n    this.frequencyCallback = regularityCall => {\n      this.setState({\n        regularityFromChild: regularityCall\n      }); // console.log(regularityCall)\n    };\n  }\n\n  // componentDidUpdate() {\n  //     // handleFormSubmit = () => {\n  //     //     const { answers } = this.state;\n  //     //     localStorage.setItem('answer', JSON.stringify(answers));\n  //     //   };\n  //     window.localStorage.setItem('state', JSON.stringify(this.state));\n  //     localStorage.setItem(\"regularityId\",\n  //         JSON.stringify(this.state.regularityId))\n  // }\n  componentDidMount() {\n    localStorage.getItem(\"frequency\", \"motivations\", \"comments\", \"questions\", \"question\");\n    this.fetchQuestions(1);\n    const transportId = this.props.id;\n    this.setState({\n      modeID: transportId\n    }); // ------------------ Retreiving PREVIOUS PERIOD RESULTS ----------------------\n    // if (JSON.parse(localStorage.getItem(\"periods\"))) {\n    //     axios.post(`${URLStorage.API_URL}/resultPeriode`, {\n    //         ptoID: parseInt(localStorage.getItem(\"ptoid\")),\n    //         periodeID: JSON.parse(localStorage.getItem(\"periods\")).previousPeriod,\n    //     })\n    //         .then(res => {\n    //             const previousResult = res.data.filter(item => item.mode_id === transportId).sort((a, b) => a.questionID - b.questionID).map(item => {\n    //                 return { prevFreq: item.frequency, };\n    //             })\n    //             const newStateAnswers = this.state.answers.map((answer, idx) => {\n    //                 return { ...answer, ...previousResult[idx] }\n    //             })\n    //             // // ------------------ ADDING PREVIOUS PERIOD RESULTS TO THE STATE.ANSWERS ----------------------\n    //             this.setState({ answers: newStateAnswers });\n    //             localStorage.setItem(\"prevResult\", JSON.stringify(previousResult))\n    //         })\n    // };\n    // // -----------------------------------------------------------------\n    // axios.get(`${URLStorage.API_URL}/getallincident`)\n    //     .then(res => {\n    //         const data = res.data\n    //         this.setState({\n    //             categories: data,\n    //             isLoaded: true,\n    //         })\n    //     })\n    // axios.get(`${URLStorage.API_URL}/getallquestions`)\n    // .then(res => {\n    //     const data = res.data\n    //     this.setState({\n    //         questions: data,\n    //         isLoaded: true,\n    //     })\n    // })\n    // axios.get(`${URLStorage.API_URL}/getallquestions`)\n    // .then(response =>(\n    //         response.data.map(questions => {\n    //           questionTest.push(questions.question);\n    //           incidentTest.push(questions.incident);\n    //         }),\n    //         resultsTest = response.data,\n    //         this.setState({question : questionTest, incident : incidentTest, results: resultsTest})\n    //       ))\n  }\n\n  // getBackComment(comment){\n  //     localStorage.setItem(\"comments\", this.state.comment)\n  // }\n  render() {\n    // NEXT / SUBMIT BUTTON SWITCH\n    const nextSubmit = this.state.selectedCat === 5 ? // || (parseInt((localStorage.getItem(\"group\")) === 1)\n    JSON.parse(localStorage.getItem(\"completedModes\")).filter(item => item === false).length === 0 ? React.createElement(Link, {\n      to: {\n        pathname: \"/confirmation\",\n        state: {\n          answers: this.state.answers\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.submit,\n      className: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, \"Submit\")) : React.createElement(React.Fragment, null, React.createElement(Button, {\n      className: \"submit\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, \"Submit\")) : React.createElement(Button, {\n      onClick: this.next,\n      className: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, \"Next\"); //console.log(this.state.categories);\n    // console.log(this.state.regularityFromChild);\n    //console.log(this.state.motivations);\n    // console.log(this.state.question);\n    // console.log(this.state.answers);\n    // console.log(this.state.id);\n    //**********************************************************************\n    //**************************** DONE ************************************ \n    //**********************************************************************\n\n    var i;\n    console.log(\"----------------- local storage -----------------\"); //// ----------- display all value whit keys -----------------\n    // for (i = 0; i < localStorage.length; i++)   {\n    //     console.log(localStorage.key(i) + \"=[\" + localStorage.getItem(localStorage.key(i)) + \"]\");\n    // }\n    // ------------ display all keys -------------------\n    // var keys = Object.keys(localStorage);\n    // keys.forEach(function(key){\n    //     console.log(key);\n    // });\n    // -------------- TEST ------------------\n    // for (i = 0; i < localStorage.length; i++)   {\n    //     var summary = [];\n    //     var sKey = localStorage.getItem(localStorage.key(i));\n    //     //(localStorage.key(i) + localStorage.getItem(localStorage.key(i)))\n    //     summary.push(sKey)\n    //     //console.log(localStorage.key(i) + \"  \" + localStorage.getItem(localStorage.key(i)))\n    //     console.log(summary)\n    //     //console.log(localStorage.key(i) + \"=[\" + localStorage.getItem(localStorage.key(i)) + \"]\");\n    // }\n    //------------------ THIS WORK -------------------------------//\n    //------------- Store key and value in array ----------------//\n\n    for (let i = 0; i < localStorage.length; i++) {\n      let key = localStorage.key(i);\n      let value = localStorage.getItem(answer[key]);\n      var summary = [key, value];\n      localStorage.setItem(\"finalAnswer\", summary);\n      var bigSummary = localStorage.getItem(\"finalAnswer\");\n      var bigSummary = [summary]; //console.log(summary);\n\n      console.log(bigSummary); //console.log(key, value);\n    }\n\n    console.log(\"----------------- End of local storage -----------------\");\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    }, React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"flex-end\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295\n      },\n      __self: this\n    }, this.state.selectedCat !== 1 && React.createElement(Button, {\n      style: {\n        marginRight: \"10px\"\n      },\n      onClick: this.prev,\n      className: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296\n      },\n      __self: this\n    }, \"Previous\"), nextSubmit), React.createElement(Categories, {\n      idPage: this.state.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301\n      },\n      __self: this\n    }), this.state.question.map((question, index) => {\n      //console.log(this.state.question[index])\n      // localStorage.setItem(\"question\", question.question)\n      // var questionStorage = localStorage.getItem(\"question\");\n      const questionParent = this.state.question[index];\n      questionParent.incident = questionParent.incident.name; //console.log(questionParent)\n\n      return React.createElement(\"ul\", {\n        key: index // onClick={(a) => {\n        //         console.log({questionParent})\n        //     }\n        // }\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 311\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        value: question.question,\n        key: index,\n        style: {\n          fontSize: \"20px\"\n        },\n        onClick: a => {\n          //localStorage.setItem(\"question\" + index.toString() + this.state.id.toString(), question.question)\n          localStorage.setItem(\"question\", question.question); //var test = localStorage.getItem(\"question\");\n          //console.log(\"-----------------test------------\\n\", test);\n\n          var questionStorage = localStorage.getItem(\"question\"); //questionParent.incident = questionParent.incident.name\n          //console.log(questionStorage)\n          //console.log(questionParent.incident.name)\n\n          localStorage.setItem(\"\".concat(questionStorage), JSON.stringify(questionParent));\n          var answer = [];\n          answer = JSON.parse(localStorage.getItem(\"\".concat(questionStorage))); //console.log(answer)\n          //console.log(questionStorage)\n          //console.log(questionParent)\n          //console.log(this.state.question[index])\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318\n        },\n        __self: this\n      }, question.question, React.createElement(DropdownMotivation, {\n        key: index,\n        listNameFromParent: questionParent // onClick={\n        //     console.log(\"a.nativeEvent\")\n        //     //localStorage.setItem(\"motivations\" + questionId, a.target.value)\n        //   }\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 345\n        },\n        __self: this\n      }), React.createElement(Frequency, {\n        callBackFromParent: this.frequencyCallback,\n        listNameFromParent: questionParent // onClick={\n        //     console.log(\"hello\")\n        // }\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 354\n        },\n        __self: this\n      }), React.createElement(Comments, {\n        listNameFromParent: questionParent,\n        getComment: this.getBackComment,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 362\n        },\n        __self: this\n      })));\n    })));\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\aggad.samy\\Workspace\\uitp-service\\Front-end\\src\\components\\FormPage\\Mainform\\MainForm.js"],"names":["Frequency","Comments","Motivation","Categories","URLStorage","Link","uniqueid","axios","React","Container","Row","Col","Button","Form","FormGroup","DropdownExampleCompact","ButtonGroup","Dropdown","DropdownMotivation","MainForm","Component","state","categories","motivations","regularity","question","questions","id","name","incident","results","regularityFromChild","answers","value","selectedCat","selectedMode","handleSelection","idx","e","setState","next","fetchQuestions","prevState","prev","get","API_URL","then","res","data","isLoaded","anyChange","inputName","target","inputValue","entries","Object","assign","map","answer","questionID","undefined","localStorage","setItem","props","JSON","stringify","selectCat","frequencyCallback","regularityCall","componentDidMount","getItem","transportId","modeID","render","nextSubmit","parse","filter","item","length","pathname","submit","i","console","log","key","summary","bigSummary","display","justifyContent","marginRight","index","questionParent","fontSize","a","questionStorage","getBackComment"],"mappings":"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","sourcesContent":["import Frequency from './Frequency/Radio';\nimport Comments from './Comment/Comment';\n// import Legend from './Legend/Legend';\nimport Motivation from './Motivation/Motivation'\nimport Categories from './Categories/Categories'\nimport URLStorage from '../../../constants';\nimport { Link } from 'react-router-dom';\nimport uniqueid from 'uniqid';\n// import  ConfirmModal  from '../Modal';\n\nimport '../../../App.css';\n\nimport axios from 'axios';\nimport React from 'react';\nimport { Container, Row, Col, Button, Form, FormGroup } from 'reactstrap';\n\nimport './MainForm.css'\nimport DropdownExampleCompact from './Motivation/Motivation';\nimport { ButtonGroup, Dropdown } from 'semantic-ui-react';\nimport DropdownMotivation from './Motivation/Motivation';\n\nexport default class MainForm extends React.Component {\n\n    state = {\n\n        // --------- TESTING : UNCOMMENT WHEN SERVER DOWN ----------------\n        categories: [],\n        motivations: [],\n        regularity: [],\n        question: [],\n        questions: [],\n        id: 1,\n        name: [],\n        incident: [],\n        results: [],\n        regularityFromChild: 0,\n        // ----------------------------------------------------------------\n\n        answers: [],\n        value: [],\n        selectedCat: 1,\n        selectedMode: 0,\n\n    };\n\n    // handleFormSubmit = () => {\n    //     const { answers } = this.state;\n    //     localStorage.setItem('answer', JSON.stringify(answers));\n    //   };\n\n    handleSelection = (idx) => (e) => {\n        this.setState({ selectedMode: idx });\n    };\n\n    next = () => {\n        let id = this.state.id + 1;\n        this.fetchQuestions(id);\n        this.setState(prevState => ({\n            selectedCat: prevState.selectedCat + 1,\n            id: prevState.id + 1,\n\n        }));\n\n\n    }\n    prev = () => {\n        let id = this.state.id - 1;\n        this.fetchQuestions(id);\n        this.setState(prevState => ({\n            selectedCat: prevState.selectedCat - 1,\n            id: prevState.id - 1,\n        }));\n\n    }\n\n\n    fetchQuestions = (id) => {\n        axios.get(`${URLStorage.API_URL}/getAllQuestions/${id}`)\n            .then(res => {\n                const data = res.data\n                this.setState({\n                    question: data,\n                    isLoaded: true,\n                })\n            })\n    }\n\n\n\n    anyChange = (id) => (e) => {\n        const inputName = e.target.name;\n        const inputValue = e.target.value;\n        let entries = Object.assign({}, this.state);\n        const { answers } = entries;\n        answers.map(answer => answer.questionID === id ? answer[inputName] = inputValue : undefined);\n        this.setState(entries);\n        localStorage.setItem(this.props.id, JSON.stringify(this.state.answers));\n\n        // ------------ SWITCH BOOLEAN TO COMPLETED FOR CURRENT MODE ---------------\n\n        // if (this.state.answers.filter(answer => answer.frequency === null).length === 0) {\n\n        //     let completeMode = JSON.parse(localStorage.getItem(\"completedModes\"));\n        //     completeMode[this.props.index] = true;\n\n        //     if (this.props.group) {\n        //         var dummieArray = [];\n        //         completeMode.map(item => dummieArray.push(true));\n        //         localStorage.setItem(\"completedModes\", JSON.stringify(dummieArray));\n\n        //     } else {\n        //         localStorage.setItem(\"completedModes\", JSON.stringify(completeMode));\n        //     }\n        // }\n    }\n\n    selectCat = (e) => {\n        this.setState({ selectedCat: e.target.value })\n        localStorage.setItem(this.props.id, JSON.stringify(this.state.answers));\n    }\n    // onClick = (e) => {\n    //             localStorage.setItem(\"answer\", JSON.stringify(this.state.regularity))\n    //         }\n\n    // componentDidUpdate(){\n    //     onClick = (e) => {\n    //         localStorage.setItem(\"answer\", JSON.stringify(this.state.regularity))\n    //     }\n\n    // }\n\n    frequencyCallback = (regularityCall) => {\n        this.setState({\n            regularityFromChild: regularityCall\n        })\n        // console.log(regularityCall)\n    }\n\n    // componentDidUpdate() {\n\n    //     // handleFormSubmit = () => {\n    //     //     const { answers } = this.state;\n    //     //     localStorage.setItem('answer', JSON.stringify(answers));\n    //     //   };\n    //     window.localStorage.setItem('state', JSON.stringify(this.state));\n\n    //     localStorage.setItem(\"regularityId\",\n    //         JSON.stringify(this.state.regularityId))\n    // }\n\n    componentDidMount() {\n        localStorage.getItem(\"frequency\", \"motivations\", \"comments\", \"questions\", \"question\")\n\n        this.fetchQuestions(1);\n\n        const transportId = this.props.id;\n        this.setState({ modeID: transportId })\n\n        // ------------------ Retreiving PREVIOUS PERIOD RESULTS ----------------------\n\n        // if (JSON.parse(localStorage.getItem(\"periods\"))) {\n\n        //     axios.post(`${URLStorage.API_URL}/resultPeriode`, {\n        //         ptoID: parseInt(localStorage.getItem(\"ptoid\")),\n        //         periodeID: JSON.parse(localStorage.getItem(\"periods\")).previousPeriod,\n        //     })\n        //         .then(res => {\n        //             const previousResult = res.data.filter(item => item.mode_id === transportId).sort((a, b) => a.questionID - b.questionID).map(item => {\n\n        //                 return { prevFreq: item.frequency, };\n        //             })\n        //             const newStateAnswers = this.state.answers.map((answer, idx) => {\n        //                 return { ...answer, ...previousResult[idx] }\n        //             })\n        //             // // ------------------ ADDING PREVIOUS PERIOD RESULTS TO THE STATE.ANSWERS ----------------------\n        //             this.setState({ answers: newStateAnswers });\n        //             localStorage.setItem(\"prevResult\", JSON.stringify(previousResult))\n        //         })\n        // };\n        // // -----------------------------------------------------------------\n\n\n        // axios.get(`${URLStorage.API_URL}/getallincident`)\n        //     .then(res => {\n        //         const data = res.data\n        //         this.setState({\n        //             categories: data,\n        //             isLoaded: true,\n        //         })\n        //     })\n\n        // axios.get(`${URLStorage.API_URL}/getallquestions`)\n        // .then(res => {\n        //     const data = res.data\n        //     this.setState({\n        //         questions: data,\n        //         isLoaded: true,\n        //     })\n        // })\n\n        // axios.get(`${URLStorage.API_URL}/getallquestions`)\n        // .then(response =>(\n        //         response.data.map(questions => {\n        //           questionTest.push(questions.question);\n        //           incidentTest.push(questions.incident);\n        //         }),\n        //         resultsTest = response.data,\n        //         this.setState({question : questionTest, incident : incidentTest, results: resultsTest})\n        //       ))\n    };\n\n    // getBackComment(comment){\n    //     localStorage.setItem(\"comments\", this.state.comment)\n        \n    // }\n\n\n\n    render() {\n        // NEXT / SUBMIT BUTTON SWITCH\n        const nextSubmit = this.state.selectedCat === 5 ?\n            // || (parseInt((localStorage.getItem(\"group\")) === 1)\n            (JSON.parse(localStorage.getItem(\"completedModes\")).filter(item => item === false).length === 0) ?\n                <Link to={{ pathname: \"/confirmation\", state: { answers: this.state.answers } }}>\n                    <Button onClick={this.submit} className=\"submit\" >Submit</Button>\n                </Link>\n                : <>\n                    <Button className=\"submit\" disabled>Submit</Button>\n                </>\n            :\n            <Button onClick={this.next} className=\"submit\">Next</Button>;\n\n        //console.log(this.state.categories);\n        // console.log(this.state.regularityFromChild);\n        //console.log(this.state.motivations);\n        // console.log(this.state.question);\n        // console.log(this.state.answers);\n        // console.log(this.state.id);\n        \n        //**********************************************************************\n        //**************************** DONE ************************************ \n        //**********************************************************************\n        \n        var i;\n\n        console.log(\"----------------- local storage -----------------\");\n        //// ----------- display all value whit keys -----------------\n        // for (i = 0; i < localStorage.length; i++)   {\n        //     console.log(localStorage.key(i) + \"=[\" + localStorage.getItem(localStorage.key(i)) + \"]\");\n\n        // }\n\n        \n        // ------------ display all keys -------------------\n        // var keys = Object.keys(localStorage);\n        // keys.forEach(function(key){\n        //     console.log(key);\n        // });\n\n        // -------------- TEST ------------------\n        // for (i = 0; i < localStorage.length; i++)   {\n        //     var summary = [];\n        //     var sKey = localStorage.getItem(localStorage.key(i));\n        //     //(localStorage.key(i) + localStorage.getItem(localStorage.key(i)))\n            \n\n        //     summary.push(sKey)\n\n        //     //console.log(localStorage.key(i) + \"  \" + localStorage.getItem(localStorage.key(i)))\n        //     console.log(summary)\n        //     //console.log(localStorage.key(i) + \"=[\" + localStorage.getItem(localStorage.key(i)) + \"]\");\n\n        // }\n\n        //------------------ THIS WORK -------------------------------//\n        //------------- Store key and value in array ----------------//\n        for (let i = 0; i < localStorage.length; i++){\n            let key = localStorage.key(i);\n            let value = localStorage.getItem(answer[key]);\n            var summary = [key, value];\n            localStorage.setItem(\"finalAnswer\", summary);\n            var bigSummary = localStorage.getItem(\"finalAnswer\");\n            var bigSummary = [summary];\n            //console.log(summary);\n            console.log(bigSummary)\n            //console.log(key, value);\n          }\n\n        console.log(\"----------------- End of local storage -----------------\");\n\n        \n        return (\n            <React.Fragment>\n                <Container>\n                    <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n                        {this.state.selectedCat !== 1 && <Button style={{ marginRight: \"10px\" }} onClick={this.prev} className=\"submit\" >Previous</Button>}\n                        {nextSubmit}\n                    </div>\n                    <Categories idPage={this.state.id} />\n                    <br />\n                    <br />\n                    {this.state.question.map((question, index) => {\n                            //console.log(this.state.question[index])\n                            // localStorage.setItem(\"question\", question.question)\n                            // var questionStorage = localStorage.getItem(\"question\");\n                            const questionParent  = this.state.question[index]\n                            questionParent.incident = questionParent.incident.name\n                            //console.log(questionParent)\n\n                        return (\n                            <ul \n                                key={index}\n                                // onClick={(a) => {\n                                //         console.log({questionParent})\n                                //     }\n                                // }\n                            >\n                                <li \n                                    value={question.question}\n                                    key={index} \n                                    style={{ fontSize: \"20px\" }}\n                                    onClick={(a) => {\n                                        //localStorage.setItem(\"question\" + index.toString() + this.state.id.toString(), question.question)\n                                        localStorage.setItem(\"question\", question.question)\n                                        //var test = localStorage.getItem(\"question\");\n                                        //console.log(\"-----------------test------------\\n\", test);\n                                        var questionStorage = localStorage.getItem(\"question\");\n                                        //questionParent.incident = questionParent.incident.name\n                                        //console.log(questionStorage)\n                                        //console.log(questionParent.incident.name)\n                                        localStorage.setItem(`${questionStorage}`, JSON.stringify(questionParent))\n                                        var answer = []\n                                        answer = JSON.parse(localStorage.getItem(`${questionStorage}`))\n                                        //console.log(answer)\n                                        //console.log(questionStorage)\n                                        //console.log(questionParent)\n                                        //console.log(this.state.question[index])\n                                    }\n                                }\n                                    \n                                >\n                                    {\n                                        question.question\n                                    }\n                                    <DropdownMotivation\n                                        key={index}\n                                        listNameFromParent={questionParent}\n                                        // onClick={\n                                        //     console.log(\"a.nativeEvent\")\n                                        //     //localStorage.setItem(\"motivations\" + questionId, a.target.value)\n                                        //   }\n                                        \n                                    />\n                                    <Frequency\n                                        callBackFromParent={this.frequencyCallback}\n                                        listNameFromParent={questionParent}\n                                        // onClick={\n                                        //     console.log(\"hello\")\n                                        // }\n                                       \n                                    />\n                                    <Comments\n                                        listNameFromParent={questionParent}\n                                        getComment = {this.getBackComment}\n                                    />\n                                </li>\n                            </ul>\n                        );\n                    })}\n                </Container>\n            </React.Fragment>\n        )\n    }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}