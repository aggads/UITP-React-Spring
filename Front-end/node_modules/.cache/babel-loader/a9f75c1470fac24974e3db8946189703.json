{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aggad.samy\\\\Workspace\\\\uitp-service\\\\Front-end\\\\src\\\\components\\\\FormPage\\\\Mainform\\\\MainForm.js\";\nimport Frequency from './Frequency/Radio';\nimport Comments from './Comment/Comment'; // import Legend from './Legend/Legend';\n\nimport Motivation from './Motivation/Motivation';\nimport Categories from './Categories/Categories';\nimport URLStorage from '../../../constants';\nimport { Link } from 'react-router-dom';\nimport uniqueid from 'uniqid'; // import  ConfirmModal  from '../Modal';\n\nimport '../../../App.css';\nimport axios from 'axios';\nimport React from 'react';\nimport { Container, Row, Col, Button, Form, FormGroup } from 'reactstrap';\nimport './MainForm.css';\nimport DropdownExampleCompact from './Motivation/Motivation';\nimport { ButtonGroup, Dropdown } from 'semantic-ui-react';\nimport DropdownMotivation from './Motivation/Motivation';\nexport default class MainForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      // --------- TESTING : UNCOMMENT WHEN SERVER DOWN ----------------\n      categories: [],\n      motivations: [],\n      regularity: [],\n      question: [],\n      questions: [],\n      id: 1,\n      name: [],\n      incident: [],\n      results: [],\n      regularityFromChild: 0,\n      // ----------------------------------------------------------------\n      allData: [],\n      answers: [],\n      value: [],\n      selectedCat: 1,\n      selectedMode: 0\n    };\n\n    this.handleSelection = idx => e => {\n      this.setState({\n        selectedMode: idx\n      });\n    };\n\n    this.next = () => {\n      let id = this.state.id + 1;\n      this.fetchQuestions(id);\n      this.setState(prevState => ({\n        selectedCat: prevState.selectedCat + 1,\n        id: prevState.id + 1\n      }));\n    };\n\n    this.prev = () => {\n      let id = this.state.id - 1;\n      this.fetchQuestions(id);\n      this.setState(prevState => ({\n        selectedCat: prevState.selectedCat - 1,\n        id: prevState.id - 1\n      }));\n    };\n\n    this.fetchQuestions = id => {\n      axios.get(\"\".concat(URLStorage.API_URL, \"/getAllQuestions/\").concat(id)).then(res => {\n        const data = res.data;\n        this.setState({\n          question: data,\n          isLoaded: true\n        });\n      });\n    };\n\n    this.anyChange = id => e => {\n      const inputName = e.target.name;\n      const inputValue = e.target.value;\n      let entries = Object.assign({}, this.state);\n      const answers = entries.answers;\n      answers.map(answer => answer.questionID === id ? answer[inputName] = inputValue : undefined);\n      this.setState(entries);\n      localStorage.setItem(this.props.id, JSON.stringify(this.state.answers)); // ------------ SWITCH BOOLEAN TO COMPLETED FOR CURRENT MODE ---------------\n\n      console.log(this.state.allData);\n      var bigItem = JSON.parse(localStorage.getItem(\"bigItem\"));\n      console.log(bigItem);\n\n      if (this.state.allData.filter(answer => answer.frequency === null).length === 0) {\n        let completeMode = JSON.parse(localStorage.getItem(\"completedModes\"));\n        completeMode[this.props.index] = true;\n\n        if (this.props.group) {\n          var dummieArray = [];\n          completeMode.map(item => dummieArray.push(true));\n          localStorage.setItem(\"completedModes\", JSON.stringify(dummieArray));\n        } else {\n          localStorage.setItem(\"completedModes\", JSON.stringify(completeMode));\n        }\n      }\n    };\n\n    this.selectCat = e => {\n      this.setState({\n        selectedCat: e.target.value\n      });\n      localStorage.setItem(this.props.id, JSON.stringify(this.state.answers));\n    };\n\n    this.frequencyCallback = regularityCall => {\n      this.setState({\n        regularityFromChild: regularityCall\n      });\n    };\n  }\n\n  componentDidMount() {\n    localStorage.getItem(\"frequency\", \"motivations\", \"comments\", \"questions\", \"question\");\n    this.fetchQuestions(1);\n    const transportId = this.props.id;\n    this.setState({\n      modeID: transportId\n    }); // ------------------ Retreiving PREVIOUS PERIOD RESULTS ----------------------\n    // if (JSON.parse(localStorage.getItem(\"periods\"))) {\n    //     axios.post(`${URLStorage.API_URL}/resultPeriode`, {\n    //         ptoID: parseInt(localStorage.getItem(\"ptoid\")),\n    //         periodeID: JSON.parse(localStorage.getItem(\"periods\")).previousPeriod,\n    //     })\n    //         .then(res => {\n    //             const previousResult = res.data.filter(item => item.mode_id === transportId).sort((a, b) => a.questionID - b.questionID).map(item => {\n    //                 return { prevFreq: item.frequency, };\n    //             })\n    //             const newStateAnswers = this.state.answers.map((answer, idx) => {\n    //                 return { ...answer, ...previousResult[idx] }\n    //             })\n    //             // // ------------------ ADDING PREVIOUS PERIOD RESULTS TO THE STATE.ANSWERS ----------------------\n    //             this.setState({ answers: newStateAnswers });\n    //             localStorage.setItem(\"prevResult\", JSON.stringify(previousResult))\n    //         })\n    // };\n    // // -----------------------------------------------------------------\n    // axios.get(`${URLStorage.API_URL}/getallincident`)\n    //     .then(res => {\n    //         const data = res.data\n    //         this.setState({\n    //             categories: data,\n    //             isLoaded: true,\n    //         })\n    //     })\n    // axios.get(`${URLStorage.API_URL}/getallquestions`)\n    // .then(res => {\n    //     const data = res.data\n    //     this.setState({\n    //         questions: data,\n    //         isLoaded: true,\n    //     })\n    // })\n    // axios.get(`${URLStorage.API_URL}/getallquestions`)\n    // .then(response =>(\n    //         response.data.map(questions => {\n    //           questionTest.push(questions.question);\n    //           incidentTest.push(questions.incident);\n    //         }),\n    //         resultsTest = response.data,\n    //         this.setState({question : questionTest, incident : incidentTest, results: resultsTest})\n    //       ))\n  }\n\n  render() {\n    // NEXT / SUBMIT BUTTON SWITCH\n    const nextSubmit = this.state.selectedCat === 5 ? // || (parseInt((localStorage.getItem(\"group\")) === 1)\n    JSON.parse(localStorage.getItem(\"completedModes\")).filter(item => item === false).length === 0 ? React.createElement(Link, {\n      to: {\n        pathname: \"/confirmation\",\n        state: {\n          answers: this.state.answers\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.submit,\n      className: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, \"Submit\")) : React.createElement(React.Fragment, null, React.createElement(Button, {\n      className: \"submit\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, \"Submit\")) : React.createElement(Button, {\n      onClick: this.next,\n      className: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, \"Next\");\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"flex-end\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, this.state.selectedCat !== 1 && React.createElement(Button, {\n      style: {\n        marginRight: \"10px\"\n      },\n      onClick: this.prev,\n      className: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, \"Previous\"), nextSubmit), React.createElement(Categories, {\n      idPage: this.state.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }), this.state.question.map((question, index) => {\n      let questionParent = question;\n      let incidentName = questionParent.incident.name;\n      questionParent.incident = incidentName;\n      return React.createElement(\"ul\", {\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        value: question.question,\n        key: index,\n        style: {\n          fontSize: \"20px\"\n        },\n        onClick: a => {\n          localStorage.setItem(\"question\", question.question);\n          var questionStorage = localStorage.getItem(\"question\");\n          localStorage.setItem(\"\".concat(questionStorage), JSON.stringify(questionParent));\n          let answer = this.state.allData;\n          var getData = JSON.parse(localStorage.getItem(\"\".concat(questionStorage)));\n          var verif = answer.find(function (data) {\n            if (data.id === getData.id) {\n              //console.log(\"true\")\n              return true;\n            } else {\n              //console.log(\"false\")\n              return false;\n            }\n          });\n\n          if (verif === undefined) {\n            answer.push(getData);\n            localStorage.setItem(\"bigItem\", JSON.stringify(answer)); //console.log(\"See this ===> \", answer)\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }, question.question, React.createElement(DropdownMotivation, {\n        key: index,\n        listNameFromParent: questionParent,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256\n        },\n        __self: this\n      }), React.createElement(Frequency, {\n        callBackFromParent: this.frequencyCallback,\n        listNameFromParent: questionParent,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260\n        },\n        __self: this\n      }), React.createElement(Comments, {\n        listNameFromParent: questionParent,\n        getComment: this.getBackComment,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264\n        },\n        __self: this\n      })));\n    })));\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\aggad.samy\\Workspace\\uitp-service\\Front-end\\src\\components\\FormPage\\Mainform\\MainForm.js"],"names":["Frequency","Comments","Motivation","Categories","URLStorage","Link","uniqueid","axios","React","Container","Row","Col","Button","Form","FormGroup","DropdownExampleCompact","ButtonGroup","Dropdown","DropdownMotivation","MainForm","Component","state","categories","motivations","regularity","question","questions","id","name","incident","results","regularityFromChild","allData","answers","value","selectedCat","selectedMode","handleSelection","idx","e","setState","next","fetchQuestions","prevState","prev","get","API_URL","then","res","data","isLoaded","anyChange","inputName","target","inputValue","entries","Object","assign","map","answer","questionID","undefined","localStorage","setItem","props","JSON","stringify","console","log","bigItem","parse","getItem","filter","frequency","length","completeMode","index","group","dummieArray","item","push","selectCat","frequencyCallback","regularityCall","componentDidMount","transportId","modeID","render","nextSubmit","pathname","submit","display","justifyContent","marginRight","questionParent","incidentName","fontSize","a","questionStorage","getData","verif","find","getBackComment"],"mappings":"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","sourcesContent":["import Frequency from './Frequency/Radio';\nimport Comments from './Comment/Comment';\n// import Legend from './Legend/Legend';\nimport Motivation from './Motivation/Motivation'\nimport Categories from './Categories/Categories'\nimport URLStorage from '../../../constants';\nimport { Link } from 'react-router-dom';\nimport uniqueid from 'uniqid';\n// import  ConfirmModal  from '../Modal';\n\nimport '../../../App.css';\n\nimport axios from 'axios';\nimport React from 'react';\nimport { Container, Row, Col, Button, Form, FormGroup } from 'reactstrap';\n\nimport './MainForm.css'\nimport DropdownExampleCompact from './Motivation/Motivation';\nimport { ButtonGroup, Dropdown } from 'semantic-ui-react';\nimport DropdownMotivation from './Motivation/Motivation';\n\nexport default class MainForm extends React.Component {\n\n    state = {\n\n        // --------- TESTING : UNCOMMENT WHEN SERVER DOWN ----------------\n        categories: [],\n        motivations: [],\n        regularity: [],\n        question: [],\n        questions: [],\n        id: 1,\n        name: [],\n        incident: [],\n        results: [],\n        regularityFromChild: 0,\n        // ----------------------------------------------------------------\n\n        allData: [],\n        answers: [],\n        value: [],\n        selectedCat: 1,\n        selectedMode: 0,\n\n    };\n    handleSelection = (idx) => (e) => {\n        this.setState({ selectedMode: idx });\n    };\n\n    next = () => {\n        let id = this.state.id + 1;\n        this.fetchQuestions(id);\n        this.setState(prevState => ({\n            selectedCat: prevState.selectedCat + 1,\n            id: prevState.id + 1,\n\n        }));\n\n\n    }\n    prev = () => {\n        let id = this.state.id - 1;\n        this.fetchQuestions(id);\n        this.setState(prevState => ({\n            selectedCat: prevState.selectedCat - 1,\n            id: prevState.id - 1,\n        }));\n\n    }\n\n\n    fetchQuestions = (id) => {\n        axios.get(`${URLStorage.API_URL}/getAllQuestions/${id}`)\n            .then(res => {\n                const data = res.data\n                this.setState({\n                    question: data,\n                    isLoaded: true,\n                })\n            })\n    }\n\n\n\n    anyChange = (id) => (e) => {\n        const inputName = e.target.name;\n        const inputValue = e.target.value;\n        let entries = Object.assign({}, this.state);\n        const { answers } = entries;\n        answers.map(answer => answer.questionID === id ? answer[inputName] = inputValue : undefined);\n        this.setState(entries);\n        localStorage.setItem(this.props.id, JSON.stringify(this.state.answers));\n\n        // ------------ SWITCH BOOLEAN TO COMPLETED FOR CURRENT MODE ---------------\n\n        console.log(this.state.allData)\n\n        var bigItem = JSON.parse(localStorage.getItem(\"bigItem\"))\n\n                                        console.log(bigItem)\n\n        if (this.state.allData.filter(answer => answer.frequency === null).length === 0) {\n\n            let completeMode = JSON.parse(localStorage.getItem(\"completedModes\"));\n            completeMode[this.props.index] = true;\n\n            if (this.props.group) {\n                var dummieArray = [];\n                completeMode.map(item => dummieArray.push(true));\n                localStorage.setItem(\"completedModes\", JSON.stringify(dummieArray));\n\n            } else {\n                localStorage.setItem(\"completedModes\", JSON.stringify(completeMode));\n            }\n        }\n    }\n\n    selectCat = (e) => {\n        this.setState({ selectedCat: e.target.value })\n        localStorage.setItem(this.props.id, JSON.stringify(this.state.answers));\n    }\n    frequencyCallback = (regularityCall) => {\n        this.setState({\n            regularityFromChild: regularityCall\n        })\n    }\n    componentDidMount() {\n        localStorage.getItem(\"frequency\", \"motivations\", \"comments\", \"questions\", \"question\")\n\n        this.fetchQuestions(1);\n\n        const transportId = this.props.id;\n        this.setState({ modeID: transportId })\n\n        // ------------------ Retreiving PREVIOUS PERIOD RESULTS ----------------------\n\n        // if (JSON.parse(localStorage.getItem(\"periods\"))) {\n\n        //     axios.post(`${URLStorage.API_URL}/resultPeriode`, {\n        //         ptoID: parseInt(localStorage.getItem(\"ptoid\")),\n        //         periodeID: JSON.parse(localStorage.getItem(\"periods\")).previousPeriod,\n        //     })\n        //         .then(res => {\n        //             const previousResult = res.data.filter(item => item.mode_id === transportId).sort((a, b) => a.questionID - b.questionID).map(item => {\n\n        //                 return { prevFreq: item.frequency, };\n        //             })\n        //             const newStateAnswers = this.state.answers.map((answer, idx) => {\n        //                 return { ...answer, ...previousResult[idx] }\n        //             })\n        //             // // ------------------ ADDING PREVIOUS PERIOD RESULTS TO THE STATE.ANSWERS ----------------------\n        //             this.setState({ answers: newStateAnswers });\n        //             localStorage.setItem(\"prevResult\", JSON.stringify(previousResult))\n        //         })\n        // };\n        // // -----------------------------------------------------------------\n\n\n        // axios.get(`${URLStorage.API_URL}/getallincident`)\n        //     .then(res => {\n        //         const data = res.data\n        //         this.setState({\n        //             categories: data,\n        //             isLoaded: true,\n        //         })\n        //     })\n\n        // axios.get(`${URLStorage.API_URL}/getallquestions`)\n        // .then(res => {\n        //     const data = res.data\n        //     this.setState({\n        //         questions: data,\n        //         isLoaded: true,\n        //     })\n        // })\n\n        // axios.get(`${URLStorage.API_URL}/getallquestions`)\n        // .then(response =>(\n        //         response.data.map(questions => {\n        //           questionTest.push(questions.question);\n        //           incidentTest.push(questions.incident);\n        //         }),\n        //         resultsTest = response.data,\n        //         this.setState({question : questionTest, incident : incidentTest, results: resultsTest})\n        //       ))\n    };\n    render() {\n        // NEXT / SUBMIT BUTTON SWITCH\n        const nextSubmit = this.state.selectedCat === 5 ?\n            // || (parseInt((localStorage.getItem(\"group\")) === 1)\n            (JSON.parse(localStorage.getItem(\"completedModes\")).filter(item => item === false).length === 0) ?\n                <Link to={{ pathname: \"/confirmation\", state: { answers: this.state.answers } }}>\n                    <Button onClick={this.submit} className=\"submit\" >Submit</Button>\n                </Link>\n                : <>\n                    <Button className=\"submit\" disabled>Submit</Button>\n                </>\n            :\n            <Button onClick={this.next} className=\"submit\">Next</Button>;\n        return (\n            <React.Fragment>\n                <Container>\n                    <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n                        {this.state.selectedCat !== 1 && <Button style={{ marginRight: \"10px\" }} onClick={this.prev} className=\"submit\" >Previous</Button>}\n                        {nextSubmit}\n                    </div>\n                    <Categories idPage={this.state.id} />\n                    <br />\n                    <br />\n                    {this.state.question.map((question, index) => {\n                            let questionParent  = question\n                            let incidentName = questionParent.incident.name\n                            questionParent.incident = incidentName\n                        return (\n                            <ul \n                                key={index}\n                            >\n                                <li \n                                    value={question.question}\n                                    key={index} \n                                    style={{ fontSize: \"20px\" }}\n                                    onClick={(a) => {\n                                        localStorage.setItem(\"question\", question.question)\n                                        var questionStorage = localStorage.getItem(\"question\");\n                                        localStorage.setItem(`${questionStorage}`, JSON.stringify(questionParent))\n                                        let answer = this.state.allData;\n                                        \n                                        var getData = JSON.parse(localStorage.getItem(`${questionStorage}`))\n                                        \n                                        var verif = answer.find(function(data){\n                                            if (data.id === getData.id){\n                                                //console.log(\"true\")\n                                                return true\n                                                \n                                            }else{\n                                                //console.log(\"false\")\n                                                return false\n                                                \n                                            }\n                                        })\n                                        if(verif === undefined){\n                                            answer.push(getData)\n                                            localStorage.setItem(\"bigItem\", JSON.stringify(answer))\n                                            //console.log(\"See this ===> \", answer)\n                                        }\n\n                                        \n\n                                    }\n                                }\n                                    \n                                >\n                                    {\n                                        question.question\n                                    }\n                                    <DropdownMotivation\n                                        key={index}\n                                        listNameFromParent={questionParent}\n                                    />\n                                    <Frequency\n                                        callBackFromParent={this.frequencyCallback}\n                                        listNameFromParent={questionParent}  \n                                    />\n                                    <Comments\n                                        listNameFromParent={questionParent}\n                                        getComment = {this.getBackComment}\n                                    />\n                                </li>\n                            </ul>\n                        );\n                    })}\n                </Container>\n            </React.Fragment>\n        )\n    }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}