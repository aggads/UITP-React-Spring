{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aggad.samy\\\\Workspace\\\\UITP-React-Spring\\\\Front-end\\\\src\\\\components\\\\FormPage\\\\FormPage.js\";\nimport Mode from '../ModeSelection/Mode';\nimport MainForm from './Mainform/MainForm';\nimport Legend from './Mainform/Legend/Legend';\nimport React, { Suspense } from 'react';\nimport { Container } from 'reactstrap';\nexport default class FormPage extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      selectedCat: 1,\n      selectedMode: 0,\n      group: null,\n      stateMode: [],\n      modes: [],\n      loading: true,\n      data: null\n    };\n\n    this.handleSelection = idx => e => {\n      this.setState({\n        selectedMode: idx\n      });\n    };\n\n    this.selectCat = e => {\n      this.setState({\n        selectedCat: e.target.value\n      });\n    };\n  }\n\n  componentWillMount() {\n    let getGroup = localStorage.getItem(\"group\");\n    localStorage.setItem(\"stateMode\", JSON.stringify(this.props.location.state));\n    const asyncLocalStorage = {\n      setItem: async function (key, value) {\n        await null;\n        return localStorage.setItem(key, value);\n      },\n      getItem: async function (key) {\n        await null;\n        return localStorage.getItem(key);\n      }\n    };\n    var stateMode = asyncLocalStorage.getItem(\"stateMode\"); // console.log(stateMode)\n\n    stateMode.then(value => {\n      var value = JSON.parse(value);\n      this.setState({\n        stateMode: value\n      });\n      console.log(\"async storage \", value);\n    }); // var stateModeN = localStorage.getItem(\"stateMode\")  \n    // console.log(\"Normal storage \", JSON.parse(stateModeN))\n    // await this.setState({stateMode: JSON.parse(stateModeN)})\n    // console.log(\"state mod value\", stateMode)\n\n    this.setState({\n      group: getGroup // modes: this.state.stateMode.modes.modes\n\n    }); //   console.log(\"THE STATE stateMode \", this.state.stateMode)\n  }\n\n  componentDidMount() {\n    var stateModeN = localStorage.getItem(\"stateMode\");\n    console.log(\"did mount \", stateModeN);\n    this.setState({});\n  } // async componentDidMount(){\n  //     localStorage.setItem(\"stateMode\", JSON.stringify(this.props.location.state)) \n  //     var stateModeN = localStorage.getItem(\"stateMode\")  \n  //     // console.log(\"Normal storage \", JSON.parse(stateModeN))\n  //     await this.setState({stateMode: JSON.parse(stateModeN)})\n  //     // console.log(\"state mode \", stateMode)\n  //     // console.log(\"THE STATE stateMode \", this.state.stateMode.modes.modes)\n  // }\n\n\n  render() {\n    //const selectedtransport = this.props.location.state.modes.modes.filter(item => item.selected === true);\n    // console.log(\"group \", this.state.stateMode)\n    // console.log(\"group state \", this.props.location)\n    // console.log(\"hello\")\n    console.log(\"state mode \", this.state.stateMode.modes);\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(Legend, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: {\n        display: \"block\",\n        margin: \"auto\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, this.state.stateMode.group === 0 ? \"Separate\" : \"Grouped\", \" Reporting for\"), React.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"start\",\n        marginBottom: \"40px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, this.state.stateMode.group === 0 ? this.props.location.state.modes.modes.filter(mode => mode.selected === true).map((mode, idx) => React.createElement(Mode, {\n      key: idx,\n      id: mode.id,\n      index: idx,\n      name: mode.name,\n      url: mode,\n      selected: this.state.selectedMode === idx ? true : false,\n      maxHeight: \"50px\",\n      handleSelection: this.handleSelection(idx),\n      grouped: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    })) : this.props.location.state.modes.modes.filter(mode => mode.selected === true).map((mode, idx) => React.createElement(Mode, {\n      key: idx,\n      id: mode.id,\n      index: idx,\n      name: mode.name,\n      url: mode,\n      selected: true,\n      maxHeight: \"50px\",\n      grouped: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    })))), this.props.location.state.modes.modes.filter(mode => mode.selected === true).map((mode, idx) => idx === this.state.selectedMode && React.createElement(MainForm, {\n      key: idx,\n      id: mode.id,\n      group: this.state.stateMode.group,\n      index: idx,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }))));\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\aggad.samy\\Workspace\\UITP-React-Spring\\Front-end\\src\\components\\FormPage\\FormPage.js"],"names":["Mode","MainForm","Legend","React","Suspense","Container","FormPage","Component","state","selectedCat","selectedMode","group","stateMode","modes","loading","data","handleSelection","idx","e","setState","selectCat","target","value","componentWillMount","getGroup","localStorage","getItem","setItem","JSON","stringify","props","location","asyncLocalStorage","key","then","parse","console","log","componentDidMount","stateModeN","render","display","margin","justifyContent","marginBottom","filter","mode","selected","map","id","name"],"mappings":"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","sourcesContent":["import Mode from '../ModeSelection/Mode'\nimport MainForm from './Mainform/MainForm'\nimport Legend from './Mainform/Legend/Legend'\nimport React, {Suspense} from 'react';\nimport { Container } from 'reactstrap';\n\n\n\nexport default class FormPage extends React.Component {\n    state = {\n        selectedCat: 1,\n        selectedMode: 0,\n        group: null, \n        stateMode: [],\n        modes: [], \n        loading: true,\n        data: null\n    };\n\n    handleSelection = (idx) => (e) => {\n        this.setState({ selectedMode: idx });\n    };\n\n    selectCat = (e) => {\n        this.setState({ selectedCat: e.target.value })\n    }\n    componentWillMount(){\n        let getGroup = localStorage.getItem(\"group\")\n        localStorage.setItem(\"stateMode\", JSON.stringify(this.props.location.state)) \n        \n        const asyncLocalStorage = {\n            setItem: async function (key, value) {\n                await null;\n                return localStorage.setItem(key, value);\n            },\n            getItem: async function (key) {\n                await null;\n                return localStorage.getItem(key);\n            }\n        };\n        var stateMode = asyncLocalStorage.getItem(\"stateMode\")\n        \n        // console.log(stateMode)\n        stateMode.then((value) => {\n            var value = JSON.parse(value)\n            this.setState({stateMode: value})\n            console.log(\"async storage \", value) \n            \n        })\n        \n        // var stateModeN = localStorage.getItem(\"stateMode\")  \n        // console.log(\"Normal storage \", JSON.parse(stateModeN))\n        // await this.setState({stateMode: JSON.parse(stateModeN)})\n        // console.log(\"state mod value\", stateMode)\n        this.setState({\n            group: getGroup,\n            // modes: this.state.stateMode.modes.modes\n        })\n        \n    //   console.log(\"THE STATE stateMode \", this.state.stateMode)\n\n\n        \n    }\n    componentDidMount(){\n        var stateModeN = localStorage.getItem(\"stateMode\")  \n        console.log(\"did mount \", stateModeN)\n        this.setState({})\n    }\n    // async componentDidMount(){\n        \n    //     localStorage.setItem(\"stateMode\", JSON.stringify(this.props.location.state)) \n    //     var stateModeN = localStorage.getItem(\"stateMode\")  \n    //     // console.log(\"Normal storage \", JSON.parse(stateModeN))\n    //     await this.setState({stateMode: JSON.parse(stateModeN)})\n        \n    //     // console.log(\"state mode \", stateMode)\n    //     // console.log(\"THE STATE stateMode \", this.state.stateMode.modes.modes)\n        \n    // }\n\nrender() {\n        //const selectedtransport = this.props.location.state.modes.modes.filter(item => item.selected === true);\n        // console.log(\"group \", this.state.stateMode)\n        // console.log(\"group state \", this.props.location)\n        // console.log(\"hello\")\n        console.log(\"state mode \", this.state.stateMode.modes)\n        \n        return (\n            <React.Fragment>\n                {/* <Suspense fallback={<div>Loading...</div>}> */}\n                <Container>\n                    <Legend /> \n\n                    <div style={{ display: \"block\", margin: \"auto\" }}>\n                        <h4>{this.state.stateMode.group === 0 ? \"Separate\" : \"Grouped\"} Reporting for</h4>\n\n                        <div style={{ display: \"flex\", justifyContent: \"start\", marginBottom: \"40px\" }}>\n                            {this.state.stateMode.group === 0 ?\n                            \n                            this.props.location.state.modes.modes.filter(mode => mode.selected === true).map((mode, idx) =>\n                            <Mode key={idx} id={mode.id} index={idx} name={mode.name} url={mode} selected={this.state.selectedMode === idx ? true : false} maxHeight=\"50px\" handleSelection={this.handleSelection(idx)} grouped={false} />)\n                            :                             \n                             this.props.location.state.modes.modes.filter(mode => mode.selected === true).map((mode, idx) =>\n                             <Mode key={idx} id={mode.id} index={idx} name={mode.name} url={mode} selected={true} maxHeight=\"50px\" grouped={true}  />) }  \n                        </div>\n\n                        \n                    </div>\n\n\n                    {this.props.location.state.modes.modes.filter(mode => mode.selected === true).map((mode, idx) => idx === this.state.selectedMode &&\n                        <MainForm key={idx} id={mode.id} group={this.state.stateMode.group} index={idx} />\n                    )}\n\n\n                </Container>\n                {/* </Suspense> */}\n            </React.Fragment>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}