{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aggad.samy\\\\Workspace\\\\UITP-React-Spring\\\\Front-end\\\\src\\\\components\\\\Confirmation\\\\Confirmation.js\";\nimport Frequency from '../FormPage/Mainform/Frequency/Radio';\nimport Comments from '../FormPage/Mainform/Comment/Comment';\nimport Mode from '../ModeSelection/Mode'; // import Motivation from '../FormPage/Mainform/Motivation/Motivation'\n\nimport DropdownMotivation from '../FormPage/Mainform/Motivation/Motivation';\nimport { Link, Redirect } from 'react-router-dom';\nimport React from 'react';\nimport { Container, Row, Col, Button, Form, FormGroup } from 'reactstrap';\nexport default class Confirmation extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      categories: [],\n      motivation: [],\n      questions: [],\n      active: null,\n      index: 0,\n      regularityId: 0,\n      // answers: [],\n      // value: [],\n      selectedCat: 1,\n      selectedMode: 0\n    };\n\n    this.submit = e => {\n      e.preventDefault();\n      const selectedModes = JSON.parse(localStorage.getItem(\"selectedModes\"));\n      JSON.parse(localStorage.getItem(\"selectedModes\"));\n      let results = [];\n      const localPtoId = parseInt(localStorage.getItem(\"ptoid\")); // -------------- GROUPED RESULTS POSTING -----------------------\n      // if (JSON.parse(localStorage.getItem(\"group\")) === 1) {\n      //     selectedModes.map((mode) => {\n      //         return results.push(this.props.location.state.answers.map((answer) => {\n      //             return {\n      //                 ptoID: localPtoId,\n      //                 questionID: parseInt(answer.questionID),\n      //                 frequency: parseInt(answer.frequency),\n      //                 modeID: parseInt(mode.id),\n      //                 motivationID: parseInt(answer.motivationID),\n      //                 comment: answer.comment,\n      //                 periodeID: parseInt(answer.periode)\n      //             }\n      //         }))\n      //     });\n      // -------------- SEPARATE RESULTS POSTING -----------------------\n      // } else {\n      //     selectedModes.map(mode => {\n      //         const oneSelectedMode = JSON.parse(localStorage.getItem(mode.id));\n      //         return results.push(oneSelectedMode.map((answer) => {\n      //             return {\n      //                 ptoID: localPtoId,\n      //                 questionID: parseInt(answer.questionID),\n      //                 frequency: parseInt(answer.frequency),\n      //                 modeID: parseInt(answer.modeID),\n      //                 motivationID: parseInt(answer.motivationID),\n      //                 comment: answer.comment,\n      //                 periode: parseInt(answer.periode),\n      //             }\n      //         }\n      //         ))\n      //     })\n      // }\n      // -------------- AXIOS POST -----------------------\n      // let successBoolean = true\n      // results.forEach((resultOne) => {\n      //     axios.post(`${URLStorage.API_URL}/resultAll`, {\n      //         resultOne // variable name asked by the backend, do not change\n      //     })\n      //         .then((res) => { return res.status !== 202 ? successBoolean = false : undefined })\n      //         .then(item => { return successBoolean === true ? this.clearQuestions(selectedModes) && this.goTo(\"reports\") : this.goTo(\"error\") })\n      // })\n    };\n  }\n\n  clearQuestions(selectedModes) {\n    selectedModes.forEach(mode => localStorage.removeItem(\"\".concat(mode.id)));\n    return true;\n  }\n\n  goTo(route) {\n    this.props.history.replace(\"/\".concat(route));\n  }\n\n  render() {\n    const selectedModes = JSON.parse(localStorage.getItem(\"selectedModes\")); //console.log(selectedModes)\n    // const allAnswers = selectedModes.map((item, idx) => {\n    //     return JSON.parse(localStorage.getItem(`${item.id}`));\n    // })\n    //var questionData = localStorage.getItem(\"\")\n\n    var answers = JSON.parse(localStorage.getItem(\"bigItem\")); // if (!answers){\n    //     if(window.confirm(\"Fill something before submit\")){\n    //         window.location.href= \"/formpage\"\n    //     }\n    // }\n    //console.log(\"bigItem\", answers)\n    // var regularityId = \n    // this.setState({ active: index, regularityId: index })\n\n    console.log(\"confirmation \", answers);\n    const motivations = this.props.location.state.motivations;\n    var modeId = JSON.parse(localStorage.getItem(\"selectedModes\"));\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"space-between\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, selectedModes.map((mode, idx) => React.createElement(Mode, {\n      key: idx,\n      id: mode.id,\n      index: idx,\n      name: mode.name,\n      url: mode,\n      selected: true,\n      maxHeight: \"50px\",\n      grouped: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.submit,\n      className: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, \"Confirm Submission\"))), React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, JSON.parse(localStorage.getItem(\"group\")) === 1 ?\n    /* DISPLAY GROUPED RESULTS  */\n    answers.map((data, index) => {\n      // console.log(\"ANSWERS \", answers[index].question)\n      // console.log(\"ANSWERS \", data.frequency)\n      // console.log(\"data \", data)\n      var questionParent = data;\n      var answeredQuestion = answers.find(function (answer) {\n        return answer.id === data.id;\n      });\n      return React.createElement(Container, {\n        key: index,\n        className: \"dark-overlay\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, React.createElement(Row, {\n        key: index,\n        style: {\n          padding: '15px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, React.createElement(Col, {\n        key: index,\n        sm: \"12\",\n        md: {\n          size: 12\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, \" \", index + 1, \" \", data.question, \" \"), React.createElement(Frequency, {\n        callBackFromParent: this.frequencyCallback,\n        listNameFromParent: questionParent,\n        selectedCategory: answeredQuestion,\n        passValueToMainForm: this.getFrequency,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }), React.createElement(DropdownMotivation, {\n        listNameFromParent: questionParent,\n        selectedCategory: answeredQuestion,\n        passValueToMainForm: this.getMotivation,\n        value: this.state.selected,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      })), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, \"Comment : \", data.comment ? data.comment : \"none\"))));\n    }) :\n    /* DISPLAY SEPARATE RESULTS */\n    JSON.parse(localStorage.getItem(\"selectedModes\")).map((mode, data, index) => {\n      console.log(\"mod id \", mode.name); // return JSON.parse(localStorage.getItem(mode)).map((data, index) => {\n\n      return React.createElement(Container, {\n        key: index,\n        className: \"dark-overlay\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, index === 0 && React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, mode.name), React.createElement(Row, {\n        key: index,\n        style: {\n          padding: '15px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, React.createElement(Col, {\n        key: index,\n        sm: \"12\",\n        md: {\n          size: 12\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }, \" \", data.index, \" \", data.question, \" \")), React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, \"Comment : \", data.comment)))); // })\n    }), React.createElement(Button, {\n      onClick: this.submit,\n      className: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, \"Confirm Submission\"), React.createElement(Link, {\n      to: {\n        pathname: \"/formpage\"\n      },\n      className: \"back-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, React.createElement(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, \"Back to Form\"))));\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\aggad.samy\\Workspace\\UITP-React-Spring\\Front-end\\src\\components\\Confirmation\\Confirmation.js"],"names":["Frequency","Comments","Mode","DropdownMotivation","Link","Redirect","React","Container","Row","Col","Button","Form","FormGroup","Confirmation","Component","state","categories","motivation","questions","active","index","regularityId","selectedCat","selectedMode","submit","e","preventDefault","selectedModes","JSON","parse","localStorage","getItem","results","localPtoId","parseInt","clearQuestions","forEach","mode","removeItem","id","goTo","route","props","history","replace","render","answers","console","log","motivations","location","modeId","display","alignItems","justifyContent","map","idx","name","data","questionParent","answeredQuestion","find","answer","padding","size","question","frequencyCallback","getFrequency","getMotivation","selected","comment","pathname"],"mappings":"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","sourcesContent":["import Frequency from '../FormPage/Mainform/Frequency/Radio';\nimport Comments from '../FormPage/Mainform/Comment/Comment';\nimport Mode from '../ModeSelection/Mode'\n// import Motivation from '../FormPage/Mainform/Motivation/Motivation'\nimport DropdownMotivation from '../FormPage/Mainform/Motivation/Motivation';\nimport { Link, Redirect } from 'react-router-dom';\nimport React from 'react';\nimport { Container, Row, Col, Button, Form, FormGroup } from 'reactstrap';\n\nexport default class Confirmation extends React.Component {\n\n    state = {\n        categories:[], \n        motivation:[],\n        questions: [],\n        active: null,\n        index: 0,\n        regularityId: 0,\n        // answers: [],\n        // value: [],\n        selectedCat:1,\n        selectedMode: 0,\n\n    };\n\n    clearQuestions(selectedModes)  {\n         selectedModes.forEach(mode => localStorage.removeItem(`${mode.id}`));\n        return true;\n    }\n\n    goTo(route) {\n        this.props.history.replace(`/${route}`);\n    }\n\n    submit = (e) => {\n\n        e.preventDefault();\n        const selectedModes = JSON.parse(localStorage.getItem(\"selectedModes\"));\n        JSON.parse(localStorage.getItem(\"selectedModes\"));\n        let results = [];\n        const localPtoId = parseInt(localStorage.getItem(\"ptoid\"));\n\n        // -------------- GROUPED RESULTS POSTING -----------------------\n        // if (JSON.parse(localStorage.getItem(\"group\")) === 1) {\n        //     selectedModes.map((mode) => {\n        //         return results.push(this.props.location.state.answers.map((answer) => {\n        //             return {\n        //                 ptoID: localPtoId,\n        //                 questionID: parseInt(answer.questionID),\n        //                 frequency: parseInt(answer.frequency),\n        //                 modeID: parseInt(mode.id),\n        //                 motivationID: parseInt(answer.motivationID),\n        //                 comment: answer.comment,\n        //                 periodeID: parseInt(answer.periode)\n\n        //             }\n        //         }))\n        //     });\n\n            // -------------- SEPARATE RESULTS POSTING -----------------------\n        // } else {\n        //     selectedModes.map(mode => {\n        //         const oneSelectedMode = JSON.parse(localStorage.getItem(mode.id));\n        //         return results.push(oneSelectedMode.map((answer) => {\n        //             return {\n        //                 ptoID: localPtoId,\n        //                 questionID: parseInt(answer.questionID),\n        //                 frequency: parseInt(answer.frequency),\n        //                 modeID: parseInt(answer.modeID),\n        //                 motivationID: parseInt(answer.motivationID),\n        //                 comment: answer.comment,\n        //                 periode: parseInt(answer.periode),\n        //             }\n        //         }\n        //         ))\n        //     })\n        // }\n\n        // -------------- AXIOS POST -----------------------\n\n        // let successBoolean = true\n\n        // results.forEach((resultOne) => {\n        //     axios.post(`${URLStorage.API_URL}/resultAll`, {\n        //         resultOne // variable name asked by the backend, do not change\n        //     })\n        //         .then((res) => { return res.status !== 202 ? successBoolean = false : undefined })\n        //         .then(item => { return successBoolean === true ? this.clearQuestions(selectedModes) && this.goTo(\"reports\") : this.goTo(\"error\") })\n                \n        // })\n\n\n\n    }\n\n    render() {\n\n        const selectedModes = JSON.parse(localStorage.getItem(\"selectedModes\"));\n        //console.log(selectedModes)\n        // const allAnswers = selectedModes.map((item, idx) => {\n        //     return JSON.parse(localStorage.getItem(`${item.id}`));\n        // })\n\n        //var questionData = localStorage.getItem(\"\")\n        var answers = JSON.parse(localStorage.getItem(\"bigItem\"))\n        // if (!answers){\n        //     if(window.confirm(\"Fill something before submit\")){\n        //         window.location.href= \"/formpage\"\n        //     }\n        // }\n        //console.log(\"bigItem\", answers)\n        // var regularityId = \n        // this.setState({ active: index, regularityId: index })\n\n\n        console.log(\"confirmation \", answers)\n        const { motivations } = this.props.location.state;\n        var modeId = JSON.parse(localStorage.getItem(\"selectedModes\"))\n\n\n        return (\n            <>\n                <div style={{display: \"flex\", alignItems:\"center\", justifyContent: \"space-between\"}}>\n                    {selectedModes.map((mode, idx) => <Mode key={idx} id={mode.id} index={idx} name={mode.name} url={mode} selected={true} maxHeight=\"50px\" grouped={true}  />)}\n                    <div>\n                        <Button onClick={this.submit} className=\"submit\">Confirm Submission</Button>\n                    </div>\n                </div>\n            <Container>\n                {JSON.parse(localStorage.getItem(\"group\")) === 1\n                    ?\n                    \n                    /* DISPLAY GROUPED RESULTS  */\n                    answers.map((data, index) => {\n                        // console.log(\"ANSWERS \", answers[index].question)\n                        // console.log(\"ANSWERS \", data.frequency)\n                        // console.log(\"data \", data)\n                        var questionParent = data\n                        var answeredQuestion = answers.find(function(answer) {\n                            return answer.id === data.id\n                        })\n\n                        return <Container key={index} className=\"dark-overlay\" >\n                            <Row key={index} style={{ padding: '15px' }}>\n                                <Col key={index} sm=\"12\" md={{ size: 12 }}>\n                                    <FormGroup key={index}>\n                                        <h5> {index + 1} {data.question} </h5>\n                                        {/* <Frequency key={data.question} questionId={data.question} value={data.frequency} disable={\"disabled\"} /> */}\n                                        {/* < Frequency /> */}\n                                        <Frequency\n                                            callBackFromParent={this.frequencyCallback}\n                                            listNameFromParent={questionParent}\n                                            selectedCategory={answeredQuestion}\n                                            passValueToMainForm={this.getFrequency}   \n                                        />\n                                        <DropdownMotivation\n                                            listNameFromParent={questionParent}\n                                            selectedCategory = {answeredQuestion}\n                                            passValueToMainForm={this.getMotivation}\n                                            value={this.state.selected}\n                                        />\n                                    </FormGroup>\n                                    <p>Comment : {data.comment ? data.comment : \"none\"}</p>\n                                    {/* <Motivation /> */}\n\n                                    {/* <Comments key={data.questionID + 'coucou'} questionId={data.questionID} comment={data.comment} disable={\"disabled\"} /> */}\n\n                                </Col>\n\n                            </Row>\n                        </Container>\n                    })\n\n                    :\n                    /* DISPLAY SEPARATE RESULTS */\n                    JSON.parse(localStorage.getItem(\"selectedModes\")).map((mode, data, index) => {\n                        console.log(\"mod id \", mode.name)\n                            // return JSON.parse(localStorage.getItem(mode)).map((data, index) => {\n                            return (\n                                <Container key={index} className=\"dark-overlay\" >\n                                    {index === 0 && <h3>{mode.name}</h3>}\n                                    <Row key={index} style={{ padding: '15px' }}>\n                                        <Col key={index} sm=\"12\" md={{ size: 12 }}>\n                                            <FormGroup key={index}>\n                                                <h3> {data.index} {data.question} </h3>\n                                                {/* <Frequency\n                                                callBackFromParent={this.frequencyCallback}\n                                                listNameFromParent={questionParent}\n                                                selectedCategory={answeredQuestion}\n                                                passValueToMainForm={this.getFrequency}   \n                                                />\n                                                <DropdownMotivation\n                                                    listNameFromParent={questionParent}\n                                                    selectedCategory = {answeredQuestion}\n                                                    passValueToMainForm={this.getMotivation}\n                                                    value={this.state.selected}\n                                                /> */}\n                                            </FormGroup>\n                                            <h5>Comment : {data.comment}</h5>\n                                            {/* <Motivation /> */}\n                                            {/* <Motivation key={data.questionID} questionId={data.questionID} items={motivations} value={data.motivationID} /> */}\n                                            {/* <Comments key={data.questionID + 'coucou'} questionId={data.questionID} comment={data.comment} disable={\"disabled\"} /> */}\n                                        </Col>\n                                    </Row>\n                                </Container>\n                            )\n                        // })\n                    })\n                }\n                <Button onClick={this.submit} className=\"submit\">Confirm Submission</Button>\n                <Link to={{ pathname: \"/formpage\"}} className=\"back-form\">\n                    <Button>Back to Form</Button>\n                </Link>\n                </Container>\n            </>\n        )\n\n    }\n\n}\n\n"]},"metadata":{},"sourceType":"module"}