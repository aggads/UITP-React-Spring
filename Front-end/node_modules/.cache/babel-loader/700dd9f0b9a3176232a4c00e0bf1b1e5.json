{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\aggad.samy\\\\Workspace\\\\uitp-service\\\\Front-end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"C:\\\\Users\\\\aggad.samy\\\\Workspace\\\\uitp-service\\\\Front-end\\\\src\\\\components\\\\FormPage\\\\Mainform\\\\MainForm.js\";\nimport Frequency from './Frequency/Radio';\nimport Comments from './Comment/Comment'; // import Legend from './Legend/Legend';\n\nimport Motivation from './Motivation/Motivation';\nimport Categories from './Categories/Categories';\nimport URLStorage from '../../../constants';\nimport { Link } from 'react-router-dom';\nimport uniqueid from 'uniqid'; // import  ConfirmModal  from '../Modal';\n\nimport '../../../App.css';\nimport axios from 'axios';\nimport React from 'react';\nimport { Container, Row, Col, Button, Form, FormGroup } from 'reactstrap';\nimport './MainForm.css';\nimport DropdownExampleCompact from './Motivation/Motivation';\nimport { ButtonGroup, Dropdown } from 'semantic-ui-react';\nimport DropdownMotivation from './Motivation/Motivation';\nexport default class MainForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      // --------- TESTING : UNCOMMENT WHEN SERVER DOWN ----------------\n      categories: [],\n      motivations: [],\n      regularity: [],\n      question: [],\n      questions: [],\n      id: 1,\n      name: [],\n      incident: [],\n      results: [],\n      // ----------------------------------------------------------------\n      answers: [],\n      value: [],\n      selectedCat: 1,\n      selectedMode: 0\n    };\n\n    this.handleFormSubmit = () => {\n      const answers = this.state.answers;\n      localStorage.setItem('answer', answers);\n    };\n\n    this.handleSelection = idx => e => {\n      this.setState({\n        selectedMode: idx\n      });\n    };\n\n    this.next = () => {\n      let id = this.state.id + 1;\n      this.fetchQuestions(id);\n      this.setState(prevState => ({\n        selectedCat: prevState.selectedCat + 1,\n        id: prevState.id + 1\n      }));\n    };\n\n    this.prev = () => {\n      let id = this.state.id - 1;\n      this.fetchQuestions(id);\n      this.setState(prevState => ({\n        selectedCat: prevState.selectedCat - 1,\n        id: prevState.id - 1\n      }));\n    };\n\n    this.fetchQuestions = id => {\n      axios.get(\"\".concat(URLStorage.API_URL, \"/getAllQuestions/\").concat(id)).then(res => {\n        const data = res.data;\n        this.setState({\n          question: data,\n          isLoaded: true\n        });\n      });\n    };\n\n    this.anyChange = id => e => {\n      const inputName = e.target.name;\n      const inputValue = e.target.value;\n      let entries = Object.assign({}, this.state);\n      const answers = entries.answers;\n      answers.map(answer => answer.questionID === id ? answer[inputName] = inputValue : undefined);\n      this.setState(entries);\n      localStorage.setItem(this.props.id, JSON.stringify(this.state.answers)); // ------------ SWITCH BOOLEAN TO COMPLETED FOR CURRENT MODE ---------------\n\n      if (this.state.answers.filter(answer => answer.frequency === null).length === 0) {\n        let completeMode = JSON.parse(localStorage.getItem(\"completedModes\"));\n        completeMode[this.props.index] = true;\n\n        if (this.props.group) {\n          var dummieArray = [];\n          completeMode.map(item => dummieArray.push(true));\n          localStorage.setItem(\"completedModes\", JSON.stringify(dummieArray));\n        } else {\n          localStorage.setItem(\"completedModes\", JSON.stringify(completeMode));\n        }\n      }\n    };\n\n    this.selectCat = e => {\n      this.setState({\n        selectedCat: e.target.value\n      });\n      localStorage.setItem(this.props.id, JSON.stringify(this.state.answers));\n    };\n\n    this.onClick = e => {\n      localStorage.setItem(\"answer\", JSON.stringify(this.state.regularity));\n    };\n  }\n\n  // componentDidUpdate(){\n  //     onClick = (e) => {\n  //         localStorage.setItem(\"answer\", JSON.stringify(this.state.regularity))\n  //     }\n  // }\n  componentDidMount() {\n    this.fetchQuestions(1);\n    const transportId = this.props.id;\n    this.setState({\n      modeID: transportId\n    }); // ------------------ Retreiving PREVIOUS PERIOD RESULTS ----------------------\n\n    if (JSON.parse(localStorage.getItem(\"periods\"))) {\n      axios.post(\"\".concat(URLStorage.API_URL, \"/resultPeriode\"), {\n        ptoID: parseInt(localStorage.getItem(\"ptoid\")),\n        periodeID: JSON.parse(localStorage.getItem(\"periods\")).previousPeriod\n      }).then(res => {\n        const previousResult = res.data.filter(item => item.mode_id === transportId).sort((a, b) => a.questionID - b.questionID).map(item => {\n          return {\n            prevFreq: item.frequency\n          };\n        });\n        const newStateAnswers = this.state.answers.map((answer, idx) => {\n          return _objectSpread({}, answer, previousResult[idx]);\n        }); // // ------------------ ADDING PREVIOUS PERIOD RESULTS TO THE STATE.ANSWERS ----------------------\n\n        this.setState({\n          answers: newStateAnswers\n        });\n        localStorage.setItem(\"prevResult\", JSON.stringify(previousResult));\n      });\n    }\n\n    ; // // -----------------------------------------------------------------\n    // axios.get(`${URLStorage.API_URL}/getallincident`)\n    //     .then(res => {\n    //         const data = res.data\n    //         this.setState({\n    //             categories: data,\n    //             isLoaded: true,\n    //         })\n    //     })\n    // axios.get(`${URLStorage.API_URL}/getallquestions`)\n    // .then(res => {\n    //     const data = res.data\n    //     this.setState({\n    //         questions: data,\n    //         isLoaded: true,\n    //     })\n    // })\n    // axios.get(`${URLStorage.API_URL}/getallquestions`)\n    // .then(response =>(\n    //         response.data.map(questions => {\n    //           questionTest.push(questions.question);\n    //           incidentTest.push(questions.incident);\n    //         }),\n    //         resultsTest = response.data,\n    //         this.setState({question : questionTest, incident : incidentTest, results: resultsTest})\n    //       ))\n  }\n\n  render() {\n    // NEXT / SUBMIT BUTTON SWITCH\n    const nextSubmit = this.state.selectedCat === 5 ? // || (parseInt((localStorage.getItem(\"group\")) === 1)\n    JSON.parse(localStorage.getItem(\"completedModes\")).filter(item => item === false).length === 0 ? React.createElement(Link, {\n      to: {\n        pathname: \"/confirmation\",\n        state: {\n          answers: this.state.answers\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.submit,\n      className: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, \"Submit\")) : React.createElement(React.Fragment, null, React.createElement(Button, {\n      className: \"submit\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, \"Submit\")) : React.createElement(Button, {\n      onClick: this.next,\n      onClick: this.handleFormSubmit,\n      className: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, \"Next\"); //console.log(this.state.categories);\n    // console.log(this.state.regularity);\n    //console.log(this.state.motivations);\n    // console.log(this.state.question);\n    // console.log(this.state.answers);\n    // console.log(this.state.id);\n\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"flex-end\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }, this.state.selectedCat !== 1 && React.createElement(Button, {\n      style: {\n        marginRight: \"10px\"\n      },\n      onClick: this.prev,\n      className: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, \"Previous\"), nextSubmit), React.createElement(Categories, {\n      idPage: this.state.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }), this.state.question.map(question => {\n      return React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        key: this.state.id,\n        style: {\n          fontSize: \"20px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      }, question.question, React.createElement(DropdownMotivation, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }), React.createElement(Frequency, Object.assign({\n        onClick: true\n      }, localStorage.setItem(\"answer\", JSON.stringify(this.state.regularity)), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      })), React.createElement(Comments, {\n        key: question.id + 'coucou',\n        questionId: question.id,\n        comment: question.comment,\n        parentCallback: this.anyChange(question.id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      })));\n    })));\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\aggad.samy\\Workspace\\uitp-service\\Front-end\\src\\components\\FormPage\\Mainform\\MainForm.js"],"names":["Frequency","Comments","Motivation","Categories","URLStorage","Link","uniqueid","axios","React","Container","Row","Col","Button","Form","FormGroup","DropdownExampleCompact","ButtonGroup","Dropdown","DropdownMotivation","MainForm","Component","state","categories","motivations","regularity","question","questions","id","name","incident","results","answers","value","selectedCat","selectedMode","handleFormSubmit","localStorage","setItem","handleSelection","idx","e","setState","next","fetchQuestions","prevState","prev","get","API_URL","then","res","data","isLoaded","anyChange","inputName","target","inputValue","entries","Object","assign","map","answer","questionID","undefined","props","JSON","stringify","filter","frequency","length","completeMode","parse","getItem","index","group","dummieArray","item","push","selectCat","onClick","componentDidMount","transportId","modeID","post","ptoID","parseInt","periodeID","previousPeriod","previousResult","mode_id","sort","a","b","prevFreq","newStateAnswers","render","nextSubmit","pathname","submit","display","justifyContent","marginRight","fontSize","comment"],"mappings":"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","sourcesContent":["import Frequency from './Frequency/Radio';\nimport Comments from './Comment/Comment';\n// import Legend from './Legend/Legend';\nimport Motivation from './Motivation/Motivation'\nimport Categories from './Categories/Categories'\nimport URLStorage from '../../../constants';\nimport { Link } from 'react-router-dom';\nimport uniqueid from 'uniqid';\n// import  ConfirmModal  from '../Modal';\n\nimport '../../../App.css';\n\nimport axios from 'axios';\nimport React from 'react';\nimport { Container, Row, Col, Button, Form, FormGroup } from 'reactstrap';\n\nimport './MainForm.css'\nimport DropdownExampleCompact from './Motivation/Motivation';\nimport { ButtonGroup, Dropdown } from 'semantic-ui-react';\nimport DropdownMotivation from './Motivation/Motivation';\n\nexport default class MainForm extends React.Component {\n\n    state = {\n\n        // --------- TESTING : UNCOMMENT WHEN SERVER DOWN ----------------\n        categories: [],\n        motivations: [],\n        regularity: [],\n        question: [],\n        questions: [],\n        id: 1,\n        name: [],\n        incident: [],\n        results: [],\n        // ----------------------------------------------------------------\n\n        answers: [],\n        value: [],\n        selectedCat: 1,\n        selectedMode: 0,\n\n    };\n    \n    handleFormSubmit = () => {\n        const { answers } = this.state;\n        localStorage.setItem('answer', answers);\n      };\n\n    handleSelection = (idx) => (e) => {\n        this.setState({ selectedMode: idx });\n    };\n\n    next = () => {\n        let id = this.state.id + 1;\n        this.fetchQuestions(id);\n        this.setState(prevState => ({\n            selectedCat: prevState.selectedCat + 1,\n            id: prevState.id + 1,\n\n        }));\n       \n\n    }\n    prev = () => {\n        let id = this.state.id - 1;\n        this.fetchQuestions(id);\n        this.setState(prevState => ({\n            selectedCat: prevState.selectedCat - 1,\n            id: prevState.id - 1,\n        }));\n\n    }\n\n\n    fetchQuestions = (id) => {\n        axios.get(`${URLStorage.API_URL}/getAllQuestions/${id}`)\n            .then(res => {\n                const data = res.data\n                this.setState({\n                    question: data,\n                    isLoaded: true,\n                })\n            })\n    }\n\n\n\n    anyChange = (id) => (e) => {\n        const inputName = e.target.name;\n        const inputValue = e.target.value;\n        let entries = Object.assign({}, this.state);\n        const { answers } = entries;\n        answers.map(answer => answer.questionID === id ? answer[inputName] = inputValue : undefined);\n        this.setState(entries);\n        localStorage.setItem(this.props.id, JSON.stringify(this.state.answers));\n\n        // ------------ SWITCH BOOLEAN TO COMPLETED FOR CURRENT MODE ---------------\n\n        if (this.state.answers.filter(answer => answer.frequency === null).length === 0) {\n\n            let completeMode = JSON.parse(localStorage.getItem(\"completedModes\"));\n            completeMode[this.props.index] = true;\n\n            if (this.props.group) {\n                var dummieArray = [];\n                completeMode.map(item => dummieArray.push(true));\n                localStorage.setItem(\"completedModes\", JSON.stringify(dummieArray));\n\n            } else {\n                localStorage.setItem(\"completedModes\", JSON.stringify(completeMode));\n            }\n        }\n    }\n\n    selectCat = (e) => {\n        this.setState({ selectedCat: e.target.value })\n        localStorage.setItem(this.props.id, JSON.stringify(this.state.answers));\n    }\n    onClick = (e) => {\n                localStorage.setItem(\"answer\", JSON.stringify(this.state.regularity))\n            }\n\n    // componentDidUpdate(){\n    //     onClick = (e) => {\n    //         localStorage.setItem(\"answer\", JSON.stringify(this.state.regularity))\n    //     }\n        \n    // }\n\n    componentDidMount() {\n\n        this.fetchQuestions(1);\n\n        const transportId = this.props.id;\n        this.setState({ modeID: transportId })\n\n        // ------------------ Retreiving PREVIOUS PERIOD RESULTS ----------------------\n\n        if (JSON.parse(localStorage.getItem(\"periods\"))) {\n\n            axios.post(`${URLStorage.API_URL}/resultPeriode`, {\n                ptoID: parseInt(localStorage.getItem(\"ptoid\")),\n                periodeID: JSON.parse(localStorage.getItem(\"periods\")).previousPeriod,\n            })\n                .then(res => {\n                    const previousResult = res.data.filter(item => item.mode_id === transportId).sort((a, b) => a.questionID - b.questionID).map(item => {\n\n                        return { prevFreq: item.frequency, };\n                    })\n                    const newStateAnswers = this.state.answers.map((answer, idx) => {\n                        return { ...answer, ...previousResult[idx] }\n                    })\n                    // // ------------------ ADDING PREVIOUS PERIOD RESULTS TO THE STATE.ANSWERS ----------------------\n                    this.setState({ answers: newStateAnswers });\n                    localStorage.setItem(\"prevResult\", JSON.stringify(previousResult))\n                })\n        };\n        // // -----------------------------------------------------------------\n\n\n        // axios.get(`${URLStorage.API_URL}/getallincident`)\n        //     .then(res => {\n        //         const data = res.data\n        //         this.setState({\n        //             categories: data,\n        //             isLoaded: true,\n        //         })\n        //     })\n\n        // axios.get(`${URLStorage.API_URL}/getallquestions`)\n        // .then(res => {\n        //     const data = res.data\n        //     this.setState({\n        //         questions: data,\n        //         isLoaded: true,\n        //     })\n        // })\n\n        // axios.get(`${URLStorage.API_URL}/getallquestions`)\n        // .then(response =>(\n        //         response.data.map(questions => {\n        //           questionTest.push(questions.question);\n        //           incidentTest.push(questions.incident);\n        //         }),\n        //         resultsTest = response.data,\n        //         this.setState({question : questionTest, incident : incidentTest, results: resultsTest})\n        //       ))\n    };\n\n\n\n    render() {\n        // NEXT / SUBMIT BUTTON SWITCH\n        const nextSubmit = this.state.selectedCat === 5 ?\n            // || (parseInt((localStorage.getItem(\"group\")) === 1)\n            (JSON.parse(localStorage.getItem(\"completedModes\")).filter(item => item === false).length === 0) ?\n                <Link to={{ pathname: \"/confirmation\", state: { answers: this.state.answers } }}>\n                    <Button onClick={this.submit} className=\"submit\" >Submit</Button>\n                </Link>\n                : <>\n                    <Button className=\"submit\" disabled>Submit</Button>\n                </>\n            :\n            <Button onClick={this.next} onClick={this.handleFormSubmit} className=\"submit\">Next</Button>;\n\n        //console.log(this.state.categories);\n        // console.log(this.state.regularity);\n        //console.log(this.state.motivations);\n        // console.log(this.state.question);\n        // console.log(this.state.answers);\n        // console.log(this.state.id);\n        return (\n            <React.Fragment>\n                <Container>\n                    <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n                        {this.state.selectedCat !== 1 && <Button style={{ marginRight: \"10px\" }} onClick={this.prev} className=\"submit\" >Previous</Button>}\n                        {nextSubmit}\n                    </div>\n                    <Categories idPage={this.state.id}/>\n                    <br />\n                    <br />\n                    {this.state.question.map(question => {\n                        return (\n                            <ul>\n                                <li key={this.state.id} style={{fontSize: \"20px\"}} >\n                                    {question.question}\n                                    <DropdownMotivation />\n                                    <Frequency \n                                    onClick {\n                                        ...localStorage.setItem(\"answer\", JSON.stringify(this.state.regularity))\n                                    }/>\n                                    <Comments key={question.id + 'coucou'} questionId={question.id} comment={question.comment} parentCallback={this.anyChange(question.id)} />\n                                </li>\n                            </ul>\n                        );\n                    })}\n                </Container>\n            </React.Fragment>\n        )\n    }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}