{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aggad.samy\\\\Workspace\\\\uitp-service\\\\Front-end\\\\src\\\\components\\\\FormPage\\\\Mainform\\\\MainForm.js\";\nimport Frequency from './Frequency/Radio';\nimport Comments from './Comment/Comment'; // import Legend from './Legend/Legend';\n\nimport Motivation from './Motivation/Motivation';\nimport Categories from './Categories/Categories';\nimport URLStorage from '../../../constants';\nimport { Link } from 'react-router-dom'; // import  ConfirmModal  from '../Modal';\n\nimport '../../../App.css';\nimport axios from 'axios';\nimport React from 'react';\nimport { Container, Row, Col, Button, Form, FormGroup } from 'reactstrap';\nimport './MainForm.css';\nexport default class MainForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      // --------- TESTING : UNCOMMENT WHEN SERVER DOWN ----------------\n      categories: [],\n      motivations: [],\n      regularity: [],\n      questions: [],\n      questionId: [],\n      id: 2,\n      // ----------------------------------------------------------------\n      answers: [],\n      value: [],\n      selectedCat: 1,\n      selectedMode: 0\n    };\n\n    this.handleSelection = idx => e => {\n      this.setState({\n        selectedMode: idx\n      });\n    };\n\n    this.next = () => {\n      this.setState(prevState => ({\n        selectedCat: prevState.selectedCat + 1\n      }));\n    };\n\n    this.prev = () => {\n      this.setState(prevState => ({\n        selectedCat: prevState.selectedCat - 1\n      }));\n    };\n\n    this.anyChange = id => e => {\n      const inputName = e.target.name;\n      const inputValue = e.target.value;\n      let entries = Object.assign({}, this.state);\n      const answers = entries.answers;\n      answers.map(answer => answer.questionID === id ? answer[inputName] = inputValue : undefined);\n      this.setState(entries);\n      localStorage.setItem(this.props.id, JSON.stringify(this.state.answers)); // ------------ SWITCH BOOLEAN TO COMPLETED FOR CURRENT MODE ---------------\n\n      if (this.state.answers.filter(answer => answer.frequency === null).length === 0) {\n        let completeMode = JSON.parse(localStorage.getItem(\"completedModes\"));\n        completeMode[this.props.index] = true;\n\n        if (this.props.group) {\n          var dummieArray = [];\n          completeMode.map(item => dummieArray.push(true));\n          localStorage.setItem(\"completedModes\", JSON.stringify(dummieArray));\n        } else {\n          localStorage.setItem(\"completedModes\", JSON.stringify(completeMode));\n        }\n      }\n    };\n\n    this.selectCat = e => {\n      this.setState({\n        selectedCat: e.target.value\n      });\n      localStorage.setItem(this.props.id, JSON.stringify(this.state.answers));\n    };\n\n    this.componentWillMount = () => {\n      const _this$setState = this.setState({\n        data: myData\n      }),\n            answers = _this$setState.answers;\n    };\n  }\n\n  componentDidMount() {\n    const transportId = this.props.id;\n    this.setState({\n      modeID: transportId\n    }); // ------------ TESTING : UNCOMMENT WHEN SERVER DOWN -------\n    // const localanswers = localStorage.getItem(this.props.id);\n    // console.log(localanswers);\n    // this.setState({ answers: JSON.parse(localanswers)});\n    // console.log(\"localstorageanswers\", this.state.answers);\n    //-----------------------------------------------------------\n    // ------------ TESTING : COMMENT WHEN SERVER DOWN -------\n    // axios.get(`${URLStorage.API_URL}/getallresult`)\n    //     .then(res => {\n    //         if (res) {\n    //             const answers = res.data.map(function (item) {\n    //                 return {\n    //                     // question: item.question,\n    //                     // categoryId: item.id[0],\n    //                     // questionID: item.id[1],\n    //                     // motivationID: 6,\n    //                     // frequency: null,\n    //                     // modeID: transportId,\n    //                     idUser: item.idUser,\n    //                     frequency: item.idFrequency,\n    //                     motivation: item.idMotivation,\n    //                     question: item.idQuestion,\n    //                     comment: \"\",\n    //                     // periode: JSON.parse(localStorage.getItem(\"periods\")).currentPeriod,\n    //                     // previousPeriod: JSON.parse(localStorage.getItem(\"periods\")).previousPeriod,\n    //                 }\n    //             });\n    //             this.setState({ answers });\n    //             localStorage.setItem(this.props.id, JSON.stringify(answers));\n    //             if (!localStorage.getItem(this.props.id)) {\n    //                 this.setState({ answers });\n    //                 localStorage.setItem(this.props.id, JSON.stringify(this.state.answers));\n    //             } else {\n    //                 let ans1;\n    //                 ans1 = localStorage.getItem(this.props.id);\n    //                 this.setState({ answers: JSON.parse(ans1) });\n    //             }\n    //         }\n    //     })\n    //     .then(() => {\n    //         const localquestions = JSON.parse(localStorage.getItem(\"questions\"));\n    //         this.setState({ questions: localquestions });\n    //         let ans2;\n    //         ans2 = localStorage.getItem(this.props.id);\n    //         this.setState({ answers: JSON.parse(ans2) });\n    //     })\n\n    axios.get(\"\".concat(URLStorage.API_URL, \"/getallmotivations\")).then(res => {\n      this.setState({\n        motivations: res.data\n      });\n      localStorage.setItem(\"motivation\", JSON.stringify(res.data));\n    });\n    axios.get(\"\".concat(URLStorage.API_URL, \"/getallincident\")).then(res => {\n      const data = res.data;\n      this.setState({\n        categories: data,\n        isLoaded: true\n      });\n    }); // ------------------ Retreiving PREVIOUS PERIOD RESULTS ----------------------\n    // if (JSON.parse(localStorage.getItem(\"periods\"))) {\n    //     axios.post(`${URLStorage.API_URL}/resultPeriode`, {\n    //         ptoID: parseInt(localStorage.getItem(\"ptoid\")),\n    //         periodeID: JSON.parse(localStorage.getItem(\"periods\")).previousPeriod,\n    //     })          \n    //     .then(res => {\n    //         const previousResult = res.data.filter(item => item.mode_id === transportId).sort((a, b) => a.questionID - b.questionID).map(item => {\n    //             return { prevFreq: item.frequency, };\n    //         })\n    //         const newStateAnswers = this.state.answers.map((answer, idx) => {\n    //             return { ...answer, ...previousResult[idx] }\n    //         })\n    // // ------------------ ADDING PREVIOUS PERIOD RESULTS TO THE STATE.ANSWERS ----------------------\n    //         this.setState({ answers: newStateAnswers });\n    //         localStorage.setItem(\"prevResult\", JSON.stringify(previousResult))\n    //     })\n    // };\n    // // -----------------------------------------------------------------\n\n    axios.get(\"\".concat(URLStorage.API_URL, \"/getallfrequency\")).then(res => {\n      const data = res.data;\n      this.setState({\n        regularity: data,\n        id: [],\n        isLoaded: true\n      });\n    });\n    axios.get(\"\".concat(URLStorage.API_URL, \"/getAllQuestions/\").concat(this.state.id)).then(res => {\n      const data = res.data;\n      this.setState({\n        questions: data,\n        isLoaded: true\n      });\n    }); // axios.get(`${URLStorage.API_URL}/getallquestions`)\n    // .then(res => {\n    //     const data = res.data\n    //     this.setState({\n    //         questions: data,\n    //         id:[],\n    //         isLoaded: true,\n    //     })\n    // })\n  }\n\n  render() {\n    // NEXT / SUBMIT BUTTON SWITCH\n    const nextSubmit = this.state.selectedCat === 5 ? // || (parseInt((localStorage.getItem(\"group\")) === 1)\n    JSON.parse(localStorage.getItem(\"completedModes\")).filter(item => item === false).length === 0 ? React.createElement(Link, {\n      to: {\n        pathname: \"/confirmation\",\n        state: {\n          answers: this.state.answers\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.submit,\n      className: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }, \"Submit\")) : React.createElement(React.Fragment, null, React.createElement(Button, {\n      className: \"submit\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }, \"Submit\")) : React.createElement(Button, {\n      onClick: this.next,\n      className: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, \"Next\"); // async function getAnswers(){\n    //     const { answers } = await this.state;\n    // }\n    // getAnswers();\n\n    const answers = this.state.answers; //console.log(this.state.categories);\n    // console.log(this.state.regularity);\n    // console.log(this.state.motivations);\n    // console.log(this.state.questions);\n    // console.log(this.state.id);\n\n    console.log(this.state);\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }, React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"flex-end\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    }, this.state.selectedCat !== 1 && React.createElement(Button, {\n      style: {\n        marginRight: \"10px\"\n      },\n      onClick: this.prev,\n      className: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }, \"Previous\"), nextSubmit), React.createElement(Categories, {\n      categories: this.state.categories,\n      parentCallback: this.selectCat,\n      active: this.state.selectedCat,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }), React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    }, answers && answers.filter((item, idx) => item.categories === this.state.selectedCat).map((data, index) => {\n      return React.createElement(Container, {\n        key: index,\n        className: \"dark-overlay\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283\n        },\n        __self: this\n      }, React.createElement(Row, {\n        key: index,\n        style: {\n          padding: '15px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284\n        },\n        __self: this\n      }, React.createElement(Col, {\n        key: index,\n        sm: \"12\",\n        md: {\n          size: 12\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287\n        },\n        __self: this\n      }, React.createElement(\"h6\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288\n        },\n        __self: this\n      }, \" \", index + 1, \" : \", data.question, \" \")), React.createElement(Motivation, {\n        key: data.id,\n        items: this.state.motivation,\n        value: data.motivation,\n        parentCallback: this.anyChange(data.questionID),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295\n        },\n        __self: this\n      }), React.createElement(Comments, {\n        key: data.questionID + 'coucou',\n        questionId: data.questionID,\n        comment: data.comment,\n        parentCallback: this.anyChange(data.questionID),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300\n        },\n        __self: this\n      }))));\n    }), React.createElement(\"div\", {\n      style: {\n        display: \"block\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }, React.createElement(Categories, {\n      categories: this.state.categories,\n      parentCallback: this.selectCat,\n      active: this.state.selectedCat,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"flex-end\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }, this.state.selectedCat !== 1 && React.createElement(Button, {\n      style: {\n        marginRight: \"10px\"\n      },\n      onClick: this.prev,\n      className: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    }, \"Previous\"), nextSubmit)))));\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\aggad.samy\\Workspace\\uitp-service\\Front-end\\src\\components\\FormPage\\Mainform\\MainForm.js"],"names":["Frequency","Comments","Motivation","Categories","URLStorage","Link","axios","React","Container","Row","Col","Button","Form","FormGroup","MainForm","Component","state","categories","motivations","regularity","questions","questionId","id","answers","value","selectedCat","selectedMode","handleSelection","idx","e","setState","next","prevState","prev","anyChange","inputName","target","name","inputValue","entries","Object","assign","map","answer","questionID","undefined","localStorage","setItem","props","JSON","stringify","filter","frequency","length","completeMode","parse","getItem","index","group","dummieArray","item","push","selectCat","componentWillMount","data","myData","componentDidMount","transportId","modeID","get","API_URL","then","res","isLoaded","render","nextSubmit","pathname","submit","console","log","display","justifyContent","marginRight","padding","size","question","motivation","comment"],"mappings":"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","sourcesContent":["import Frequency from './Frequency/Radio';\nimport Comments from './Comment/Comment';\n// import Legend from './Legend/Legend';\nimport Motivation from './Motivation/Motivation'\nimport Categories from './Categories/Categories'\nimport URLStorage from '../../../constants';\nimport { Link } from 'react-router-dom';\n// import  ConfirmModal  from '../Modal';\n\nimport '../../../App.css';\n\nimport axios from 'axios';\nimport React from 'react';\nimport { Container, Row, Col, Button, Form, FormGroup } from 'reactstrap';\n\nimport './MainForm.css'\n\nexport default class MainForm extends React.Component {\n\n    state = {\n\n        // --------- TESTING : UNCOMMENT WHEN SERVER DOWN ----------------\n        categories: [],\n        motivations: [],\n        regularity:[],\n        questions: [],\n        questionId: [],\n        id: 2,\n        // ----------------------------------------------------------------\n\n        answers: [],\n        value: [],\n        selectedCat: 1,\n        selectedMode: 0,\n\n    };\n\n    handleSelection = (idx) => (e) => {\n        this.setState({ selectedMode: idx });\n    };\n\n    next = () => {\n        this.setState(prevState => ({ selectedCat: prevState.selectedCat + 1 }));\n    }\n\n    prev = () => {\n        this.setState(prevState => ({ selectedCat: prevState.selectedCat - 1 }));\n    }\n\n    anyChange = (id) => (e) => {\n        const inputName = e.target.name;\n        const inputValue = e.target.value;\n        let entries = Object.assign({}, this.state);\n        const { answers } = entries;\n        answers.map(answer => answer.questionID === id ? answer[inputName] = inputValue : undefined);\n        this.setState(entries);\n        localStorage.setItem(this.props.id, JSON.stringify(this.state.answers));\n\n        // ------------ SWITCH BOOLEAN TO COMPLETED FOR CURRENT MODE ---------------\n      \n        if (this.state.answers.filter(answer => answer.frequency === null).length === 0) {\n            \n            let completeMode = JSON.parse(localStorage.getItem(\"completedModes\"));\n            completeMode[this.props.index] = true;\n            \n            if (this.props.group) {          \n                var dummieArray = [];          \n                    completeMode.map(item => dummieArray.push(true));  \n                    localStorage.setItem(\"completedModes\", JSON.stringify(dummieArray));                      \n                                \n            } else {\n                localStorage.setItem(\"completedModes\", JSON.stringify(completeMode));\n            }            \n        } \n    }\n\n    selectCat = (e) => {\n        this.setState({ selectedCat: e.target.value })\n        localStorage.setItem(this.props.id, JSON.stringify(this.state.answers));\n    }\n\n    componentDidMount() {\n\n        const transportId = this.props.id;\n        this.setState({ modeID: transportId })\n\n\n        // ------------ TESTING : UNCOMMENT WHEN SERVER DOWN -------\n        // const localanswers = localStorage.getItem(this.props.id);\n        // console.log(localanswers);\n        // this.setState({ answers: JSON.parse(localanswers)});\n        // console.log(\"localstorageanswers\", this.state.answers);\n        //-----------------------------------------------------------\n\n\n        // ------------ TESTING : COMMENT WHEN SERVER DOWN -------\n        \n\n        // axios.get(`${URLStorage.API_URL}/getallresult`)\n        //     .then(res => {\n        //         if (res) {\n\n        //             const answers = res.data.map(function (item) {\n        //                 return {\n        //                     // question: item.question,\n        //                     // categoryId: item.id[0],\n        //                     // questionID: item.id[1],\n        //                     // motivationID: 6,\n        //                     // frequency: null,\n        //                     // modeID: transportId,\n        //                     idUser: item.idUser,\n        //                     frequency: item.idFrequency,\n        //                     motivation: item.idMotivation,\n        //                     question: item.idQuestion,\n        //                     comment: \"\",\n        //                     // periode: JSON.parse(localStorage.getItem(\"periods\")).currentPeriod,\n        //                     // previousPeriod: JSON.parse(localStorage.getItem(\"periods\")).previousPeriod,\n        //                 }\n        //             });\n        //             this.setState({ answers });\n        //             localStorage.setItem(this.props.id, JSON.stringify(answers));\n\n        //             if (!localStorage.getItem(this.props.id)) {\n        //                 this.setState({ answers });\n        //                 localStorage.setItem(this.props.id, JSON.stringify(this.state.answers));\n\n        //             } else {\n        //                 let ans1;\n        //                 ans1 = localStorage.getItem(this.props.id);\n        //                 this.setState({ answers: JSON.parse(ans1) });\n        //             }\n        //         }\n        //     })\n        //     .then(() => {\n        //         const localquestions = JSON.parse(localStorage.getItem(\"questions\"));\n        //         this.setState({ questions: localquestions });\n        //         let ans2;\n\n        //         ans2 = localStorage.getItem(this.props.id);\n        //         this.setState({ answers: JSON.parse(ans2) });\n        //     })\n\n        axios.get(`${URLStorage.API_URL}/getallmotivations`)\n            .then(res => {\n                this.setState({ motivations: res.data });\n                localStorage.setItem(\"motivation\", JSON.stringify(res.data));\n            })\n\n       \n\n        axios.get(`${URLStorage.API_URL}/getallincident`)\n            .then(res => {\n                const data = res.data\n                this.setState({\n                    categories: data,\n                    isLoaded: true,\n                })\n            })\n\n        \n\n        \n\n\n        // ------------------ Retreiving PREVIOUS PERIOD RESULTS ----------------------\n\n        // if (JSON.parse(localStorage.getItem(\"periods\"))) {\n\n        //     axios.post(`${URLStorage.API_URL}/resultPeriode`, {\n        //         ptoID: parseInt(localStorage.getItem(\"ptoid\")),\n        //         periodeID: JSON.parse(localStorage.getItem(\"periods\")).previousPeriod,\n        //     })          \n        //     .then(res => {\n        //         const previousResult = res.data.filter(item => item.mode_id === transportId).sort((a, b) => a.questionID - b.questionID).map(item => {\n                    \n        //             return { prevFreq: item.frequency, };\n        //         })\n        //         const newStateAnswers = this.state.answers.map((answer, idx) => {\n        //             return { ...answer, ...previousResult[idx] }\n        //         })\n        // // ------------------ ADDING PREVIOUS PERIOD RESULTS TO THE STATE.ANSWERS ----------------------\n        //         this.setState({ answers: newStateAnswers });\n        //         localStorage.setItem(\"prevResult\", JSON.stringify(previousResult))\n        //     })\n        // };\n        // // -----------------------------------------------------------------\n\n\n        axios.get(`${URLStorage.API_URL}/getallfrequency`)\n            .then(res => {\n                const data = res.data\n                this.setState({\n                    regularity: data,\n                    id:[],\n                    isLoaded: true,\n                })\n            })\n\n        \n        axios.get(`${URLStorage.API_URL}/getAllQuestions/${this.state.id}`)\n        .then(res => {\n            const data = res.data\n            this.setState({\n                questions: data,\n                isLoaded: true,\n            })\n        })\n\n       \n        // axios.get(`${URLStorage.API_URL}/getallquestions`)\n        // .then(res => {\n        //     const data = res.data\n        //     this.setState({\n        //         questions: data,\n        //         id:[],\n        //         isLoaded: true,\n        //     })\n        // })\n\n        \n\n    };\n\n    // componentWillMount (){\n\n    //     const { answers } = this.state;\n    // }\n\n    componentWillMount = () => {\n        const { answers } = this.setState({\n          data: myData\n        });\n      }\n\n\n    render() {\n        // NEXT / SUBMIT BUTTON SWITCH\n        const nextSubmit = this.state.selectedCat === 5 ?\n            // || (parseInt((localStorage.getItem(\"group\")) === 1)\n            (JSON.parse(localStorage.getItem(\"completedModes\")).filter(item => item === false).length === 0)  ?\n                <Link to={{ pathname: \"/confirmation\", state: { answers: this.state.answers } }}>\n                    <Button onClick={this.submit} className=\"submit\">Submit</Button>\n                </Link>\n                : <>\n                    <Button className=\"submit\" disabled>Submit</Button>\n                </>\n            :\n            <Button onClick={this.next} className=\"submit\">Next</Button>;\n\n            \n        // async function getAnswers(){\n        //     const { answers } = await this.state;\n        // }\n\n        // getAnswers();\n        const { answers } = this.state;\n\n        \n        \n\n        //console.log(this.state.categories);\n        // console.log(this.state.regularity);\n        // console.log(this.state.motivations);\n        // console.log(this.state.questions);\n        // console.log(this.state.id);\n        console.log(this.state);\n\n        return (\n            <React.Fragment>\n                <Container>\n\n                    <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n                        {this.state.selectedCat !== 1 && <Button style={{ marginRight: \"10px\" }} onClick={this.prev} className=\"submit\" >Previous</Button>}\n                        {nextSubmit}\n                    </div>\n                    <Categories categories={this.state.categories} parentCallback={this.selectCat} active={this.state.selectedCat} />\n\n                    <Form>\n                        {answers && answers\n                            .filter((item, idx) => item.categories === this.state.selectedCat)\n                            .map((data, index) => {\n                                    \n                                return <Container key={index} className=\"dark-overlay\" >\n                                    <Row key={index} style={{ padding: '15px' }}>\n                                        <Col key={index} sm=\"12\" md={{ size: 12 }}>\n\n                                            <FormGroup key={index}>\n                                                <h6> {index + 1} : {data.question} </h6>\n\n                                                {/* <Frequency key={data.index} value={data.regularity} parentCallback={this.anyChange(data.questionID)} prevFreq={data.prevFreq} /> */}\n                                                \n\n                                            </FormGroup>\n\n                                            <Motivation key={data.id} items={this.state.motivation} value={data.motivation} parentCallback={this.anyChange(data.questionID)} />\n                                            {/* <ul>\n                                                { this.state.motivations.map(motivations => <li>{motivations.motivation}</li>)}\n                                            </ul> */}\n \n                                            <Comments key={data.questionID + 'coucou'} questionId={data.questionID} comment={data.comment} parentCallback={this.anyChange(data.questionID)} />\n                                        </Col>\n\n\n                                    </Row>\n                                </Container>\n                            })}\n                        <div style={{ display: \"block\" }}>\n                            <Categories categories={this.state.categories} parentCallback={this.selectCat} active={this.state.selectedCat} />\n                            <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n                                {this.state.selectedCat !== 1 && <Button style={{ marginRight: \"10px\" }} onClick={this.prev} className=\"submit\" >Previous</Button>}\n                                {nextSubmit}\n                            </div>\n                        </div>\n\n\n\n\n\n                    </Form>\n\n\n\n                </Container>\n            </React.Fragment>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}