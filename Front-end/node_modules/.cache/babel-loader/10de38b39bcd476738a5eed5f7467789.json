{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\aggad.samy\\\\Workspace\\\\uitp-service\\\\Front-end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"C:\\\\Users\\\\aggad.samy\\\\Workspace\\\\uitp-service\\\\Front-end\\\\src\\\\components\\\\FormPage\\\\Mainform\\\\MainForm.js\";\nimport Frequency from './Frequency/Radio';\nimport Comments from './Comment/Comment'; // import Legend from './Legend/Legend';\n\nimport Motivation from './Motivation/Motivation';\nimport Categories from './Categories/Categories';\nimport URLStorage from '../../../constants';\nimport { Link } from 'react-router-dom';\nimport uniqueid from 'uniqid'; // import  ConfirmModal  from '../Modal';\n\nimport '../../../App.css';\nimport axios from 'axios';\nimport React from 'react';\nimport { Container, Row, Col, Button, Form, FormGroup } from 'reactstrap';\nimport './MainForm.css';\nimport DropdownExampleCompact from './Motivation/Motivation';\nimport { ButtonGroup, Dropdown } from 'semantic-ui-react';\nimport DropdownMotivation from './Motivation/Motivation';\nexport default class MainForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      // --------- TESTING : UNCOMMENT WHEN SERVER DOWN ----------------\n      categories: [],\n      motivations: [],\n      regularity: [],\n      question: [],\n      questions: [],\n      id: 1,\n      name: [],\n      incident: [],\n      // ----------------------------------------------------------------\n      answers: [],\n      value: [],\n      selectedCat: 1,\n      selectedMode: 0\n    };\n\n    this.handleSelection = idx => e => {\n      this.setState({\n        selectedMode: idx\n      });\n    };\n\n    this.next = () => {\n      this.setState(prevState => ({\n        selectedCat: prevState.selectedCat + 1,\n        id: prevState.id + 1\n      })); // this.setState(i => ({\n      //     id: i +1\n      // }));\n    };\n\n    this.prev = () => {\n      this.setState(prevState => ({\n        selectedCat: prevState.selectedCat - 1,\n        id: prevState.id - 1\n      }));\n    };\n\n    this.anyChange = id => e => {\n      const inputName = e.target.name;\n      const inputValue = e.target.value;\n      let entries = Object.assign({}, this.state);\n      const answers = entries.answers;\n      answers.map(answer => answer.questionID === id ? answer[inputName] = inputValue : undefined);\n      this.setState(entries);\n      localStorage.setItem(this.props.id, JSON.stringify(this.state.answers)); // ------------ SWITCH BOOLEAN TO COMPLETED FOR CURRENT MODE ---------------\n\n      if (this.state.answers.filter(answer => answer.frequency === null).length === 0) {\n        let completeMode = JSON.parse(localStorage.getItem(\"completedModes\"));\n        completeMode[this.props.index] = true;\n\n        if (this.props.group) {\n          var dummieArray = [];\n          completeMode.map(item => dummieArray.push(true));\n          localStorage.setItem(\"completedModes\", JSON.stringify(dummieArray));\n        } else {\n          localStorage.setItem(\"completedModes\", JSON.stringify(completeMode));\n        }\n      }\n    };\n\n    this.selectCat = e => {\n      this.setState({\n        selectedCat: e.target.value\n      });\n      localStorage.setItem(this.props.id, JSON.stringify(this.state.answers));\n    };\n  }\n\n  componentDidMount() {\n    const transportId = this.props.id;\n    this.setState({\n      modeID: transportId\n    }); // ------------------ Retreiving PREVIOUS PERIOD RESULTS ----------------------\n\n    if (JSON.parse(localStorage.getItem(\"periods\"))) {\n      axios.post(\"\".concat(URLStorage.API_URL, \"/resultPeriode\"), {\n        ptoID: parseInt(localStorage.getItem(\"ptoid\")),\n        periodeID: JSON.parse(localStorage.getItem(\"periods\")).previousPeriod\n      }).then(res => {\n        const previousResult = res.data.filter(item => item.mode_id === transportId).sort((a, b) => a.questionID - b.questionID).map(item => {\n          return {\n            prevFreq: item.frequency\n          };\n        });\n        const newStateAnswers = this.state.answers.map((answer, idx) => {\n          return _objectSpread({}, answer, previousResult[idx]);\n        }); // // ------------------ ADDING PREVIOUS PERIOD RESULTS TO THE STATE.ANSWERS ----------------------\n\n        this.setState({\n          answers: newStateAnswers\n        });\n        localStorage.setItem(\"prevResult\", JSON.stringify(previousResult));\n      });\n    }\n\n    ; // // -----------------------------------------------------------------\n\n    axios.get(\"\".concat(URLStorage.API_URL, \"/getallincident\")).then(res => {\n      const data = res.data;\n      this.setState({\n        categories: data,\n        isLoaded: true\n      });\n    }); // axios.get(`${URLStorage.API_URL}/getallquestions`)\n    // .then(res => {\n    //     const data = res.data\n    //     this.setState({\n    //         questions: data,\n    //         isLoaded: true,\n    //     })\n    // })\n\n    axios.get(\"\".concat(URLStorage.API_URL, \"/getAllQuestions/\").concat(this.state.id)).then(res => res.data.collection.items).then(json => {\n      json.map(obj => this.setState({\n        results: Object.values(obj)\n      }));\n    }); // .then(res => {\n    //     const data = res.data\n    //     this.setState({\n    //         question: data,\n    //         isLoaded: true,\n    //     })\n    // })\n    // axios.get(`${URLStorage.API_URL}/getallquestions`)\n    // .then(response =>\n    //         response.data.map(question => ({\n    //           question: `${question.question}`,\n    //           incident: `${question.incident}`,\n    //         }))\n    //       )\n  }\n\n  render() {\n    // const id = 3;\n    // NEXT / SUBMIT BUTTON SWITCH\n    const nextSubmit = this.state.selectedCat === 5 ? // || (parseInt((localStorage.getItem(\"group\")) === 1)\n    JSON.parse(localStorage.getItem(\"completedModes\")).filter(item => item === false).length === 0 ? React.createElement(Link, {\n      to: {\n        pathname: \"/confirmation\",\n        state: {\n          answers: this.state.answers\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.submit,\n      className: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, \"Submit\")) : React.createElement(React.Fragment, null, React.createElement(Button, {\n      className: \"submit\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, \"Submit\")) : React.createElement(Button, {\n      onClick: this.next,\n      className: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, \"Next\"); // async function getAnswers(){\n    //     const { answers } = await this.state;\n    // }\n    // getAnswers();\n\n    const answers = this.state.answers;\n    var testId = this.state.id; //console.log(this.state.categories);\n    // console.log(this.state.regularity);\n    //console.log(this.state.motivations);\n\n    console.log(this.state.question[0]); // console.log(this.state.answers);\n    // console.log(this.state);\n    // const { categories, active } = this.props;\n\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"flex-end\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, this.state.selectedCat !== 1 && React.createElement(Button, {\n      style: {\n        marginRight: \"10px\"\n      },\n      onClick: this.prev,\n      className: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, \"Previous\"), nextSubmit), this.state.categories.map((categorie, i) => {\n      return React.createElement(\"ul\", {\n        key: uniqueid(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        key: i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      }, categorie.name));\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }), this.state.question.map(question => {\n      return React.createElement(\"ul\", {\n        key: uniqueid(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        key: testId,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      }, question.question, React.createElement(DropdownMotivation, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249\n        },\n        __self: this\n      }), React.createElement(Frequency, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250\n        },\n        __self: this\n      })));\n    })));\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\aggad.samy\\Workspace\\uitp-service\\Front-end\\src\\components\\FormPage\\Mainform\\MainForm.js"],"names":["Frequency","Comments","Motivation","Categories","URLStorage","Link","uniqueid","axios","React","Container","Row","Col","Button","Form","FormGroup","DropdownExampleCompact","ButtonGroup","Dropdown","DropdownMotivation","MainForm","Component","state","categories","motivations","regularity","question","questions","id","name","incident","answers","value","selectedCat","selectedMode","handleSelection","idx","e","setState","next","prevState","prev","anyChange","inputName","target","inputValue","entries","Object","assign","map","answer","questionID","undefined","localStorage","setItem","props","JSON","stringify","filter","frequency","length","completeMode","parse","getItem","index","group","dummieArray","item","push","selectCat","componentDidMount","transportId","modeID","post","API_URL","ptoID","parseInt","periodeID","previousPeriod","then","res","previousResult","data","mode_id","sort","a","b","prevFreq","newStateAnswers","get","isLoaded","collection","items","json","obj","results","values","render","nextSubmit","pathname","submit","testId","console","log","display","justifyContent","marginRight","categorie","i"],"mappings":";;AAAA,OAAOA,SAAP,MAAsB,mBAAtB;AACA,OAAOC,QAAP,MAAqB,mBAArB,C,CACA;;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,UAAP,MAAuB,oBAAvB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,QAAP,MAAqB,QAArB,C,CACA;;AAEA,OAAO,kBAAP;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,GAApB,EAAyBC,GAAzB,EAA8BC,MAA9B,EAAsCC,IAAtC,EAA4CC,SAA5C,QAA6D,YAA7D;AAEA,OAAO,gBAAP;AACA,OAAOC,sBAAP,MAAmC,yBAAnC;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,mBAAtC;AACA,OAAOC,kBAAP,MAA+B,yBAA/B;AAEA,eAAe,MAAMC,QAAN,SAAuBX,KAAK,CAACY,SAA7B,CAAuC;AAAA;AAAA;AAAA,SAElDC,KAFkD,GAE1C;AAEJ;AACAC,MAAAA,UAAU,EAAE,EAHR;AAIJC,MAAAA,WAAW,EAAE,EAJT;AAKJC,MAAAA,UAAU,EAAE,EALR;AAMJC,MAAAA,QAAQ,EAAE,EANN;AAOJC,MAAAA,SAAS,EAAE,EAPP;AAQJC,MAAAA,EAAE,EAAE,CARA;AASJC,MAAAA,IAAI,EAAE,EATF;AAUJC,MAAAA,QAAQ,EAAE,EAVN;AAWJ;AAEAC,MAAAA,OAAO,EAAE,EAbL;AAcJC,MAAAA,KAAK,EAAE,EAdH;AAeJC,MAAAA,WAAW,EAAE,CAfT;AAgBJC,MAAAA,YAAY,EAAE;AAhBV,KAF0C;;AAAA,SAsBlDC,eAtBkD,GAsB/BC,GAAD,IAAUC,CAAD,IAAO;AAC9B,WAAKC,QAAL,CAAc;AAAEJ,QAAAA,YAAY,EAAEE;AAAhB,OAAd;AACH,KAxBiD;;AAAA,SA0BlDG,IA1BkD,GA0B3C,MAAM;AACT,WAAKD,QAAL,CAAcE,SAAS,KAAK;AACxBP,QAAAA,WAAW,EAAEO,SAAS,CAACP,WAAV,GAAwB,CADb;AAExBL,QAAAA,EAAE,EAAEY,SAAS,CAACZ,EAAV,GAAe;AAFK,OAAL,CAAvB,EADS,CAMT;AACA;AACA;AACH,KAnCiD;;AAAA,SAqClDa,IArCkD,GAqC3C,MAAM;AACT,WAAKH,QAAL,CAAcE,SAAS,KAAK;AACxBP,QAAAA,WAAW,EAAEO,SAAS,CAACP,WAAV,GAAwB,CADb;AAExBL,QAAAA,EAAE,EAAEY,SAAS,CAACZ,EAAV,GAAe;AAFK,OAAL,CAAvB;AAIH,KA1CiD;;AAAA,SA4ClDc,SA5CkD,GA4CrCd,EAAD,IAASS,CAAD,IAAO;AACvB,YAAMM,SAAS,GAAGN,CAAC,CAACO,MAAF,CAASf,IAA3B;AACA,YAAMgB,UAAU,GAAGR,CAAC,CAACO,MAAF,CAASZ,KAA5B;AACA,UAAIc,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAK1B,KAAvB,CAAd;AAHuB,YAIfS,OAJe,GAIHe,OAJG,CAIff,OAJe;AAKvBA,MAAAA,OAAO,CAACkB,GAAR,CAAYC,MAAM,IAAIA,MAAM,CAACC,UAAP,KAAsBvB,EAAtB,GAA2BsB,MAAM,CAACP,SAAD,CAAN,GAAoBE,UAA/C,GAA4DO,SAAlF;AACA,WAAKd,QAAL,CAAcQ,OAAd;AACAO,MAAAA,YAAY,CAACC,OAAb,CAAqB,KAAKC,KAAL,CAAW3B,EAAhC,EAAoC4B,IAAI,CAACC,SAAL,CAAe,KAAKnC,KAAL,CAAWS,OAA1B,CAApC,EAPuB,CASvB;;AAEA,UAAI,KAAKT,KAAL,CAAWS,OAAX,CAAmB2B,MAAnB,CAA0BR,MAAM,IAAIA,MAAM,CAACS,SAAP,KAAqB,IAAzD,EAA+DC,MAA/D,KAA0E,CAA9E,EAAiF;AAE7E,YAAIC,YAAY,GAAGL,IAAI,CAACM,KAAL,CAAWT,YAAY,CAACU,OAAb,CAAqB,gBAArB,CAAX,CAAnB;AACAF,QAAAA,YAAY,CAAC,KAAKN,KAAL,CAAWS,KAAZ,CAAZ,GAAiC,IAAjC;;AAEA,YAAI,KAAKT,KAAL,CAAWU,KAAf,EAAsB;AAClB,cAAIC,WAAW,GAAG,EAAlB;AACAL,UAAAA,YAAY,CAACZ,GAAb,CAAiBkB,IAAI,IAAID,WAAW,CAACE,IAAZ,CAAiB,IAAjB,CAAzB;AACAf,UAAAA,YAAY,CAACC,OAAb,CAAqB,gBAArB,EAAuCE,IAAI,CAACC,SAAL,CAAeS,WAAf,CAAvC;AAEH,SALD,MAKO;AACHb,UAAAA,YAAY,CAACC,OAAb,CAAqB,gBAArB,EAAuCE,IAAI,CAACC,SAAL,CAAeI,YAAf,CAAvC;AACH;AACJ;AACJ,KArEiD;;AAAA,SAuElDQ,SAvEkD,GAuErChC,CAAD,IAAO;AACf,WAAKC,QAAL,CAAc;AAAEL,QAAAA,WAAW,EAAEI,CAAC,CAACO,MAAF,CAASZ;AAAxB,OAAd;AACAqB,MAAAA,YAAY,CAACC,OAAb,CAAqB,KAAKC,KAAL,CAAW3B,EAAhC,EAAoC4B,IAAI,CAACC,SAAL,CAAe,KAAKnC,KAAL,CAAWS,OAA1B,CAApC;AACH,KA1EiD;AAAA;;AA4ElDuC,EAAAA,iBAAiB,GAAG;AAEhB,UAAMC,WAAW,GAAG,KAAKhB,KAAL,CAAW3B,EAA/B;AACA,SAAKU,QAAL,CAAc;AAAEkC,MAAAA,MAAM,EAAED;AAAV,KAAd,EAHgB,CAKhB;;AAEA,QAAIf,IAAI,CAACM,KAAL,CAAWT,YAAY,CAACU,OAAb,CAAqB,SAArB,CAAX,CAAJ,EAAiD;AAE7CvD,MAAAA,KAAK,CAACiE,IAAN,WAAcpE,UAAU,CAACqE,OAAzB,qBAAkD;AAC9CC,QAAAA,KAAK,EAAEC,QAAQ,CAACvB,YAAY,CAACU,OAAb,CAAqB,OAArB,CAAD,CAD+B;AAE9Cc,QAAAA,SAAS,EAAErB,IAAI,CAACM,KAAL,CAAWT,YAAY,CAACU,OAAb,CAAqB,SAArB,CAAX,EAA4Ce;AAFT,OAAlD,EAIKC,IAJL,CAIUC,GAAG,IAAI;AACT,cAAMC,cAAc,GAAGD,GAAG,CAACE,IAAJ,CAASxB,MAAT,CAAgBS,IAAI,IAAIA,IAAI,CAACgB,OAAL,KAAiBZ,WAAzC,EAAsDa,IAAtD,CAA2D,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAAClC,UAAF,GAAemC,CAAC,CAACnC,UAAtF,EAAkGF,GAAlG,CAAsGkB,IAAI,IAAI;AAEjI,iBAAO;AAAEoB,YAAAA,QAAQ,EAAEpB,IAAI,CAACR;AAAjB,WAAP;AACH,SAHsB,CAAvB;AAIA,cAAM6B,eAAe,GAAG,KAAKlE,KAAL,CAAWS,OAAX,CAAmBkB,GAAnB,CAAuB,CAACC,MAAD,EAASd,GAAT,KAAiB;AAC5D,mCAAYc,MAAZ,EAAuB+B,cAAc,CAAC7C,GAAD,CAArC;AACH,SAFuB,CAAxB,CALS,CAQT;;AACA,aAAKE,QAAL,CAAc;AAAEP,UAAAA,OAAO,EAAEyD;AAAX,SAAd;AACAnC,QAAAA,YAAY,CAACC,OAAb,CAAqB,YAArB,EAAmCE,IAAI,CAACC,SAAL,CAAewB,cAAf,CAAnC;AACH,OAfL;AAgBH;;AAAA,KAzBe,CA0BhB;;AAGAzE,IAAAA,KAAK,CAACiF,GAAN,WAAapF,UAAU,CAACqE,OAAxB,sBACKK,IADL,CACUC,GAAG,IAAI;AACT,YAAME,IAAI,GAAGF,GAAG,CAACE,IAAjB;AACA,WAAK5C,QAAL,CAAc;AACVf,QAAAA,UAAU,EAAE2D,IADF;AAEVQ,QAAAA,QAAQ,EAAE;AAFA,OAAd;AAIH,KAPL,EA7BgB,CAsCZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGJlF,IAAAA,KAAK,CAACiF,GAAN,WAAapF,UAAU,CAACqE,OAAxB,8BAAmD,KAAKpD,KAAL,CAAWM,EAA9D,GACKmD,IADL,CACUC,GAAG,IAAIA,GAAG,CAACE,IAAJ,CAASS,UAAT,CAAoBC,KADrC,EAEKb,IAFL,CAEUc,IAAI,IAAI;AACdA,MAAAA,IAAI,CAAC5C,GAAL,CAAS6C,GAAG,IAAI,KAAKxD,QAAL,CAAc;AAAEyD,QAAAA,OAAO,EAAEhD,MAAM,CAACiD,MAAP,CAAcF,GAAd;AAAX,OAAd,CAAhB;AACH,KAJD,EAhDgB,CAqDZ;AACA;AACA;AACA;AAEA;AACA;AACA;AAGJ;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;AAIDG,EAAAA,MAAM,GAAG;AACL;AACA;AACA,UAAMC,UAAU,GAAG,KAAK5E,KAAL,CAAWW,WAAX,KAA2B,CAA3B,GACf;AACCuB,IAAAA,IAAI,CAACM,KAAL,CAAWT,YAAY,CAACU,OAAb,CAAqB,gBAArB,CAAX,EAAmDL,MAAnD,CAA0DS,IAAI,IAAIA,IAAI,KAAK,KAA3E,EAAkFP,MAAlF,KAA6F,CAA9F,GACI,oBAAC,IAAD;AAAM,MAAA,EAAE,EAAE;AAAEuC,QAAAA,QAAQ,EAAE,eAAZ;AAA6B7E,QAAAA,KAAK,EAAE;AAAES,UAAAA,OAAO,EAAE,KAAKT,KAAL,CAAWS;AAAtB;AAApC,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAE,KAAKqE,MAAtB;AAA8B,MAAA,SAAS,EAAC,QAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,CADJ,GAIM,0CACE,oBAAC,MAAD;AAAQ,MAAA,SAAS,EAAC,QAAlB;AAA2B,MAAA,QAAQ,MAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,CANS,GAUf,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAE,KAAK7D,IAAtB;AAA4B,MAAA,SAAS,EAAC,QAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVJ,CAHK,CAgBL;AACA;AACA;AAEA;;AApBK,UAqBGR,OArBH,GAqBe,KAAKT,KArBpB,CAqBGS,OArBH;AAuBL,QAAIsE,MAAM,GAAG,KAAK/E,KAAL,CAAWM,EAAxB,CAvBK,CAyBL;AACA;AACA;;AACA0E,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKjF,KAAL,CAAWI,QAAX,CAAoB,CAApB,CAAZ,EA5BK,CA6BL;AACA;AAEA;;AAEA,WACI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEI;AAAK,MAAA,KAAK,EAAE;AAAE8E,QAAAA,OAAO,EAAE,MAAX;AAAmBC,QAAAA,cAAc,EAAE;AAAnC,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKnF,KAAL,CAAWW,WAAX,KAA2B,CAA3B,IAAgC,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAE;AAAEyE,QAAAA,WAAW,EAAE;AAAf,OAAf;AAAwC,MAAA,OAAO,EAAE,KAAKjE,IAAtD;AAA4D,MAAA,SAAS,EAAC,QAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADrC,EAEKyD,UAFL,CAFJ,EAeK,KAAK5E,KAAL,CAAWC,UAAX,CAAsB0B,GAAtB,CAA0B,CAAC0D,SAAD,EAAYC,CAAZ,KAAkB;AACzC,aACI;AAAI,QAAA,GAAG,EAAErG,QAAQ,EAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAI,QAAA,GAAG,EAAEqG,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKD,SAAS,CAAC9E,IADf,CADJ,CADJ;AAOH,KARA,CAfL,EAwBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAxBJ,EA4BI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA5BJ,EAmCI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAnCJ,EAoCK,KAAKP,KAAL,CAAWI,QAAX,CAAoBuB,GAApB,CAAwBvB,QAAQ,IAAI;AACjC,aACI;AAAI,QAAA,GAAG,EAAEnB,QAAQ,EAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAI,QAAA,GAAG,EAAE8F,MAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK3E,QAAQ,CAACA,QADd,EAEI,oBAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,EAGI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHJ,CADJ,CADJ;AASH,KAVA,CApCL,CADJ,CADJ;AAoEH;;AA5PiD","sourcesContent":["import Frequency from './Frequency/Radio';\nimport Comments from './Comment/Comment';\n// import Legend from './Legend/Legend';\nimport Motivation from './Motivation/Motivation'\nimport Categories from './Categories/Categories'\nimport URLStorage from '../../../constants';\nimport { Link } from 'react-router-dom';\nimport uniqueid from 'uniqid';\n// import  ConfirmModal  from '../Modal';\n\nimport '../../../App.css';\n\nimport axios from 'axios';\nimport React from 'react';\nimport { Container, Row, Col, Button, Form, FormGroup } from 'reactstrap';\n\nimport './MainForm.css'\nimport DropdownExampleCompact from './Motivation/Motivation';\nimport { ButtonGroup, Dropdown } from 'semantic-ui-react';\nimport DropdownMotivation from './Motivation/Motivation';\n\nexport default class MainForm extends React.Component {\n\n    state = {\n\n        // --------- TESTING : UNCOMMENT WHEN SERVER DOWN ----------------\n        categories: [],\n        motivations: [],\n        regularity: [],\n        question: [],\n        questions: [],\n        id: 1,\n        name: [],\n        incident: [],\n        // ----------------------------------------------------------------\n\n        answers: [],\n        value: [],\n        selectedCat: 1,\n        selectedMode: 0,\n\n    };\n\n    handleSelection = (idx) => (e) => {\n        this.setState({ selectedMode: idx });\n    };\n\n    next = () => {\n        this.setState(prevState => ({ \n            selectedCat: prevState.selectedCat + 1,\n            id: prevState.id + 1, \n\n        }));\n        // this.setState(i => ({\n        //     id: i +1\n        // }));\n    }\n\n    prev = () => {\n        this.setState(prevState => ({ \n            selectedCat: prevState.selectedCat - 1,\n            id: prevState.id - 1,  \n        }));\n    }\n\n    anyChange = (id) => (e) => {\n        const inputName = e.target.name;\n        const inputValue = e.target.value;\n        let entries = Object.assign({}, this.state);\n        const { answers } = entries;\n        answers.map(answer => answer.questionID === id ? answer[inputName] = inputValue : undefined);\n        this.setState(entries);\n        localStorage.setItem(this.props.id, JSON.stringify(this.state.answers));\n\n        // ------------ SWITCH BOOLEAN TO COMPLETED FOR CURRENT MODE ---------------\n\n        if (this.state.answers.filter(answer => answer.frequency === null).length === 0) {\n\n            let completeMode = JSON.parse(localStorage.getItem(\"completedModes\"));\n            completeMode[this.props.index] = true;\n\n            if (this.props.group) {\n                var dummieArray = [];\n                completeMode.map(item => dummieArray.push(true));\n                localStorage.setItem(\"completedModes\", JSON.stringify(dummieArray));\n\n            } else {\n                localStorage.setItem(\"completedModes\", JSON.stringify(completeMode));\n            }\n        }\n    }\n\n    selectCat = (e) => {\n        this.setState({ selectedCat: e.target.value })\n        localStorage.setItem(this.props.id, JSON.stringify(this.state.answers));\n    }\n\n    componentDidMount() {\n\n        const transportId = this.props.id;\n        this.setState({ modeID: transportId })\n\n        // ------------------ Retreiving PREVIOUS PERIOD RESULTS ----------------------\n\n        if (JSON.parse(localStorage.getItem(\"periods\"))) {\n\n            axios.post(`${URLStorage.API_URL}/resultPeriode`, {\n                ptoID: parseInt(localStorage.getItem(\"ptoid\")),\n                periodeID: JSON.parse(localStorage.getItem(\"periods\")).previousPeriod,\n            })\n                .then(res => {\n                    const previousResult = res.data.filter(item => item.mode_id === transportId).sort((a, b) => a.questionID - b.questionID).map(item => {\n\n                        return { prevFreq: item.frequency, };\n                    })\n                    const newStateAnswers = this.state.answers.map((answer, idx) => {\n                        return { ...answer, ...previousResult[idx] }\n                    })\n                    // // ------------------ ADDING PREVIOUS PERIOD RESULTS TO THE STATE.ANSWERS ----------------------\n                    this.setState({ answers: newStateAnswers });\n                    localStorage.setItem(\"prevResult\", JSON.stringify(previousResult))\n                })\n        };\n        // // -----------------------------------------------------------------\n\n\n        axios.get(`${URLStorage.API_URL}/getallincident`)\n            .then(res => {\n                const data = res.data\n                this.setState({\n                    categories: data,\n                    isLoaded: true,\n                })\n            })\n\n            // axios.get(`${URLStorage.API_URL}/getallquestions`)\n            // .then(res => {\n            //     const data = res.data\n            //     this.setState({\n            //         questions: data,\n            //         isLoaded: true,\n            //     })\n            // })\n\n\n        axios.get(`${URLStorage.API_URL}/getAllQuestions/${this.state.id}`)\n            .then(res => res.data.collection.items)\n            .then(json => {\n            json.map(obj => this.setState({ results: Object.values(obj) }))\n        })\n            // .then(res => {\n            //     const data = res.data\n            //     this.setState({\n            //         question: data,\n\n            //         isLoaded: true,\n            //     })\n            // })\n\n\n        // axios.get(`${URLStorage.API_URL}/getallquestions`)\n        // .then(response =>\n        //         response.data.map(question => ({\n        //           question: `${question.question}`,\n        //           incident: `${question.incident}`,\n        //         }))\n        //       )\n    };\n\n    \n\n    render() {\n        // const id = 3;\n        // NEXT / SUBMIT BUTTON SWITCH\n        const nextSubmit = this.state.selectedCat === 5 ?\n            // || (parseInt((localStorage.getItem(\"group\")) === 1)\n            (JSON.parse(localStorage.getItem(\"completedModes\")).filter(item => item === false).length === 0) ?\n                <Link to={{ pathname: \"/confirmation\", state: { answers: this.state.answers } }}>\n                    <Button onClick={this.submit} className=\"submit\">Submit</Button>\n                </Link>\n                : <>\n                    <Button className=\"submit\" disabled>Submit</Button>\n                </>\n            :\n            <Button onClick={this.next} className=\"submit\">Next</Button>;\n\n\n        // async function getAnswers(){\n        //     const { answers } = await this.state;\n        // }\n\n        // getAnswers();\n        const { answers } = this.state;\n\n        var testId = this.state.id;\n\n        //console.log(this.state.categories);\n        // console.log(this.state.regularity);\n        //console.log(this.state.motivations);\n        console.log(this.state.question[0]);\n        // console.log(this.state.answers);\n        // console.log(this.state);\n\n        // const { categories, active } = this.props;\n\n        return (\n            <React.Fragment>\n                <Container>\n\n                    <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n                        {this.state.selectedCat !== 1 && <Button style={{ marginRight: \"10px\" }} onClick={this.prev} className=\"submit\" >Previous</Button>}\n                        {nextSubmit}\n                    </div>\n\n\n\n\n                    {/* <ul style={{display: \"flex\", justifyContent: \"space-around\"}}>\n                    { this.state.categories.map(categories => <li style={{fontSize: \"15px\", padding: \"5px\", textAlign:\"center\"}} key={uniqueid()} onClick={this.props.parentCallback}>{categories.name}</li>)}\n                    </ul> */}\n\n\n                    {this.state.categories.map((categorie, i) => {\n                        return (\n                            <ul key={uniqueid()}>\n                                <li key={i} >\n                                    {categorie.name}\n                                </li>\n                            </ul>\n                        );\n                    })}\n                    <br />\n                    {/* <ul>\n                    { this.state.motivations.map(item => <li key={uniqueid()}>{item.motivation}</li>)}\n                    </ul>                     */}\n                    <br />\n\n\n                    {/* <ul>\n                    { this.state.question.map(item => <li key={uniqueid()}>{item.question}</li>)}\n                    </ul>   */}\n\n                    <br />\n                    {this.state.question.map(question => {\n                        return (\n                            <ul key={uniqueid()}>\n                                <li key={testId} >\n                                    {question.question}\n                                    <DropdownMotivation />\n                                    <Frequency />\n                                </li>\n                            </ul>\n                        );\n                    })}\n\n                    {/* <DropdownMotivation /> */}\n                    {/* <Motivation /> */}\n                    {/* < DropdownExampleCompact /> */}\n                    {/* <Frequency /> */}\n\n\n\n                    {/* {this.state.regularity.map(frequency => {\n                        return (\n                                    <ButtonGroup className='squareRadio' name=\"frequency\">\n                                        <Button name=\"frequency\" key={uniqueid()} >{frequency.regularity}</Button>\n                                    </ButtonGroup>\n                        );\n                    })} */}\n\n                </Container>\n            </React.Fragment>\n        )\n    }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}