{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aggad.samy\\\\Workspace\\\\UITP-React-Spring\\\\Front-end\\\\src\\\\components\\\\FormPage\\\\Mainform\\\\MainForm.js\";\nimport Frequency from './Frequency/Radio';\nimport Comments from './Comment/Comment'; // import Legend from './Legend/Legend';\n\nimport Motivation from './Motivation/Motivation';\nimport Categories from './Categories/Categories';\nimport URLStorage from '../../../constants';\nimport { Link } from 'react-router-dom';\nimport uniqueid from 'uniqid';\nimport { AsyncStorage } from 'AsyncStorage'; // import  ConfirmModal  from '../Modal';\n\nimport '../../../App.css';\nimport axios from 'axios';\nimport React from 'react';\nimport { Container, Row, Col, Button, Form, FormGroup } from 'reactstrap';\nimport './MainForm.css';\nimport DropdownExampleCompact from './Motivation/Motivation';\nimport { ButtonGroup, Dropdown } from 'semantic-ui-react';\nimport DropdownMotivation from './Motivation/Motivation';\nexport default class MainForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSelection = idx => e => {\n      this.setState({\n        selectedMode: idx\n      });\n    };\n\n    this.next = () => {\n      let id = this.state.id + 1;\n      this.fetchQuestions(id);\n      this.setState(prevState => ({\n        selectedCat: prevState.selectedCat + 1,\n        id: prevState.id + 1\n      }));\n    };\n\n    this.prev = () => {\n      let id = this.state.id - 1;\n      this.fetchQuestions(id);\n      this.setState(prevState => ({\n        selectedCat: prevState.selectedCat - 1,\n        id: prevState.id - 1\n      }));\n    };\n\n    this.fetchQuestions = id => {\n      axios.get(\"\".concat(URLStorage.API_URL, \"/getAllQuestions/\").concat(id)).then(res => {\n        const data = res.data;\n        this.setState({\n          question: data,\n          isLoaded: true\n        });\n      });\n    };\n\n    this.selectCat = e => {\n      this.setState({\n        selectedCat: e.target.value\n      });\n      localStorage.setItem(this.props.id, JSON.stringify(this.state.answers));\n    };\n\n    this.frequencyCallback = regularityCall => {\n      this.setState({\n        regularityFromChild: regularityCall\n      });\n      console.log(\"regularity call \", regularityCall);\n    };\n\n    this.getFrequency = frequencyCallbackFromChild => {\n      console.log('From getFrequency in MainForm:');\n      console.log(frequencyCallbackFromChild);\n      this.setState({\n        frequencyFromChild: frequencyCallbackFromChild\n      });\n    };\n\n    this.getMotivation = motivationCallbackFromChild => {\n      console.log('From getMotivation in MainForm:');\n      console.log(motivationCallbackFromChild);\n      this.setState({\n        motivationFromChild: motivationCallbackFromChild\n      });\n    };\n\n    this.state = {\n      question: [],\n      id: 1,\n      test: null,\n      allData: [],\n      answers: [],\n      value: [],\n      selectedCat: 1,\n      selectedMode: 0,\n      dataGet: [],\n      incidentName: \"\",\n      frequencyFromChild: 0,\n      motivationFromChild: null\n    };\n  }\n\n  allStorage() {\n    var archive = [],\n        keys = Object.keys(localStorage),\n        i = 0,\n        key;\n\n    for (; key = keys[i]; i++) {\n      archive.push(key + '=' + localStorage.getItem(key));\n    }\n\n    return console.log(archive);\n  }\n\n  async handleClick(question) {\n    if (this.state.allData.length) {\n      var getQuestion = this.state.allData.find(function (data, id) {\n        if (data.id === question.id) {\n          return data;\n        } else {\n          return false;\n        }\n      });\n\n      if (getQuestion) {\n        var indexOf = this.state.allData.indexOf(getQuestion);\n\n        for (var key in getQuestion) {\n          if (getQuestion[key] === question[key] || getQuestion[key] === undefined) {\n            getQuestion[key] = question[key];\n            await this.state.allData.splice(indexOf, 1, question);\n            localStorage.setItem(\"bigItem\", JSON.stringify(this.state.allData));\n          }\n        }\n      } else {\n        await this.setState({\n          allData: [...this.state.allData, question]\n        });\n        localStorage.setItem(\"bigItem\", JSON.stringify(this.state.allData));\n      }\n    } else {\n      await this.setState({\n        allData: [question]\n      });\n      localStorage.setItem(\"bigItem\", JSON.stringify(this.state.allData));\n    }\n\n    await localStorage.setItem(\"bigItem\", JSON.stringify(this.state.allData)); // To retrive that item\n    // AsyncStorage.getItem('bigItem')\n    // .then(val => {\n    // if (val !== null) console.log(\"value \", val); // You can do whatever you want with the email\n    // })\n    // .catch(err => console.error(\"error \", err)) // if there was an error fetching data\n    //console.log(\"this state all data in handleClik \", this.state.allData)\n  }\n\n  componentDidMount() {\n    var bigItem = JSON.parse(localStorage.getItem(\"bigItem\"));\n    this.fetchQuestions(1);\n    const transportId = this.props.id;\n    this.setState({\n      modeID: transportId\n    });\n\n    if (this.state.allData.filter(answer => answer.frequency === null).length === 0) {\n      let completeMode = JSON.parse(localStorage.getItem(\"completedModes\"));\n      completeMode[this.props.index] = true;\n\n      if (this.props.group) {\n        var dummieArray = [];\n        completeMode.map(item => dummieArray.push(true));\n        localStorage.setItem(\"completedModes\", JSON.stringify(dummieArray));\n      } else {\n        localStorage.setItem(\"completedModes\", JSON.stringify(completeMode));\n      }\n    }\n  }\n\n  componentWillMount() {\n    var bigItem = JSON.parse(localStorage.getItem(\"bigItem\"));\n    var questionStorage = localStorage.getItem(\"question\");\n    var getData = JSON.parse(localStorage.getItem(\"\".concat(questionStorage)));\n    var selectedMode = JSON.parse(localStorage.getItem(\"selectedModes\"));\n    var selectedModeName = [];\n\n    for (var i in selectedMode) {\n      selectedModeName.push(selectedMode[i].name);\n    }\n\n    if (bigItem) {\n      bigItem.selectedMode = selectedModeName;\n    } else {\n      bigItem = [];\n    }\n\n    this.setState({\n      allData: bigItem,\n      dataGet: getData\n    });\n  }\n\n  render() {\n    // NEXT / SUBMIT BUTTON SWITCH\n    console.log(\"THE STATE \", this.state.allData);\n    const nextSubmit = this.state.selectedCat === 5 ? // || (parseInt((localStorage.getItem(\"group\")) === 1)\n    JSON.parse(localStorage.getItem(\"completedModes\")).filter(item => item === false).length === 0 ? React.createElement(Link, {\n      to: {\n        pathname: \"/confirmation\",\n        state: {\n          answers: this.state.answers\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.submit,\n      className: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283\n      },\n      __self: this\n    }, \"Submit\")) : React.createElement(React.Fragment, null, React.createElement(Button, {\n      className: \"submit\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286\n      },\n      __self: this\n    }, \"Submit\")) : React.createElement(Button, {\n      onClick: this.next,\n      className: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289\n      },\n      __self: this\n    }, \"Next\");\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291\n      },\n      __self: this\n    }, React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"flex-end\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    }, this.state.selectedCat !== 1 && React.createElement(Button, {\n      style: {\n        marginRight: \"10px\"\n      },\n      onClick: this.prev,\n      className: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294\n      },\n      __self: this\n    }, \"Previous\"), nextSubmit), React.createElement(Categories, {\n      idPage: this.state.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299\n      },\n      __self: this\n    }), this.state.question.map((question, index) => {\n      var allData = this.state.allData;\n      var questionParent = question;\n      this.state.incidentName = questionParent.incident.name;\n      localStorage.setItem(\"question\", question.question);\n      var questionStorage = localStorage.getItem(\"question\");\n      localStorage.setItem(\"\".concat(questionStorage), JSON.stringify(questionParent)); //var frequencyFromChild = this.state.frequencyFromChild\n\n      var result = [];\n\n      for (var i = 0; i < allData.length; i++) {\n        //var filledQuestion = allData[i]\n        result.push(allData[i]); //console.log(filledQuestion)\n        //return result\n      }\n\n      console.log(\"value to mainform \", result[index].motivation);\n      return React.createElement(\"ul\", {\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        value: question.question,\n        key: index,\n        style: {\n          fontSize: \"20px\"\n        },\n        onClick: this.handleClick.bind(this, question),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 322\n        },\n        __self: this\n      }, question.question, React.createElement(DropdownMotivation, {\n        key: index,\n        listNameFromParent: questionParent,\n        value: result[index].motivation //value={this.test(question.question)}\n        ,\n        passValueToMainForm: this.getMotivation,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 331\n        },\n        __self: this\n      }), React.createElement(Frequency, {\n        callBackFromParent: this.frequencyCallback,\n        listNameFromParent: questionParent,\n        value: result[index].frequency,\n        passValueToMainForm: this.getFrequency,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 338\n        },\n        __self: this\n      }), React.createElement(Comments, {\n        listNameFromParent: questionParent,\n        getComment: this.getBackComment //value={this.test(question.question)}\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 344\n        },\n        __self: this\n      })));\n    })));\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\aggad.samy\\Workspace\\UITP-React-Spring\\Front-end\\src\\components\\FormPage\\Mainform\\MainForm.js"],"names":["Frequency","Comments","Motivation","Categories","URLStorage","Link","uniqueid","AsyncStorage","axios","React","Container","Row","Col","Button","Form","FormGroup","DropdownExampleCompact","ButtonGroup","Dropdown","DropdownMotivation","MainForm","Component","constructor","props","handleSelection","idx","e","setState","selectedMode","next","id","state","fetchQuestions","prevState","selectedCat","prev","get","API_URL","then","res","data","question","isLoaded","selectCat","target","value","localStorage","setItem","JSON","stringify","answers","frequencyCallback","regularityCall","regularityFromChild","console","log","getFrequency","frequencyCallbackFromChild","frequencyFromChild","getMotivation","motivationCallbackFromChild","motivationFromChild","test","allData","dataGet","incidentName","allStorage","archive","keys","Object","i","key","push","getItem","handleClick","length","getQuestion","find","indexOf","undefined","splice","componentDidMount","bigItem","parse","transportId","modeID","filter","answer","frequency","completeMode","index","group","dummieArray","map","item","componentWillMount","questionStorage","getData","selectedModeName","name","render","nextSubmit","pathname","submit","display","justifyContent","marginRight","questionParent","incident","result","motivation","fontSize","bind","getBackComment"],"mappings":"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","sourcesContent":["import Frequency from './Frequency/Radio';\nimport Comments from './Comment/Comment';\n// import Legend from './Legend/Legend';\nimport Motivation from './Motivation/Motivation'\nimport Categories from './Categories/Categories'\nimport URLStorage from '../../../constants';\nimport { Link } from 'react-router-dom';\nimport uniqueid from 'uniqid';\nimport { AsyncStorage } from 'AsyncStorage';\n// import  ConfirmModal  from '../Modal';\n\nimport '../../../App.css';\n\nimport axios from 'axios';\nimport React from 'react';\nimport { Container, Row, Col, Button, Form, FormGroup } from 'reactstrap';\n\nimport './MainForm.css'\nimport DropdownExampleCompact from './Motivation/Motivation';\nimport { ButtonGroup, Dropdown } from 'semantic-ui-react';\nimport DropdownMotivation from './Motivation/Motivation';\n\nexport default class MainForm extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            question: [],\n            id: 1,\n            test: null,\n            allData: [],\n            answers: [],\n            value: [],\n            selectedCat: 1,\n            selectedMode: 0,\n            dataGet: [],\n            incidentName: \"\",\n            frequencyFromChild: 0,\n            motivationFromChild: null,\n\n        }\n    }\n\n    allStorage() {\n\n        var archive = [],\n            keys = Object.keys(localStorage),\n            i = 0, key;\n\n        for (; key = keys[i]; i++) {\n            archive.push(key + '=' + localStorage.getItem(key));\n        }\n\n        return console.log(archive);\n    }\n\n    async handleClick(question) {\n        if (this.state.allData.length) {\n            var getQuestion = this.state.allData.find(function (data, id) {\n                if (data.id === question.id) {\n                    return data\n                } else {\n                    return false\n                }\n            })\n            if (getQuestion) {\n                var indexOf = this.state.allData.indexOf(getQuestion);\n                for (var key in getQuestion) {\n                    if (getQuestion[key] === question[key] || getQuestion[key] === undefined) {\n                        getQuestion[key] = question[key]\n                        await this.state.allData.splice(indexOf, 1, question)\n                        localStorage.setItem(\"bigItem\", JSON.stringify(this.state.allData))\n                    }\n                }\n            } else {\n                await this.setState({ allData: [...this.state.allData, question] })\n                localStorage.setItem(\"bigItem\", JSON.stringify(this.state.allData))\n\n            }\n        } else {\n            await this.setState({ allData: [question] })\n            localStorage.setItem(\"bigItem\", JSON.stringify(this.state.allData))\n        }\n        await localStorage.setItem(\"bigItem\", JSON.stringify(this.state.allData))\n\n        // To retrive that item\n        // AsyncStorage.getItem('bigItem')\n        // .then(val => {\n        // if (val !== null) console.log(\"value \", val); // You can do whatever you want with the email\n        // })\n        // .catch(err => console.error(\"error \", err)) // if there was an error fetching data\n\n        //console.log(\"this state all data in handleClik \", this.state.allData)\n    }\n\n    handleSelection = (idx) => (e) => {\n        this.setState({ selectedMode: idx });\n    };\n\n    next = () => {\n        let id = this.state.id + 1;\n        this.fetchQuestions(id);\n        this.setState(prevState => ({\n            selectedCat: prevState.selectedCat + 1,\n            id: prevState.id + 1,\n\n        }));\n\n\n    }\n    prev = () => {\n        let id = this.state.id - 1;\n        this.fetchQuestions(id);\n        this.setState(prevState => ({\n            selectedCat: prevState.selectedCat - 1,\n            id: prevState.id - 1,\n        }));\n\n    }\n\n\n    fetchQuestions = (id) => {\n        axios.get(`${URLStorage.API_URL}/getAllQuestions/${id}`)\n            .then(res => {\n                const data = res.data\n                this.setState({\n                    question: data,\n                    isLoaded: true,\n                })\n            })\n    }\n\n    // test = (question) => {\n    //     var test = this.state.allData\n    //     if (test === null) {\n    //         return this.setState({\n    //             allData: []\n    //         })\n    //     } \n    //else {\n\n    //     for (let i = 0; i < test.length; i++) {\n    //         if (test[i].question === question) {\n    //         }\n\n    //     }\n    // }\n\n\n    //}\n\n    // test = (question) => {\n    //     var test = this.state.allData\n    //     if (test === null) {\n    //         return this.setState({\n    //             allData: []\n    //         })\n    //     } \n    //     else {\n    //         for (let i = 0; i < test.length; i++) {\n    //             if (test[i].question === question) {\n    //                 if (test[i].frequency) {\n    //                     console.log(\"frequency\", test[i].frequency)\n    //                     return test[i].frequency\n    //                 } else if (test[i].motivation) {\n    //                     console.log(\"motivation\", test[i].motivation)\n    //                     return test[i].motivation\n    //                 } else if (test[i].comment) {\n    //                     console.log(\"comment\", test[i].comment)\n    //                     return test[i].comment\n    //                 } else {\n    //                     console.log(\"Nothing\")\n    //                 }\n    //             }\n    //         }\n    //     }\n    // }\n\n        // anyChange = (id) => (e) => {\n        //     const inputName = e.target.name;\n        //     const inputValue = e.target.value;\n        //     let entries = Object.assign({}, this.state);\n        //     const { answers } = entries;\n        //     answers.map(answer => answer.questionID === id ? answer[inputName] = inputValue : undefined);\n        //     this.setState(entries);\n        //     localStorage.setItem(this.props.id, JSON.stringify(this.state.answers));\n\n        //     // ------------ SWITCH BOOLEAN TO COMPLETED FOR CURRENT MODE ---------------\n\n        //     console.log(this.state.allData)\n\n        //     if (this.state.allData.filter(answer => answer.frequency === null).length === 0) {\n\n        //         let completeMode = JSON.parse(localStorage.getItem(\"completedModes\"));\n        //         completeMode[this.props.index] = true;\n\n        //         if (this.props.group) {\n        //             var dummieArray = [];\n        //             completeMode.map(item => dummieArray.push(true));\n        //             localStorage.setItem(\"completedModes\", JSON.stringify(dummieArray));\n\n        //         } else {\n        //             localStorage.setItem(\"completedModes\", JSON.stringify(completeMode));\n        //         }\n        //     }\n        // }\n\n        selectCat = (e) => {\n            this.setState({ selectedCat: e.target.value })\n            localStorage.setItem(this.props.id, JSON.stringify(this.state.answers));\n        }\n        frequencyCallback = (regularityCall) => {\n            this.setState({\n                regularityFromChild: regularityCall\n            })\n            console.log(\"regularity call \", regularityCall)\n        }\n        componentDidMount() {\n            var bigItem = JSON.parse(localStorage.getItem(\"bigItem\"))\n            this.fetchQuestions(1);\n\n            const transportId = this.props.id;\n            this.setState({ modeID: transportId })\n\n            if (this.state.allData.filter(answer => answer.frequency === null).length === 0) {\n\n                let completeMode = JSON.parse(localStorage.getItem(\"completedModes\"));\n                completeMode[this.props.index] = true;\n\n                if (this.props.group) {\n                    var dummieArray = [];\n                    completeMode.map(item => dummieArray.push(true));\n                    localStorage.setItem(\"completedModes\", JSON.stringify(dummieArray));\n\n                } else {\n                    localStorage.setItem(\"completedModes\", JSON.stringify(completeMode));\n                }\n            }\n        };\n\n        getFrequency = (frequencyCallbackFromChild) => {\n            console.log('From getFrequency in MainForm:')\n            console.log(frequencyCallbackFromChild)\n            this.setState({\n                frequencyFromChild: frequencyCallbackFromChild\n            })\n        }\n\n        getMotivation = (motivationCallbackFromChild) => {\n            console.log('From getMotivation in MainForm:')\n            console.log(motivationCallbackFromChild)\n            this.setState({\n                motivationFromChild: motivationCallbackFromChild\n            })\n        }\n\n        componentWillMount(){\n            var bigItem = JSON.parse(localStorage.getItem(\"bigItem\"))\n            var questionStorage = localStorage.getItem(\"question\");\n            var getData = JSON.parse(localStorage.getItem(`${questionStorage}`))\n            var selectedMode = JSON.parse(localStorage.getItem(\"selectedModes\"))\n            var selectedModeName = [];\n            for (var i in selectedMode) {\n                selectedModeName.push(selectedMode[i].name)\n            }\n            if (bigItem) {\n                bigItem.selectedMode = selectedModeName\n            }\n            else {\n                bigItem = []\n            }\n\n            this.setState({ allData: bigItem, dataGet: getData })\n        }\n\n\n        render() {\n            // NEXT / SUBMIT BUTTON SWITCH\n            console.log(\"THE STATE \", this.state.allData)\n            const nextSubmit = this.state.selectedCat === 5 ?\n                // || (parseInt((localStorage.getItem(\"group\")) === 1)\n                (JSON.parse(localStorage.getItem(\"completedModes\")).filter(item => item === false).length === 0) ?\n                    <Link to={{ pathname: \"/confirmation\", state: { answers: this.state.answers } }}>\n                        <Button onClick={this.submit} className=\"submit\" >Submit</Button>\n                    </Link>\n                    : <>\n                        <Button className=\"submit\" disabled>Submit</Button>\n                    </>\n                :\n                <Button onClick={this.next} className=\"submit\">Next</Button>;\n            return (\n                <React.Fragment>\n                    <Container>\n                        <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n                            {this.state.selectedCat !== 1 && <Button style={{ marginRight: \"10px\" }} onClick={this.prev} className=\"submit\" >Previous</Button>}\n                            {nextSubmit}\n                        </div>\n                        <Categories idPage={this.state.id} />\n                        <br />\n                        <br />\n                        {this.state.question.map((question, index) => {\n                            var allData = this.state.allData\n                            var questionParent = question\n                            this.state.incidentName = questionParent.incident.name\n                            localStorage.setItem(\"question\", question.question)\n                            var questionStorage = localStorage.getItem(\"question\");\n                            localStorage.setItem(`${questionStorage}`, JSON.stringify(questionParent))\n                            \n                            //var frequencyFromChild = this.state.frequencyFromChild\n                            var result = []\n                            for( var i = 0; i < allData.length; i++){\n                                //var filledQuestion = allData[i]\n                                result.push(allData[i])\n                                //console.log(filledQuestion)\n                                //return result\n                            }\n\n                            console.log(\"value to mainform \", result[index].motivation)\n                            return (\n                                <ul\n                                    key={index}\n                                >\n                                    <li\n                                        value={question.question}\n                                        key={index}\n                                        style={{ fontSize: \"20px\" }}\n                                        onClick={this.handleClick.bind(this, question)}\n                                    >\n                                        {\n                                            question.question\n                                        }\n                                        <DropdownMotivation\n                                            key={index}\n                                            listNameFromParent={questionParent}\n                                            value={result[index].motivation} \n                                            //value={this.test(question.question)}\n                                            passValueToMainForm={this.getMotivation}\n                                        />\n                                        <Frequency\n                                            callBackFromParent={this.frequencyCallback}\n                                            listNameFromParent={questionParent}\n                                            value={result[index].frequency} \n                                            passValueToMainForm={this.getFrequency}   \n                                        />\n                                        <Comments\n                                            listNameFromParent={questionParent}\n                                            getComment={this.getBackComment}\n                                        //value={this.test(question.question)}\n                                        />\n                                    </li>\n                                </ul>\n                            );\n                        })}\n                    </Container>\n                </React.Fragment>\n            )\n        }\n    }\n\n"]},"metadata":{},"sourceType":"module"}