{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aggad.samy\\\\Workspace\\\\uitp-service\\\\Front-end\\\\src\\\\components\\\\FormPage\\\\Mainform\\\\MainForm.js\";\nimport Frequency from './Frequency/Radio';\nimport Comments from './Comment/Comment'; // import Legend from './Legend/Legend';\n\nimport Motivation from './Motivation/Motivation';\nimport Categories from './Categories/Categories';\nimport URLStorage from '../../../constants';\nimport { Link } from 'react-router-dom';\nimport uniqueid from 'uniqid'; // import  ConfirmModal  from '../Modal';\n\nimport '../../../App.css';\nimport axios from 'axios';\nimport React from 'react';\nimport { Container, Row, Col, Button, Form, FormGroup } from 'reactstrap';\nimport './MainForm.css';\nimport DropdownExampleCompact from './Motivation/Motivation';\nimport { ButtonGroup, Dropdown } from 'semantic-ui-react';\nimport DropdownMotivation from './Motivation/Motivation';\nexport default class MainForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      // --------- TESTING : UNCOMMENT WHEN SERVER DOWN ----------------\n      categories: [],\n      motivations: [],\n      regularity: [],\n      question: [],\n      questions: [],\n      id: 1,\n      name: [],\n      incident: [],\n      results: [],\n      regularityFromChild: 0,\n      // ----------------------------------------------------------------\n      allData: [],\n      answers: [],\n      value: [],\n      selectedCat: 1,\n      selectedMode: 0\n    };\n\n    this.handleSelection = idx => e => {\n      this.setState({\n        selectedMode: idx\n      });\n    };\n\n    this.next = () => {\n      let id = this.state.id + 1;\n      this.fetchQuestions(id);\n      this.setState(prevState => ({\n        selectedCat: prevState.selectedCat + 1,\n        id: prevState.id + 1\n      }));\n    };\n\n    this.prev = () => {\n      let id = this.state.id - 1;\n      this.fetchQuestions(id);\n      this.setState(prevState => ({\n        selectedCat: prevState.selectedCat - 1,\n        id: prevState.id - 1\n      }));\n    };\n\n    this.fetchQuestions = id => {\n      axios.get(\"\".concat(URLStorage.API_URL, \"/getAllQuestions/\").concat(id)).then(res => {\n        const data = res.data;\n        this.setState({\n          question: data,\n          isLoaded: true\n        });\n      });\n    };\n\n    this.selectCat = e => {\n      this.setState({\n        selectedCat: e.target.value\n      });\n      localStorage.setItem(this.props.id, JSON.stringify(this.state.answers));\n    };\n\n    this.frequencyCallback = regularityCall => {\n      this.setState({\n        regularityFromChild: regularityCall\n      });\n    };\n  }\n\n  componentDidMount() {\n    localStorage.getItem(\"frequency\", \"motivations\", \"comments\", \"questions\", \"question\");\n    this.fetchQuestions(1);\n    const transportId = this.props.id;\n    var bigItem = JSON.parse(localStorage.getItem(\"bigItem\"));\n    this.setState({\n      modeID: transportId,\n      test: bigItem\n    }); // var selectedMode = JSON.parse(localStorage.getItem(\"selectedModes\"))\n    // console.log(\"Before ===>\", selectedMode)\n    // var selectedModeName = [];\n    // for(var i in selectedMode){\n    //     selectedModeName.push(selectedMode[i].name)\n    //     //selectedModeName =  selectedMode[i].name\n    //     console.log(\"in loop ===>\", selectedModeName) //key's value\n    //     }\n    //     bigItem.selectedMode = selectedModeName\n    // console.log(bigItem)\n\n    if (this.state.allData.filter(answer => answer.frequency === null).length === 0) {\n      let completeMode = JSON.parse(localStorage.getItem(\"completedModes\"));\n      completeMode[this.props.index] = true;\n\n      if (this.props.group) {\n        var dummieArray = [];\n        completeMode.map(item => dummieArray.push(true));\n        localStorage.setItem(\"completedModes\", JSON.stringify(dummieArray));\n      } else {\n        localStorage.setItem(\"completedModes\", JSON.stringify(completeMode));\n      }\n    } // axios.get(`${URLStorage.API_URL}/getallincident`)\n    //     .then(res => {\n    //         const data = res.data\n    //         this.setState({\n    //             categories: data,\n    //             isLoaded: true,\n    //         })\n    //     })\n    // axios.get(`${URLStorage.API_URL}/getallquestions`)\n    // .then(res => {\n    //     const data = res.data\n    //     this.setState({\n    //         questions: data,\n    //         isLoaded: true,\n    //     })\n    // })\n    // axios.get(`${URLStorage.API_URL}/getallquestions`)\n    // .then(response =>(\n    //         response.data.map(questions => {\n    //           questionTest.push(questions.question);\n    //           incidentTest.push(questions.incident);\n    //         }),\n    //         resultsTest = response.data,\n    //         this.setState({question : questionTest, incident : incidentTest, results: resultsTest})\n    //       ))\n\n  }\n\n  test(question) {\n    var test = this.state.test;\n\n    for (let i = 0; i < test.length; i++) {\n      if (test[i].question == question) console.log(\"HELLLOOO \", test[i].frequency);\n      return test[i].frequency;\n    }\n\n    console.log(\"RUN BABY\");\n  }\n\n  render() {\n    // NEXT / SUBMIT BUTTON SWITCH\n    const nextSubmit = this.state.selectedCat === 5 ? // || (parseInt((localStorage.getItem(\"group\")) === 1)\n    JSON.parse(localStorage.getItem(\"completedModes\")).filter(item => item === false).length === 0 ? React.createElement(Link, {\n      to: {\n        pathname: \"/confirmation\",\n        state: {\n          answers: this.state.answers\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.submit,\n      className: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, \"Submit\")) : React.createElement(React.Fragment, null, React.createElement(Button, {\n      className: \"submit\",\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, \"Submit\")) : React.createElement(Button, {\n      onClick: this.next,\n      className: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, \"Next\");\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"flex-end\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, this.state.selectedCat !== 1 && React.createElement(Button, {\n      style: {\n        marginRight: \"10px\"\n      },\n      onClick: this.prev,\n      className: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }, \"Previous\"), nextSubmit), React.createElement(Categories, {\n      idPage: this.state.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }), this.state.question.map((question, index) => {\n      let questionParent = question;\n      let incidentName = questionParent.incident.name;\n      questionParent.incident = incidentName;\n      console.log(question.question);\n      return React.createElement(\"ul\", {\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        value: question.question,\n        key: index,\n        style: {\n          fontSize: \"20px\"\n        },\n        onClick: a => {\n          localStorage.setItem(\"question\", question.question);\n          var questionStorage = localStorage.getItem(\"question\");\n          localStorage.setItem(\"\".concat(questionStorage), JSON.stringify(questionParent)); //let answer = this.state.allData;\n\n          var getData = JSON.parse(localStorage.getItem(\"\".concat(questionStorage)));\n          var bigItem = JSON.parse(localStorage.getItem(\"bigItem\"));\n          console.log(\"INDEX\", getData.id); // console.log(\"get data \", getData)\n          // console.log(\"GET DATA ===> \", answer)\n\n          if (!bigItem) {\n            bigItem = [];\n          }\n\n          var selectedMode = JSON.parse(localStorage.getItem(\"selectedModes\")); // console.log(\"Before ===>\", selectedMode)\n\n          var selectedModeName = [];\n\n          for (var i in selectedMode) {\n            selectedModeName.push(selectedMode[i].name); //selectedModeName =  selectedMode[i].name\n            // console.log(\"in loop ===>\", selectedModeName) //key's value\n          }\n\n          bigItem.selectedMode = selectedModeName; // console.log(\"big item \", getData)\n\n          var modified = false;\n          var verif = bigItem.find(function (data, id) {\n            if (data.id === getData.id) {\n              // console.log(\"HEYYY \", data.id)\n              //console.log(\"something\", bigItemId.frequency)\n              for (var key in data) {\n                if (data[key] != getData[key]) {\n                  // console.log(\"HEYYY \", key)\n                  // console.log(\"data key\", data[key])\n                  // console.log(\"get data key\", getData[key])\n                  if (data[key] === undefined) {\n                    continue;\n                  } else {\n                    // console.log(\" Set TRUE\")\n                    data[key] = getData[key];\n                    modified = true;\n                    bigItem.splice(id, 1);\n                  }\n                }\n              } // console.log(\"true\")\n\n\n              return true;\n            } else {\n              // console.log(\"false\")\n              return false;\n            }\n          }); // console.log(\"verif  \", verif)\n\n          if (!verif || modified) {\n            bigItem.push(getData);\n            localStorage.setItem(\"bigItem\", JSON.stringify(bigItem)); //console.log(\"bigItem ===> \", bigItem)\n            //reponses.push(localStorage.getItem(\"bigItem\"))\n            // reponses.push(getData)\n            // localStorage.setItem(\"bigItem\", JSON.stringify(reponses))\n            //var result  = localStorage.getItem(\"bigItem\")\n            //console.log(\"RESULT ====>\", JSON.parse(result))\n            //console.log(\"See this ===> \", answer)\n          }\n\n          test(question.question); // else if (modified === true){\n          //     // console.log(\"Hello\")\n          // }\n          // console.log(\"big item\", bigItem)\n          // console.log(\"get data \", getData)\n          // console.log(\"big item \", bigItem)\n          // for (var i = 0; i < bigItem.length;){\n          //     //console.log(bigItem[i])\n          // }\n          // var arrayVal = [];\n          // Object.keys(selectedModeName).forEach(key => arrayVal.push(selectedModeName[key]));\n          // console.log(\" TRY ===> \", arrayVal);\n          //console.log(\"After loop ===>\", Object.values(selectedModeName))\n          // JSON.stringify(localStorage.setItem(\"bigItem\", bigItem))\n          //localStorage.setItem(\"bigItem\", JSON.stringify(bigItem))\n          // var finalItem = JSON.parse(localStorage.getItem(\"bigItem\"))\n          // var something = localStorage.getItem(\"finalItem\")\n          //console.log(\"Last log ===> \", bigItem)\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238\n        },\n        __self: this\n      }, question.question, React.createElement(DropdownMotivation, {\n        key: index,\n        listNameFromParent: questionParent,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 372\n        },\n        __self: this\n      }), React.createElement(Frequency, {\n        callBackFromParent: this.frequencyCallback,\n        listNameFromParent: questionParent //value={this.test(question.question)}\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 376\n        },\n        __self: this\n      }), React.createElement(Comments, {\n        listNameFromParent: questionParent,\n        getComment: this.getBackComment,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 381\n        },\n        __self: this\n      })));\n    })));\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\aggad.samy\\Workspace\\uitp-service\\Front-end\\src\\components\\FormPage\\Mainform\\MainForm.js"],"names":["Frequency","Comments","Motivation","Categories","URLStorage","Link","uniqueid","axios","React","Container","Row","Col","Button","Form","FormGroup","DropdownExampleCompact","ButtonGroup","Dropdown","DropdownMotivation","MainForm","Component","state","categories","motivations","regularity","question","questions","id","name","incident","results","regularityFromChild","allData","answers","value","selectedCat","selectedMode","handleSelection","idx","e","setState","next","fetchQuestions","prevState","prev","get","API_URL","then","res","data","isLoaded","selectCat","target","localStorage","setItem","props","JSON","stringify","frequencyCallback","regularityCall","componentDidMount","getItem","transportId","bigItem","parse","modeID","test","filter","answer","frequency","length","completeMode","index","group","dummieArray","map","item","push","i","console","log","render","nextSubmit","pathname","submit","display","justifyContent","marginRight","questionParent","incidentName","fontSize","a","questionStorage","getData","selectedModeName","modified","verif","find","key","undefined","splice","getBackComment"],"mappings":"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","sourcesContent":["import Frequency from './Frequency/Radio';\nimport Comments from './Comment/Comment';\n// import Legend from './Legend/Legend';\nimport Motivation from './Motivation/Motivation'\nimport Categories from './Categories/Categories'\nimport URLStorage from '../../../constants';\nimport { Link } from 'react-router-dom';\nimport uniqueid from 'uniqid';\n// import  ConfirmModal  from '../Modal';\n\nimport '../../../App.css';\n\nimport axios from 'axios';\nimport React from 'react';\nimport { Container, Row, Col, Button, Form, FormGroup } from 'reactstrap';\n\nimport './MainForm.css'\nimport DropdownExampleCompact from './Motivation/Motivation';\nimport { ButtonGroup, Dropdown } from 'semantic-ui-react';\nimport DropdownMotivation from './Motivation/Motivation';\n\nexport default class MainForm extends React.Component {\n\n    state = {\n\n        // --------- TESTING : UNCOMMENT WHEN SERVER DOWN ----------------\n        categories: [],\n        motivations: [],\n        regularity: [],\n        question: [],\n        questions: [],\n        id: 1,\n        name: [],\n        incident: [],\n        results: [],\n        regularityFromChild: 0,\n        // ----------------------------------------------------------------\n\n        allData: [],\n        answers: [],\n        value: [],\n        selectedCat: 1,\n        selectedMode: 0,\n\n    };\n    handleSelection = (idx) => (e) => {\n        this.setState({ selectedMode: idx });\n    };\n\n    next = () => {\n        let id = this.state.id + 1;\n        this.fetchQuestions(id);\n        this.setState(prevState => ({\n            selectedCat: prevState.selectedCat + 1,\n            id: prevState.id + 1,\n\n        }));\n\n\n    }\n    prev = () => {\n        let id = this.state.id - 1;\n        this.fetchQuestions(id);\n        this.setState(prevState => ({\n            selectedCat: prevState.selectedCat - 1,\n            id: prevState.id - 1,\n        }));\n\n    }\n\n\n    fetchQuestions = (id) => {\n        axios.get(`${URLStorage.API_URL}/getAllQuestions/${id}`)\n            .then(res => {\n                const data = res.data\n                this.setState({\n                    question: data,\n                    isLoaded: true,\n                })\n            })\n    }\n\n\n\n    // anyChange = (id) => (e) => {\n    //     const inputName = e.target.name;\n    //     const inputValue = e.target.value;\n    //     let entries = Object.assign({}, this.state);\n    //     const { answers } = entries;\n    //     answers.map(answer => answer.questionID === id ? answer[inputName] = inputValue : undefined);\n    //     this.setState(entries);\n    //     localStorage.setItem(this.props.id, JSON.stringify(this.state.answers));\n\n    //     // ------------ SWITCH BOOLEAN TO COMPLETED FOR CURRENT MODE ---------------\n\n    //     console.log(this.state.allData)\n\n    //     if (this.state.allData.filter(answer => answer.frequency === null).length === 0) {\n\n    //         let completeMode = JSON.parse(localStorage.getItem(\"completedModes\"));\n    //         completeMode[this.props.index] = true;\n\n    //         if (this.props.group) {\n    //             var dummieArray = [];\n    //             completeMode.map(item => dummieArray.push(true));\n    //             localStorage.setItem(\"completedModes\", JSON.stringify(dummieArray));\n\n    //         } else {\n    //             localStorage.setItem(\"completedModes\", JSON.stringify(completeMode));\n    //         }\n    //     }\n    // }\n\n    selectCat = (e) => {\n        this.setState({ selectedCat: e.target.value })\n        localStorage.setItem(this.props.id, JSON.stringify(this.state.answers));\n    }\n    frequencyCallback = (regularityCall) => {\n        this.setState({\n            regularityFromChild: regularityCall\n        })\n    }\n    componentDidMount() {\n        localStorage.getItem(\"frequency\", \"motivations\", \"comments\", \"questions\", \"question\")\n\n        this.fetchQuestions(1);\n\n        const transportId = this.props.id;\n       \n\n        var bigItem = JSON.parse(localStorage.getItem(\"bigItem\"))\n        this.setState({ modeID: transportId, test: bigItem })\n        // var selectedMode = JSON.parse(localStorage.getItem(\"selectedModes\"))\n        // console.log(\"Before ===>\", selectedMode)\n\n\n\n        // var selectedModeName = [];\n        // for(var i in selectedMode){\n        //     selectedModeName.push(selectedMode[i].name)\n        //     //selectedModeName =  selectedMode[i].name\n\n        //     console.log(\"in loop ===>\", selectedModeName) //key's value\n        //     }\n\n        //     bigItem.selectedMode = selectedModeName\n\n        // console.log(bigItem)\n\n        if (this.state.allData.filter(answer => answer.frequency === null).length === 0) {\n\n            let completeMode = JSON.parse(localStorage.getItem(\"completedModes\"));\n            completeMode[this.props.index] = true;\n\n            if (this.props.group) {\n                var dummieArray = [];\n                completeMode.map(item => dummieArray.push(true));\n                localStorage.setItem(\"completedModes\", JSON.stringify(dummieArray));\n\n            } else {\n                localStorage.setItem(\"completedModes\", JSON.stringify(completeMode));\n            }\n        }\n\n\n\n\n        // axios.get(`${URLStorage.API_URL}/getallincident`)\n        //     .then(res => {\n        //         const data = res.data\n        //         this.setState({\n        //             categories: data,\n        //             isLoaded: true,\n        //         })\n        //     })\n\n        // axios.get(`${URLStorage.API_URL}/getallquestions`)\n        // .then(res => {\n        //     const data = res.data\n        //     this.setState({\n        //         questions: data,\n        //         isLoaded: true,\n        //     })\n        // })\n\n        // axios.get(`${URLStorage.API_URL}/getallquestions`)\n        // .then(response =>(\n        //         response.data.map(questions => {\n        //           questionTest.push(questions.question);\n        //           incidentTest.push(questions.incident);\n        //         }),\n        //         resultsTest = response.data,\n        //         this.setState({question : questionTest, incident : incidentTest, results: resultsTest})\n        //       ))\n    };\n\n    test(question) {\n        var test = this.state.test\n        for(let i = 0; i< test.length; i++) {\n            if(test[i].question == question)\n                console.log(\"HELLLOOO \", test[i].frequency)\n                return test[i].frequency\n        }\n        console.log(\"RUN BABY\")\n    }\n    render() {\n        // NEXT / SUBMIT BUTTON SWITCH\n        const nextSubmit = this.state.selectedCat === 5 ?\n            // || (parseInt((localStorage.getItem(\"group\")) === 1)\n            (JSON.parse(localStorage.getItem(\"completedModes\")).filter(item => item === false).length === 0) ?\n                <Link to={{ pathname: \"/confirmation\", state: { answers: this.state.answers } }}>\n                    <Button onClick={this.submit} className=\"submit\" >Submit</Button>\n                </Link>\n                : <>\n                    <Button className=\"submit\" disabled>Submit</Button>\n                </>\n            :\n            <Button onClick={this.next} className=\"submit\">Next</Button>;\n        return (\n            <React.Fragment>\n                <Container>\n                    <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n                        {this.state.selectedCat !== 1 && <Button style={{ marginRight: \"10px\" }} onClick={this.prev} className=\"submit\" >Previous</Button>}\n                        {nextSubmit}\n                    </div>\n                    <Categories idPage={this.state.id} />\n                    <br />\n                    <br />\n                    {this.state.question.map((question, index) => {\n                        let questionParent = question\n                        let incidentName = questionParent.incident.name\n                        questionParent.incident = incidentName\n                        console.log(question.question)\n                        return (\n                            <ul\n                                key={index}\n                            >\n                                <li\n                                    value={question.question}\n                                    key={index}\n                                    style={{ fontSize: \"20px\" }}\n                                    onClick={(a) => {\n                                        localStorage.setItem(\"question\", question.question)\n                                        var questionStorage = localStorage.getItem(\"question\");\n                                        localStorage.setItem(`${questionStorage}`, JSON.stringify(questionParent))\n                                        //let answer = this.state.allData;\n\n                                        var getData = JSON.parse(localStorage.getItem(`${questionStorage}`))\n\n                                        var bigItem = JSON.parse(localStorage.getItem(\"bigItem\"))\n                                        console.log(\"INDEX\", getData.id)\n                                        // console.log(\"get data \", getData)\n\n                                        // console.log(\"GET DATA ===> \", answer)\n\n\n\n                                        \n                                        if(!bigItem){\n                                            bigItem=[]\n                                        }\n                                        var selectedMode = JSON.parse(localStorage.getItem(\"selectedModes\"))\n                                        // console.log(\"Before ===>\", selectedMode)\n                                        \n\n\n                                        var selectedModeName = [];\n                                        for (var i in selectedMode) {\n                                            selectedModeName.push(selectedMode[i].name)\n                                            //selectedModeName =  selectedMode[i].name\n\n                                            // console.log(\"in loop ===>\", selectedModeName) //key's value\n                                        }\n\n                                        bigItem.selectedMode = selectedModeName\n\n                                        // console.log(\"big item \", getData)\n                                        \n                                        var modified = false\n                                        var verif = bigItem.find(function (data, id) {\n                                            if (data.id === getData.id) {\n                                                // console.log(\"HEYYY \", data.id)\n                                                //console.log(\"something\", bigItemId.frequency)\n                                                for (var key in data){\n                                                    if (data[key] != getData[key]){\n                                                        // console.log(\"HEYYY \", key)\n                                                        // console.log(\"data key\", data[key])\n                                                        // console.log(\"get data key\", getData[key])\n                                                        if (data[key] === undefined){\n                                                            continue\n\n                                                        }\n                                                        else{\n                                                            // console.log(\" Set TRUE\")\n                                                            data[key] = getData[key]\n                                                            modified  = true\n                                                            bigItem.splice(id, 1)\n                                                        }\n                                                        \n\n                                                        \n                                                    }\n                                                    \n                                                }\n\n                                                // console.log(\"true\")\n                                                return true\n\n                                            } else {\n                                                // console.log(\"false\")\n                                                return false\n\n                                            }\n                                        })\n\n                                        \n                                        // console.log(\"verif  \", verif)\n                                        if (!verif || modified) {\n                                            \n                                            \n                                            bigItem.push(getData)\n                                            localStorage.setItem(\"bigItem\", JSON.stringify(bigItem))\n\n                                            \n\n                                            //console.log(\"bigItem ===> \", bigItem)\n                                            //reponses.push(localStorage.getItem(\"bigItem\"))\n                                            // reponses.push(getData)\n                                            // localStorage.setItem(\"bigItem\", JSON.stringify(reponses))\n                                            //var result  = localStorage.getItem(\"bigItem\")\n                                            //console.log(\"RESULT ====>\", JSON.parse(result))\n                                            //console.log(\"See this ===> \", answer)\n                                        }\n                                        test(question.question)\n                                        // else if (modified === true){\n                                        //     // console.log(\"Hello\")\n                                            \n                                        // }\n\n                                        // console.log(\"big item\", bigItem)\n\n\n                                        // console.log(\"get data \", getData)\n                                        // console.log(\"big item \", bigItem)\n\n                                        // for (var i = 0; i < bigItem.length;){\n                                        //     //console.log(bigItem[i])\n                                        // }\n\n                                        // var arrayVal = [];\n                                        // Object.keys(selectedModeName).forEach(key => arrayVal.push(selectedModeName[key]));\n                                        // console.log(\" TRY ===> \", arrayVal);\n\n                                        //console.log(\"After loop ===>\", Object.values(selectedModeName))\n\n\n\n                                        // JSON.stringify(localStorage.setItem(\"bigItem\", bigItem))\n                                        //localStorage.setItem(\"bigItem\", JSON.stringify(bigItem))\n                                        // var finalItem = JSON.parse(localStorage.getItem(\"bigItem\"))\n                                        // var something = localStorage.getItem(\"finalItem\")\n\n                                        //console.log(\"Last log ===> \", bigItem)\n\n                                    }\n                                    }\n\n                                >\n                                    {\n                                        question.question\n                                    }\n                                    <DropdownMotivation\n                                        key={index}\n                                        listNameFromParent={questionParent}\n                                    />\n                                    <Frequency\n                                        callBackFromParent={this.frequencyCallback}\n                                        listNameFromParent={questionParent}\n                                        //value={this.test(question.question)}\n                                    />\n                                    <Comments\n                                        listNameFromParent={questionParent}\n                                        getComment={this.getBackComment}\n                                    />\n                                </li>\n                            </ul>\n                        );\n                    })}\n                </Container>\n            </React.Fragment>\n        )\n    }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}