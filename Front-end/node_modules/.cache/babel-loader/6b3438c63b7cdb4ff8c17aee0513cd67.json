{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aggad.samy\\\\Workspace\\\\UITP-React-Spring\\\\Front-end\\\\src\\\\components\\\\FormPage\\\\Mainform\\\\Comment\\\\Comment.js\";\nimport { FormGroup, Label, Input } from 'reactstrap';\nimport React, { PureComponent } from 'react';\n\nclass Comments extends PureComponent {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      comment: \"\"\n    };\n  }\n\n  async handleChange(event) {\n    var val = event.target.value;\n    await this.setState({\n      comment: event.target.value\n    });\n  }\n\n  onblur(event) {\n    const questionId = this.props.listNameFromParent;\n    localStorage.setItem(\"comments\", this.state.comment);\n    var commentStorage = localStorage.getItem(\"comments\");\n    questionId.comment = commentStorage;\n  }\n\n  render() {\n    return React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"exampleText\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, \"Comment\"), React.createElement(Input, {\n      style: {\n        margin: '0',\n        width: \"100%\"\n      },\n      type: \"textarea\",\n      id: \"exampleText\",\n      onBlur: event => this.onblur(event) // onBlur={this.props.onBlur}\n      // onChange={this.props.handleChange}\n      ,\n      value: this.props.selectedCategory.comment,\n      name: \"comment\",\n      placeholder: \"First place comment if needed\",\n      onChange: this.handleChange.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Comments;","map":{"version":3,"sources":["C:\\Users\\aggad.samy\\Workspace\\UITP-React-Spring\\Front-end\\src\\components\\FormPage\\Mainform\\Comment\\Comment.js"],"names":["FormGroup","Label","Input","React","PureComponent","Comments","state","comment","handleChange","event","val","target","value","setState","onblur","questionId","props","listNameFromParent","localStorage","setItem","commentStorage","getItem","render","margin","width","selectedCategory","bind"],"mappings":";AAAA,SAASA,SAAT,EAAoBC,KAApB,EAA2BC,KAA3B,QAAwC,YAAxC;AACA,OAAOC,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;;AAEA,MAAMC,QAAN,SAAuBD,aAAvB,CAAqC;AAAA;AAAA;AAAA,SAEnCE,KAFmC,GAE3B;AACNC,MAAAA,OAAO,EAAE;AADH,KAF2B;AAAA;;AAMnC,QAAMC,YAAN,CAAmBC,KAAnB,EAA0B;AACxB,QAAIC,GAAG,GAAGD,KAAK,CAACE,MAAN,CAAaC,KAAvB;AACA,UAAM,KAAKC,QAAL,CAAc;AAClBN,MAAAA,OAAO,EAAEE,KAAK,CAACE,MAAN,CAAaC;AADJ,KAAd,CAAN;AAGD;;AACDE,EAAAA,MAAM,CAACL,KAAD,EAAQ;AACZ,UAAMM,UAAU,GAAG,KAAKC,KAAL,CAAWC,kBAA9B;AACAC,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiC,KAAKb,KAAL,CAAWC,OAA5C;AACA,QAAIa,cAAc,GAAGF,YAAY,CAACG,OAAb,CAAqB,UAArB,CAArB;AACAN,IAAAA,UAAU,CAACR,OAAX,GAAqBa,cAArB;AACD;;AAEDE,EAAAA,MAAM,GAAG;AAEP,WAAO,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACL,oBAAC,KAAD;AAAO,MAAA,GAAG,EAAC,aAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADK,EAEL,oBAAC,KAAD;AACE,MAAA,KAAK,EAAE;AAAEC,QAAAA,MAAM,EAAE,GAAV;AAAeC,QAAAA,KAAK,EAAE;AAAtB,OADT;AAEE,MAAA,IAAI,EAAC,UAFP;AAGE,MAAA,EAAE,EAAC,aAHL;AAIE,MAAA,MAAM,EAAGf,KAAD,IAAW,KAAKK,MAAL,CAAYL,KAAZ,CAJrB,CAKE;AACA;AANF;AAOE,MAAA,KAAK,EAAE,KAAKO,KAAL,CAAWS,gBAAX,CAA4BlB,OAPrC;AAQE,MAAA,IAAI,EAAC,SARP;AASE,MAAA,WAAW,EAAC,+BATd;AAUE,MAAA,QAAQ,EAAE,KAAKC,YAAL,CAAkBkB,IAAlB,CAAuB,IAAvB,CAVZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFK,CAAP;AAgBD;;AArCkC;;AAwCrC,eAAerB,QAAf","sourcesContent":["import { FormGroup, Label, Input } from 'reactstrap';\nimport React, { PureComponent } from 'react'\n\nclass Comments extends PureComponent {\n\n  state = {\n    comment: \"\",\n  }\n\n  async handleChange(event) {\n    var val = event.target.value\n    await this.setState({\n      comment: event.target.value\n    })\n  }\n  onblur(event) {\n    const questionId = this.props.listNameFromParent\n    localStorage.setItem(\"comments\", this.state.comment)\n    var commentStorage = localStorage.getItem(\"comments\")\n    questionId.comment = commentStorage\n  }\n\n  render() {\n    \n    return <FormGroup>\n      <Label for=\"exampleText\">Comment</Label>\n      <Input\n        style={{ margin: '0', width: \"100%\", }}\n        type=\"textarea\"\n        id=\"exampleText\"\n        onBlur={(event) => this.onblur(event)}\n        // onBlur={this.props.onBlur}\n        // onChange={this.props.handleChange}\n        value={this.props.selectedCategory.comment}\n        name=\"comment\"\n        placeholder=\"First place comment if needed\"\n        onChange={this.handleChange.bind(this)}\n      />\n    </FormGroup>\n\n  };\n}\n\nexport default Comments;\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}